---
layout:     post
title:      "Regular正则表达式"
subtitle:   "Hello World, Hello Blog"
date:       2020-5-15
author:     "Caiiiiii"
header-img: "img/post-bg-2015.jpg"
tags:
    - 计算机基础
    -正则表达式
---


# 元字符
### 匹配字符
- .  ：匹配除换行符意外的任意字符
- \w ：匹配字母或数字或下划线或汉字
- \s : 匹配任意的空白符
- \d ：匹配数字

### 匹配位置
- \b ：匹配单词的开始或结束
- ^  : 匹配字符串的开始
- $  : 匹配字符串的结束
- \G : 上一个匹配结尾（本次匹配开始）
- \A : 字符串开头（类似 ^,但不受处理多行选项的影响）
- \Z : 字符串结尾或行尾（不受处理多行选项的影响）
- \z : 字符串结尾（类似$，但不受处理多行选项的影响）

### 重复
- \* : 重复零次或者更多次
- \+ ：重复一次或者更多次
- ?  : 重复零次或者一次
- {n} : 重复n次
- {n,} : 重复n次或更多次
- {n,m} ：重复n到m次


# 字符转义

如果想匹配元字符本身或者正则中的一些特殊字符，使用 \ 转义。例如 匹配 \* 这个字符则使用 \\* ,匹配 \\ 这个字符，使用 \\\ 。

需要转义的字符 ： $ , ( , ) , \* , \+ , . , [ , ] , ? , \\ , ^ , { , } , |


# 字符类
当需要匹配明确的字符或字符集合的时候，就用到字符类。
### 特殊字符
- \0hh : 8进制值hh所表示的字符
- \xhh : 16进制值hh锁表示的字符
- \uhhhh : 16进制值hhhh所表示的Unicode字符
- \t : tab
- \n : 换行符
- \r : 回车符
- \f  : 换页符
- \e : Escape
- \CN : ASCII控制字符。比如\cC 代表 Ctrl+C
- \p{name} : Unicode 中命名为name的字符类，例如 \p{IsGreek}

### 陈列
- [aeiou] ： 匹配一个元音字符
- [.?!] ： 匹配给定的一个标点

### 范围
- [0-9] : 匹配0~9的数字，同 \d
- [a-z] : 匹配所有小写字母
- [a-zA-Z] : 匹配所有字母
- [a-z0-9A-Z_] : 等同于 \w

# 反义
### 反义元字符
- \W ：匹配任意不是字母、数字、下划线、汉字的字符
- \S ：匹配任意不是空白符的字符
- \D : 匹配任意非数字的字符
- \B : 匹配不是单词开头或结束的位置

### 反义字符类
- [^x] : 匹配除了x以外的任意字符
- [^aeiou] : 匹配除了aeiou这几个字母以外的任意字符

### 分支条件
又叫逻辑运算符，在此 X 和 Y 表示两个表达式
- XY ： X紧跟Y
- X|Y ： 表示X或Y，从左到右，满足第一个条件就不会继续匹配了

# 分组
在这里我把表达式统一以\w 为例 ：
- (\w) : 被一个括号包围起来是一个整体，表示一个分组
- (\w)(\w) : 自动命名分组，第一个小括号是分组1，第二个小括号是分组2
- (?'Word'\w+)) : 表示定义了一个叫做Word的分组
- (?\w+)) : 表示定义了一个叫做Word的分组
- (?:\w+) : 匹配exp，不捕获匹配的文本，也不给此分组分配组号

# 反向引用
后面的表达式可以引用前面的某个分组，用 \1 表示，就好像分组1的值赋值给了 \1 这个变量，这个变量可以在后面任意位置引用

- \1 表示分组1匹配的文本
- \k 表示分组 Word 匹配的文本

匹配重复两个英文，例如匹配 Hello Hello 、 lei123 lei123:
 - (\w+)\s+\1
 - (?\w+)s+\k

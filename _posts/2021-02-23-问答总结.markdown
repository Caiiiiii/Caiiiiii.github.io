---
layout:     post
title:      "问答总结"
subtitle:   "Hello World, Hello Blog"
date:       2021-02-23
author:     "Caiiiiii"
catalog:    true
header-img: "img/1174180_screenshots_20201019222158_1.jpg"
tags:
    - Spring
    - Java  
---
# equals 和 "==" 区别
## java 中 "==" 的含义
基本数据类型：比较他们的值
引用数据类型：比较的是内存中存放地址

## java 中equals的含义
这个方法初始默认行为是比较对象中的内存地址值。  
在一些类库中被重写，如String Integer，这些有其自身的实现，如比较对象的成员变量。






# HashMap 插入数据流程图
1.将Key的Hashcode根据函数生成hash值  
2.通过计算判断当前元素存放的位置，如果当前位置存在元素的话，就判断该元素与要存入的元素的hash值和key是否相同，如果是，就覆盖value值，如果不是，就在HashMap 当前位置下（桶）的链表后插入数据  

# HashMap 为什么是线程不安全的？想要线程安全如何做？
jdk1.7 是因为数组扩容的原因，当并发执行扩容操作时会造成环形链和数据丢失情况。  
jdk1.8 是因为HashMap在并发情况下执行put方法时会进行是否发生hash碰撞的判断，如果线程抢断，会发生数据覆盖的情况。  
[HashMap 为什么是线程不安全的](https://blog.csdn.net/zzu_seu/article/details/106669757)  


使用 java.util.Hashtable 类，此类是线程安全的。  
使用 java.util.concurrent.ConcurrentHashMap，此类是线程安全的。  
使用 java.util.Collections.synchronizedMap () 方法包装 HashMap   object，得到线程安全的 Map，并在此 Map 上进行操作。  


# HashMap 怎么循环
1. 用过ForEach 循环遍历  

```   
for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
			System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
		}

```

2. 带泛型的迭代器  

```
Iterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();
		while (entries.hasNext()) {
			Map.Entry<Integer, Integer> entry = entries.next();
			System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
		}

```


# HashTable是怎么上锁的？ConcurrentHashMap是怎么上锁的？
HashTable get/put所有的相关操作都是synchronized的，相当于整个Hash表加了一把大锁。  

ConcurrentHashMap   在jdk1.7是分段数组+链表，相当于多个数组+链表组成。每次锁住一段数组。  

ConcurrentHashMap  
 在jdk1.8是数组+链表形式，采用的CAS+ synchronized方式锁住数组。  
 - 在put()执行时，如果没有hash冲突就直接CAS无锁插入，如果存在hash冲突，就通过加锁（synchronized）的方式插入。




# SpringMVC 原理
SpringMVC 原理就是SpringMVC 工作流程

1.用户发送请求至前端控制器DispatcherServlet。  
2.DispatcherServlet收到请求调用HandlerMapping处理器映射器。  
3.处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。  
4.DispatcherServlet调用HandlerAdapter处理器适配器。  
5.HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。  
6.Controller执行完成返回ModelAndView。  
7.HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。  
8.DispatcherServlet将ModelAndView传给ViewReslover视图解析器。  
9.ViewReslover解析后返回具体View。  
10.DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。  
11.DispatcherServlet响应用户。  


### 简略点的版本
![简略版本](/img/springmvc.png)


# 多用连表查询

# Mybatis 是如何防止SQL注入？
1.Mybatis中使用#可以防止SQL注入，$并不能防止SQL注入  
2.#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。$将传入的数据直接显示生成在sql中。  
3.Mybatis实现SQL注入的原理是调用了jdbc中的PreparedStatement来进行预处理。  

# 拦截器的实现

1.UserInterceptor配置类继承HandlerInterceptor类重写preHandle，postHandle ，afterCompletion方法。  

## springboot 
springboot 中的拦截器配置类InterceptionConfig 继承了WebMvcConfigurer类 ，在addInterceptors注册UserInterceptor类并添加需要拦截的请求。

## springmvc
springmvc 则是在springmvc-config.xml文件中添加<mvc:interceptor>标签注册UserInterceptor 并添加需要拦截的请求。

# 二分法查找
```
private static int findIndex2(int[] arr, int ele) {
        int minIndex=0;
        int maxIndex=arr.length-1;
        int midIndex=(minIndex+maxIndex)/2;
        while (minIndex <= maxIndex){
            //如果要查的元素,正好等于中间索引所对应的元素 直接返回这个中间索引
            if (ele == arr[midIndex]) {
                return midIndex;
                //如果你要查找的元素比中间索引所对应的元素大 那么就动最小索引
            } else if (ele > arr[midIndex]) {

                minIndex = midIndex + 1;
                //如果你要查找的元素比中间索引所对应的元素小,那么你就动最大索引
            } else if (ele < arr[midIndex]) {
                maxIndex = midIndex - 1; 
            }
            //再重新计算中间索引
            midIndex = (minIndex + maxIndex) / 2;
        }
        return -1;
    }

```

# 用两个线程求 1 + 100的和
```
public class ThreadSum {
    public static void main(String[] args) {
         ThreadMethod t1 = new ThreadMethod();
         ThreadMethod t2 = new ThreadMethod();
         t1.run();
         t2.run();
    }
}
class  ThreadMethod implements  Runnable{
    static int sum = 0 ;
    static int num = 1;
    @Override
    public synchronized void run() {
        while ( num <= 100){
            sum+=num;
            num++;
        }
        if (num>100){
            System.out.println(sum);
        }
    }
}
```

# 线程池的实现原理

## 基本原理
线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后再线程创建后启动这些任务，如果线程数量超过了最大数量，则超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。

## 基本概念
- 核心线程数：指的是线程池的基本大小
- 最大线程数： 指的是，同一时刻线程池中线程的数量最大不能超过该值
- 任务队列： 是当任务较多时，线程池中线程的数量已经达到了核心线程数，这时候就是用任务队列来存储我们提交的任务。 与其他池化技术不同的是，线程池是基于生产者-消费者模式来实现的，任务的提交方是生产者，线程池是消费者

## 流程
![线程池原理](/img/threadpool.jpg)


- 先判断线程池中线程的数量是否超过核心线程数，如果没有超过核心线程数，就创建新的线程去执行任务；如果超过了核心线程数，就进入到下面流程。
- 判断任务队列是否已经满了，如果没有满，就将任务添加到任务队列中；如果已经满了，就进入到下面的流程。
- 再判断如果创建一个线程后，线程数是否会超过最大线程数，如果不会超过最大线程数，就创建一个新的线程来执行任务；如果会，则进入到下面的流程。
- 执行拒绝策略。

### 为什么是先判断任务队列有没有满，再判断有没有超过最大线程数？

答案和具体的源码实现有关。因为当需要创建线程的时候，都会调用addWorker()方法，在addWorker()的后半部分的逻辑中，会调用mainLock.lock()方法来获取全局锁，而获取锁就会造成一定的资源争抢。如果先判断最大线程数，再判断任务队列是否已满，这样就会造成线程池原理的4个步骤中，第1步判断核心线程数时要获取全局锁，第2步判断最大线程数时，又要获取全局锁，这样相比于先判断任务队列是否已满，再判断最大线程数，就可能会多出一次获取全局锁的过程。因此在设计线程池，为了尽可能的避免因为获取全局锁而造成资源的争抢，所以会先判断任务队列是否已满，再判断最大线程数。

### 拒绝策略

1）AbortPolicy  （默认策略）
直接抛出拒绝异常

2）CallerRunsPolicy
在调用者线程中，运行当前被丢弃的任务。
只会用调用者所在线程来运行任务，也就是说任务不会进入线程池。
如果线程池已经被关闭，则直接丢弃该任务。

简单而言，就是调用main程序去执行该线程。

3）DiscardOledestPolicy
丢弃队列中最老的，然后再次尝试提交新任务。

4）DiscardPolicy
直接静悄悄的丢弃这个任务，不触发任何动作。


# 进程和线程
进程是程序的一次执行过程，是系统进行资源分配和调度的基本单位。每个进程都有自己的地址空间。  
线程是是CPU调度和分配资源的基本单位，一个进程可以有多个线程

## 区别
根本区别：进程是操作系统资源调度的基本单位，线程是任务的调度执行的基本单位  
开销方面：进程都有自己的独立数据空间，程序之间的切换开销大；线程也有自己的运行栈和程序计数器，线程间的切换开销较小。  
共享空间：进程拥有各自独立的地址空间、资源，所以共享复杂，需要用IPC（Inter-Process Communication，进程间通信），但是同步简单。而线程共享所属进程的资源，因此共享简单，但是同步复杂，需要用加锁等措施。
同一进程中的线程共享本进程的地址空间和资源，而进程之间的地址空间和资源是相互独立的

# 线程执行瞬间问题

## Thread.start()
表示线程准备就绪，在main主程序中无论先后，都是后面的方法执行完才执行线程内的方法


# JVM内存模型
## 堆



# 什么是事务
事务包含一个或多个业务操作，这些操作要么都执行，要么都不执行。事务常被用来确保数据的一致性。


# MySQL索引

## 索引类型
1.普通索引
  - CREATE INDEX index_name ON table(column(length))
2.主键索引
3.唯一索引
  - CREATE UNIQUE INDEX indexName ON table(column(length))
4.全文索引
  - CREATE FULLTEXT INDEX index_content ON article(content)


# Mysql 分页查询SQL
```
select * from orders_history where type=8 limit 1000,10;
```
该条语句将会从表 orders_history 中查询第1000条数据之后的10条数据，也就是第1001条到第1010条数据。

优化思路：避免数据量大时扫描过多的记录   
添加条件，记录上次返回的主键，再下次查询时使用主键过滤

# Spring的依赖注入
## 使用set方法注入

UserService.java
```
public class UserService{
    private UserDao userdao;
    public void setUserDao11(UserDao userdao){
      this.userdao = userdao;
    }
    public void test(){
      userdao.test();
    }
}

```
applicationContext.xml  
配置文件使用property标签配置注入内容 
```
<bean id = "userServiceId" class="com.xxx.dao.service.UserService">
    <property name="userDao11" ref = "userDaoId"></property>
</bean>

<bean id="userDaoId" class="com.xxx.dao.factory.StaticFactory" factory-method="getUserDao"></bean>
```

## 使用构造器/构造方法注入
UserService.java
```
public class UserService{
    private UserDao userdaoparam;
    private int test_a;
    public UserService(UserDao userdaoparam){
      this.userdaoparam = userdaoparam;
    }

    public UserService(){

    }
}
```
applicationContext.xml    
有参构造函数注入使用constructor-arg标签name是要注入的构造函数的参数名   
如果注入的内容是引用类型，就使用‘ref=’给对象赋值,如果注入内容是普通数据类型，就使用‘value=’赋值，赋的值可以是任意值，无需提前注册。
```
<bean id = "userServiceId" class="com.xxx.dao.service.UserService">
   <constructor-arg name="userdaoparam" ref="userdaoId"></constructor-arg>
</bean>

<bean id="userDaoId" class="com.xxx.dao.factory.StaticFactory" factory-method="getUserDao"></bean>
```

# Spring Bean 相互依赖问题
一个类A，需要通过构造器注入类B，而类B又需要通过构造器注入类A。如果为类A和B配置的bean被互相注入的话，那么Spring IoC容器将检测出循环引用，并抛出 BeanCurrentlyInCreationException异常。

如果是通过get,set 注入就不会有问题 


# Spring 特点
- 控制翻转IOC
- 依赖注入 DI
- 面向切面编程AOP
- 容器：Spring是一个容器，它包含并管理对象的生命周期


# Spring Bean 作用域
- Singleton：是默认的作用域，如果没有指定作用域配置项，则默认为singletion
- Prototype：便是一个bean定义对应多个对象实例，Prototype 是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。
- request 每次HTTP 请求都会创建一个新的Bean ，仅适用于WebApplicationContext环境
- session 同一个HTTP Session 共享一个Bean，不同Sess
ion 适用不同Bean，仅适用于WebApplicationContext环境
- global-session : 一般用于Portlet应用环境，仅适用于WebApplicationContext环境



# 范式
## 第一范式 （1NF是对属性的原子性）
所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。

## 第二范式 （2NF是对记录的唯一性）
要求记录有唯一标识，即实体的唯一性，即不存在部分依赖；  
>  订单中间表：订单ID，商品ID，商品数量，商品名称。
这个表中商品名称只依赖于商品ID，所以不满足第二范式。所以会造成一些问题：  
- 数据冗余：多个商品同个店铺地址。
- 删除异常：删除商品后会把店铺信息删除。
- 更新异常：更新店铺地址的时候需要全部更新。

## 第三范式 （3NF是对字段的冗余性）
要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；






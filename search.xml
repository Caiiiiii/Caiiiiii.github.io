<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络</title>
      <link href="/2019/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="计算机网络常考面试题"><meta property="og:url" content="http://yoursite.com/2018/12/09/计算机网络/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy0ifyjox3j20yw0lqh8q.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvv9bi7u1j20aa04rwet.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvvg24b0ej20cc073dgu.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvvge5xhjj20g706nwez.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxv16bqdl7j20ob0r4amr.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fxv5s0gx3vj20tb0d67b6.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvncmrzquj21h60kyjwa.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvnhafyonj20wm0i077k.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxfi728xij20lg0a9q3u.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxfp48cz5j20ln0axwfh.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxh6hwmb7j20i00fk75m.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyhd91uq2j20ki036glz.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyi1xq953j20la03d74x.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyi1lcs47j20la03f0te.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyiaz6s3aj20ki07bq3z.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyiv251uqj20f20d80u3.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxz6rm0up4j20b007e75i.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxz77ruj6nj20i604egnb.jpg"><meta property="og:updated_time" content="2018-12-28T03:56:35.495Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="计算机网络常考面试题"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy0ifyjox3j20yw0lqh8q.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/12/09/计算机网络/"/>  <title>计算机网络常考面试题 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/12/09/计算机网络/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">计算机网络常考面试题</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-09T15:04:03+08:00">                2018-12-09              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-12-28T11:56:35+08:00" content="2018-12-28">      2018-12-28    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/计算机网络/" itemprop="url" rel="index">                    <span itemprop="name">计算机网络</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy0ifyjox3j20yw0lqh8q.jpg" alt=""><br><a id="more"></a></p><h1 id="OSI七层协议模型、TCP-IP四层模型和五层协议体系结构之间的关系"><a href="#OSI七层协议模型、TCP-IP四层模型和五层协议体系结构之间的关系" class="headerlink" title="OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系"></a>OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系</h1><h2 id="1、OSI七层模型"><a href="#1、OSI七层模型" class="headerlink" title="1、OSI七层模型"></a>1、OSI七层模型</h2><p>OSI七层协议模型主要是：应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）。</p><h2 id="2、TCP-IP四层模型"><a href="#2、TCP-IP四层模型" class="headerlink" title="2、TCP/IP四层模型"></a>2、TCP/IP四层模型</h2><p>TCP/IP是一个四层的体系结构，主要包括：应用层、运输层、网际层和网络接口层。从实质上讲，只有上边三层，网络接口层没有什么具体的内容。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvv9bi7u1j20aa04rwet.jpg" alt=""></p><h2 id="3、五层体系结构"><a href="#3、五层体系结构" class="headerlink" title="3、五层体系结构"></a>3、五层体系结构</h2><p>五层体系结构包括：应用层、运输层、网络层、数据链路层和物理层。<br>五层协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构。为了方便可以把下两层称为网络接口层。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvvg24b0ej20cc073dgu.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvvge5xhjj20g706nwez.jpg" alt=""></p><h2 id="4、各层作用"><a href="#4、各层作用" class="headerlink" title="4、各层作用"></a>4、各层作用</h2><p>1、物理层：<br>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。 　　</p><p>2、数据链路层：<br>定义了如何让格式化数据以进行传输（成帧），以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</p><p>3、网络层：<br>在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。 　　</p><p>4、运输层：<br>定义了一些传输数据的协议和端口号（WWW端口80等），如：<br>TCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）<br>UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。 　　</p><p>5、会话层：<br>通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） 　　</p><p>6、表示层：<br>可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。 　　</p><p>7、应用层：<br>是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。</p><h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxv16bqdl7j20ob0r4amr.jpg" alt=""></p><h3 id="需要的信息："><a href="#需要的信息：" class="headerlink" title="需要的信息："></a>需要的信息：</h3><p>ACK： TCP 协议规定，只有 ACK=1 时有效，也规定连接建立后所有发送的报文的 ACK 必须为 1。</p><p>SYN(SYNchronization) ： 在连接建立时用来同步序号。当 SYN=1 而 ACK=0 时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使 SYN=1 和 ACK=1. 因此, SYN 置 1 就表示这是一个连接请求或连接接受报文。</p><p>FIN （finish）即完，终结的意思， 用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ul><li>第一次握手：建立连接。客户端发送请求报文段，SYN设置为 1，SYN seq = x，客户端进入 SYN_SEND 状态，等待服务器确认。</li><li>第二次握手：服务器收到SYN报文段，对报文段进行确认。并将SYN设置为 1，同时将ACK设为x+1 ，SYN seq = y，将所有信息放在一个报文段发送给客户端。</li><li>第三次握手：客户端收到服务端的SYN+ACK报文段，然后将ACK设置为y+1，向服务端发送ACK报文段。进入ESTABLISHED状态，完成TCP三次握手。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为什么不是二次握手而是三次握手呢？</span><br><span class="line">ans：为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</span><br></pre></td></tr></table></figure><h2 id="四次挥手-四次分手"><a href="#四次挥手-四次分手" class="headerlink" title="四次挥手/四次分手"></a>四次挥手/四次分手</h2><ul><li>第一次挥手：主机A 设置seq和ack，向主机B发送FIN报文段，主机A进入FIN_WAIT状态，表示没有数据要发送给主机B了。</li><li>第二次挥手：主机B收到主机A的FIN报文段，想主机A回一个ACK报文段，ACK为seq + 1，主机B”告诉”主机A，同意你的关闭请求。</li><li>第三次挥手：主机B向主机A发送FIN报文段，请求关闭连接，主机B进入LAST_ACK状态。</li><li>第四次挥手：主机A收到主机B的FIN报文段，向主机B发送ACK报文段，主机B收到主机A的报文段后关闭连接。此时，主机A等待2MSL（报文最大生存时间）后没有收到回复，则主机A关闭连接。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为什么不是三次挥手而是四次挥手？</span><br><span class="line">ans：在第二次挥手结束后，表示主机A没有数据要发送给主机B，但主机B可以发送给主机A，当主机B也发送FIN报文段时，表示主机B也没有数据要发送了。彼此断开连接。</span><br></pre></td></tr></table></figure><h1 id="TCP-滑动窗口（避免拥塞的发生）"><a href="#TCP-滑动窗口（避免拥塞的发生）" class="headerlink" title="TCP 滑动窗口（避免拥塞的发生）"></a>TCP 滑动窗口（避免拥塞的发生）</h1><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fxv5s0gx3vj20tb0d67b6.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送31到41字节，&#123;32,33&#125;丢失，接收到31后向右滑动一格，由于没有收到32字节的确认，重新发送32到42的字节。</span><br></pre></td></tr></table></figure></p><h1 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h1><h3 id="TCP-主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。"><a href="#TCP-主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。" class="headerlink" title="TCP 主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。"></a>TCP 主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvncmrzquj21h60kyjwa.jpg" alt=""></p><h4 id="1、慢开始与拥塞避免"><a href="#1、慢开始与拥塞避免" class="headerlink" title="1、慢开始与拥塞避免"></a>1、慢开始与拥塞避免</h4><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p><h4 id="2、快重传与快恢复"><a href="#2、快重传与快恢复" class="headerlink" title="2、快重传与快恢复"></a>2、快重传与快恢复</h4><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxvnhafyonj20wm0i077k.jpg" alt=""></p><h1 id="TCP-和-UDP-的不同"><a href="#TCP-和-UDP-的不同" class="headerlink" title="TCP 和 UDP 的不同"></a>TCP 和 UDP 的不同</h1><p>TCP在传送数据之前必须先建立连接，数据传送结束后摇释放连接。<br>TCP不提供广播或者多播服务，由于TCP提供可靠的、面向连接的运输服务，因此不可避免地增加了许多的开销，如确认，流量控制，计时器及连接管理等。</p><p>而UDP在传送数据之前不需要先建立连接。接收方收到UDP的报文后，也不需要给出任何确认。<br>虽然UDP不提供可靠交付，但在某些情况下UDP确实最有效的工作方式。</p><p><strong>UDP：单个数据报，不用建立连接，简单，不可靠，会丢包，会乱序；</strong><br><strong>TCP：流式，需要建立连接，复杂，可靠 ，有序。</strong></p><h2 id="TCP对应的协议"><a href="#TCP对应的协议" class="headerlink" title="TCP对应的协议"></a>TCP对应的协议</h2><p>（1） FTP：定义了文件传输协议，使用21端口。</p><p>（2） Telnet：一种用于远程登陆的端口，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。</p><p>（3） SMTP：邮件传送协议，用于发送邮件。服务器开放的是25号端口。</p><p>（4） POP3：它是和SMTP对应，POP3用于接收邮件。POP3协议所用的是110端口。</p><p>（5）HTTP：是从Web服务器传输超文本到本地浏览器的传送协议。</p><h2 id="UDP对应的协议"><a href="#UDP对应的协议" class="headerlink" title="UDP对应的协议"></a>UDP对应的协议</h2><p>（1） DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。</p><p>（2） SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p><p>（3） TFTP(Trival File Tran敏感词er Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="什么是HTTP？"><a href="#什么是HTTP？" class="headerlink" title="什么是HTTP？"></a>什么是HTTP？</h2><p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。</p><p>HTTP 的工作方式是客户机与服务器之间的请求-应答协议。</p><h2 id="HTTP格式"><a href="#HTTP格式" class="headerlink" title="HTTP格式"></a>HTTP格式</h2><p>HTTP使用统一资源标识符（URI）来传输数据和建立连接。URL是一种特殊种类的资源标识符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://google.com/</span><br></pre></td></tr></table></figure></p><p>1.协议部分<br>该URL协议部分为http： ，表示网页用的是HTTP协议。后面//为分隔符<br>2.域名部分<br>域名是google.com，发送请求时，向DNS服务器解析IP<br>3.端口部分(非必要)<br>域名后面的和域名之间用：分隔，端口不是URL一个必须的部分，如果端口是80，可以省略不写。<br>4.虚拟目录部分(非必要)<br>从域名的第一个/开始到最后一个/为止，是虚拟目录的部分。虚拟目录也不是URL的必要部分<br>5.文件名部分(非必要)<br>如index.html，也不是必须部分<br>6.参数部分(非必要)<br>从?开始到#之间部分是参数部分，如果有多个参数，各个参数之间用&amp;作为分隔符。<br>7.锚部分(非必要)<br>从#开始到最后，都是锚部分</p><h2 id="GET方法和POST方法区别"><a href="#GET方法和POST方法区别" class="headerlink" title="GET方法和POST方法区别"></a>GET方法和POST方法区别</h2><p>（1）在客户端，GET方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据是放置在Request Body内提交的。因为POST的数据是不可见的，相比之下POST更安全。<br>（2）GET请求会被浏览器主动储存，而POST不会。<br>（3）GET方式提交数据最多1024个字节且参数的数据类型只接受ASCII字符，而POST没有限制。<br>（4）GET产生一个TCP数据包；POST产生两个TCP数据包。（先发头部header，返回100 continue后发送数据data）</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>服务器返回的 响应报文 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:center">类别</th><th style="text-align:right">原因短语</th></tr></thead><tbody><tr><td style="text-align:left">1XX</td><td style="text-align:center">Informational（信息性状态码）</td><td style="text-align:right">接收的请求正在处理</td></tr><tr><td style="text-align:left">2XX</td><td style="text-align:center">Success（成功状态码）</td><td style="text-align:right">请求正常处理完毕</td></tr><tr><td style="text-align:left">3XX</td><td style="text-align:center">Redirection（重定向状态码）</td><td style="text-align:right">需要进行附加操作以完成请求</td></tr><tr><td style="text-align:left">4XX</td><td style="text-align:center">Client Error（客户端错误状态码）</td><td style="text-align:right">服务器无法处理请求</td></tr><tr><td style="text-align:left">5XX</td><td style="text-align:center">Server Error（服务器错误状态码）</td><td style="text-align:right">服务器处理请求出错</td></tr></tbody></table><h3 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h3><ul><li>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul><li>200 OK</li><li>204 No Content：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li><li>206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li></ul><h3 id="3XX重定向"><a href="#3XX重定向" class="headerlink" title="3XX重定向"></a>3XX重定向</h3><ul><li>301 Moved Permanently ：永久性重定向</li><li>302 Found ：临时性重定向</li><li>303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li><li>304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li><li>307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li></ul><h3 id="4XXX客户端错误"><a href="#4XXX客户端错误" class="headerlink" title="4XXX客户端错误"></a>4XXX客户端错误</h3><ul><li>400 Bad Request ：请求报文中存在语法错误。</li><li>401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li><li>403 Forbidden ：请求被拒绝。</li><li>404 Not Found</li></ul><h3 id="5XX服务器错误"><a href="#5XX服务器错误" class="headerlink" title="5XX服务器错误"></a>5XX服务器错误</h3><ul><li>500 Internal Server Error ：服务器正在执行请求时发生错误。</li><li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p><p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p><p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。</p><p>使用 Session 维护用户登录状态的过程如下：</p><ul><li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li><li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li><li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li><li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li></ul><p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookie 与 Session 选择</span><br><span class="line"></span><br><span class="line">1、Cookie 只能存储 ASCII 码字符串，而 Session 则可以存取任何类型的数据，因此在考虑数据复杂性时首选 Session；</span><br><span class="line">2、Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</span><br><span class="line">3、对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</span><br></pre></td></tr></table></figure><h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2><h3 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h3><p>当一个用户发起一个静态资源请求的时候,浏览器会通过以下几步来获取资源<br>当第一次发送请求，http返回200的状态码，</p><p>如果没有关闭缓存请求的话（没标明不使用缓存，下述）则会在返回头中返回包含last-Modified以及Etag和Expires的字段（这些字段下面慢慢说），然后将文件保存在Cache目录下；</p><p>当后续请求该文件时候，先在本地查找该资源,如果在本地缓存找到对应的资源,但是不知道该资源是否过期或者已经过期, 则发一个http请求到服务器,然后服务器判断这个请求,</p><p>如果请求的资源在服务器上没有改动过,则返回304, 让浏览器使用本地找到的那个资源</p><p>而如果当服务器发现请求的资源已经修改过,或者这是一个新的请求(本地无对应资源),服务器则返回该资源的数据,并且返回200,</p><p>当然这个是指找到资源的情况下,如果服务器上没有这个资源,则返回404。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>缓解服务器压力；</li><li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li></ul><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。</p><h3 id="缓存指令"><a href="#缓存指令" class="headerlink" title="缓存指令"></a>缓存指令</h3><ul><li>禁止缓存 Cache-Control：no-store</li><li>强制缓存 Cache-Control：no-cache</li><li>私有缓存 Cache-Control：private<br>（private 指令规定了将资源作为私有缓存，只能被单独用户所使用，一般存储在用户浏览器中。）</li><li>公共缓存 Cache-Control：public<br>（public 指令规定了将资源作为公共缓存，可以被多个用户所使用，一般存储在代理服务器中。）</li></ul><h3 id="缓存过期机制"><a href="#缓存过期机制" class="headerlink" title="缓存过期机制"></a>缓存过期机制</h3><p>max-age 指令出现在请求报文中，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p><p>max-age 指令出现在响应报文中，表示缓存资源在缓存服务器中保存的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure></p><p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 04 Jul 2012 08:26:05 GMT</span><br></pre></td></tr></table></figure></p><p><strong>在 HTTP/1.1 中，会优先处理 max-age 指令；</strong></p><h3 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h3><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <a href="http://www.google.com/" target="_blank" rel="noopener">http://www.google.com/</a> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: &quot;82e22293907ce725faf67773957acd12&quot;</span><br></pre></td></tr></table></figure></p><p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-None-Match: &quot;82e22293907ce725faf67773957acd12&quot;</span><br></pre></td></tr></table></figure></p><p>last-modified : 表示文件最后修改时间；</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p> HTTP有以下安全问题：</p><ul><li>使用明文进行通信，内容可能会被窃听</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装</li><li>无法证明报文的完整性，报文有可能遭篡改</li></ul><p>HTTPs 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer 安全套接层）通信，再由 SSL 和 TCP 通信，也就是说 HTTPs 使用了隧道进行通信。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h2 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h2><p>1.对称密钥加密，加密和解密使用同一密钥。</p><ul><li>优点：运算速度快。</li><li>缺点：无法安全的将密钥传输给通信方。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxfi728xij20lg0a9q3u.jpg" alt=""></li></ul><p>2.非对称密钥加密<br>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p><ul><li>优点：可以更安全的将公开密钥传输给通信发送方</li><li>缺点：运算速度慢<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxfp48cz5j20ln0axwfh.jpg" alt=""></li></ul><h2 id="HTTPs采用的加密方式"><a href="#HTTPs采用的加密方式" class="headerlink" title="HTTPs采用的加密方式"></a>HTTPs采用的加密方式</h2><p>HTTPs采用混合的加密机制，使用非对称密钥加密用于传输对称密钥来保证传输过程的安全性，之后使用对称密钥加密进行通信来保证通信过程的效率。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxxh6hwmb7j20i00fk75m.jpg" alt=""></p><p>① 向<a href="https://www.domain.com/发起请求" target="_blank" rel="noopener">https://www.domain.com/发起请求</a><br>② 服务器端有证书公钥和证书私钥<br>③ 回复客户端一个证书公钥<br>④ 验证是否正确，如果正确，产生一个随机的key，用证书公钥加密该key<br>⑤ 将加密过后的key发送给服务器端<br>⑥ 服务器端用证书私钥解密后，将要发送的数据用key加密<br>⑦ 将用key加密后的数据发送给客户端<br>⑧ 客户端用key对加密的数据进行解密</p><h1 id="当你输入域名访问一个网站的时候，背后的过程"><a href="#当你输入域名访问一个网站的时候，背后的过程" class="headerlink" title="当你输入域名访问一个网站的时候，背后的过程"></a>当你输入域名访问一个网站的时候，背后的过程</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>当你在浏览器输入网址（google.com），并敲了回车，浏览器首先做的事是获取google.com的IP地址，发送一个UDP的包给DNS服务器，DNS会返回google.com的IP，这时候浏览器通常会把IP地址缓存下来。<br>有了服务器IP，得知本机IP，操作系统随机分配一个本机端口，和服务器默认端口80。TCP三次握手建立连接，发送HTTP请求。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyhd91uq2j20ki036glz.jpg" alt=""></p><h2 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h2><p>HTTP GET请求经多个路由器转发，到达服务器端。<br>经过反向代理服务器转发给后端Tomcat。（复用I/O方式）<br>（并且把Tomcat输出的HttpResponse再转发给浏览器）<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyi1xq953j20la03d74x.jpg" alt=""></p><h2 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h2><p>Http Request来到 Tomcat，这是由Java编写的，可以处理Servlet和Jsp的容器，我们的代码运行在这个容器中。<br>如同Web服务器一样，Tomcat也可能为每个请求分配一个线程去处理（Blcoking I/O模式）</p><p>Http Request被某个Servlet处理，Servlet把Http Request转化为框架使用的参数格式，分发给某个COntroller。（如果是用Spring）<br>执行Controller的代码，返回HTTP Response。</p><h2 id="归途"><a href="#归途" class="headerlink" title="归途"></a>归途</h2><p>Tomcat将Http Response 发给 代理服务器，代理服务器将之发给浏览器。<br>这个HTTP Response应该是一个HTML页面。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyi1lcs47j20la03f0te.jpg" alt=""></p><p><strong>如果使用的HTTP1.1，这个连接默认是keep-alive，不能关闭的</strong></p><h2 id="浏览器再次工作"><a href="#浏览器再次工作" class="headerlink" title="浏览器再次工作"></a>浏览器再次工作</h2><p>浏览器收到Http Response，从中读取HTML页面，开始准备显示这个页面。<br>但这个页面引用大量其他资源，例如js文件，CSS文件，图片等，这些资源也位于服务器，且可能在另外一个域名下。<br>这是只能一个个下载，从DNS获取IP开始，与之前相比，不同之处在于没有应用服务器如Tomcat的介入。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyiaz6s3aj20ki07bq3z.jpg" alt=""></p><p>服务器给浏览器发送js，CSS等文件时，会告知浏览器这些文件说明时候过期，浏览器会将文件缓存在本地，如不过期，下次请求直接从本地取。如果过期了，浏览器询问服务器端，文件是否修改过，如果没修改（304 Not Modified），还可以使用，否则服务器会发送最新的文件给浏览器。</p><p>浏览器根据HTML，JS，CSS进行布局绘制，生成我们在浏览器看到的内容。</p><h1 id="什么是Socket？"><a href="#什么是Socket？" class="headerlink" title="什么是Socket？"></a>什么是Socket？</h1><ul><li><p>解释一<br><strong>实际上socket是对TCP/IP协议的封装，它的出现只是使得程序员更方便地使用TCP/IP协议栈而已。socket本身并不是协议，它是应用层与TCP/IP协议族通信的中间软件抽象层，是一组调用接口（TCP/IP网络的API函数）</strong></p></li><li><p>解释二<br><strong>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</strong></p></li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxyiv251uqj20f20d80u3.jpg" alt=""></p><h1 id="什么是IO，什么是NIO，什么是AIO，什么是netty框架？"><a href="#什么是IO，什么是NIO，什么是AIO，什么是netty框架？" class="headerlink" title="什么是IO，什么是NIO，什么是AIO，什么是netty框架？"></a>什么是IO，什么是NIO，什么是AIO，什么是netty框架？</h1><h2 id="IO-（BIO）"><a href="#IO-（BIO）" class="headerlink" title="IO （BIO）"></a>IO （BIO）</h2><p>同步并阻塞，服务器实现模式为每一个连接建立一个线程。每个线程亲自处理并且一直等待IO的完成。<br>IO的局限：IO是面向流，阻塞式的，串行的一个过程，对每一个客户端的socket连接，IO都需要一个线程来处理，而且在此期间，这个线程一直被占用，直到Socket关闭。也就是说这期间大量的浪费了CPU的时间片和线程占用的内存资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream是单向的，比如InputStream只能进行读取操作，OutputStream只能进行写操作。</span><br></pre></td></tr></table></figure></p><h2 id="NIO-（new-IO）"><a href="#NIO-（new-IO）" class="headerlink" title="NIO （new IO）"></a>NIO （new IO）</h2><p>同步非阻塞，在NIO中有几个关键的概念：Channel（通道），Buffer（缓冲区），Selector（选择器）<br>创建一个独立的I/O线程，用于轮询多路复用器Selector。客户端发送的连接请求都会注册到多路复用器上，轮询检查IO是否准备完毕，当有Channel准备好时就处理，处理完继续循环。</p><p>Channel:为读取文件提供一个通道，是双向的，即可以进行读操作，也可以进行写操作。<br>Buffer：故名思意，缓冲区，实际上是一个容器，是一个连续数组。Channel提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由Buffer。<br>Selector（最关键一个部分）：用来轮询每个注册的Channel，一旦发现Channel有注册的事件发生，便获取事件然后进行处理。</p><h3 id="Selector："><a href="#Selector：" class="headerlink" title="Selector："></a>Selector：</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxz6rm0up4j20b007e75i.jpg" alt=""></p><p>　Selector类是NIO的核心类，Selector能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，并且避免了多线程之间的上下文切换导致的开销。</p><h3 id="Buffer："><a href="#Buffer：" class="headerlink" title="Buffer："></a>Buffer：</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxz77ruj6nj20i604egnb.jpg" alt=""></p><p>  上面的图描述了从一个客户端向服务端发送数据，然后服务端接收数据的过程。客户端发送数据时，必须先将数据存入Buffer中，然后将Buffer中的内容写入通道。服务端这边接收数据必须通过Channel将数据读入到Buffer中，然后再从Buffer中取出数据来处理。</p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><p>异步非阻塞<br>服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，每个线程不必亲自处理io，而是委派os来处理，并且也不需要等待io完成了，如果完成后，os会通知的。</p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>Netty是一款异步的事件驱动的网络应用框架和工具，用于快速开发可维护的高性能、高扩展性协议服务器和客户端。也就是说，Netty是一个NIO客户端/服务器框架，支持快速、简单地开发网络应用，如协议服务器和客户端。它极大简化了网络编程，如TCP和UDP套接字服务器。</p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/11/29/Java常见面试题/" rel="next" title="Java常见面试题">                <i class="fa fa-chevron-left"></i> Java常见面试题              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/12/12/数据库系统原理/" rel="prev" title="数据库系统原理">                数据库系统原理 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#OSI七层协议模型、TCP-IP四层模型和五层协议体系结构之间的关系"><span class="nav-number">1.</span> <span class="nav-text">OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1、OSI七层模型"><span class="nav-number">1.1.</span> <span class="nav-text">1、OSI七层模型</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2、TCP-IP四层模型"><span class="nav-number">1.2.</span> <span class="nav-text">2、TCP/IP四层模型</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3、五层体系结构"><span class="nav-number">1.3.</span> <span class="nav-text">3、五层体系结构</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4、各层作用"><span class="nav-number">1.4.</span> <span class="nav-text">4、各层作用</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#TCP协议"><span class="nav-number">2.</span> <span class="nav-text">TCP协议</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#需要的信息："><span class="nav-number">2.0.1.</span> <span class="nav-text">需要的信息：</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#三次握手"><span class="nav-number">2.1.</span> <span class="nav-text">三次握手</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#四次挥手-四次分手"><span class="nav-number">2.2.</span> <span class="nav-text">四次挥手/四次分手</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#TCP-滑动窗口（避免拥塞的发生）"><span class="nav-number">3.</span> <span class="nav-text">TCP 滑动窗口（避免拥塞的发生）</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#TCP-拥塞控制"><span class="nav-number">4.</span> <span class="nav-text">TCP 拥塞控制</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#TCP-主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。"><span class="nav-number">4.0.1.</span> <span class="nav-text">TCP 主要通过四个算法（机制）来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#1、慢开始与拥塞避免"><span class="nav-number">4.0.1.1.</span> <span class="nav-text">1、慢开始与拥塞避免</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#2、快重传与快恢复"><span class="nav-number">4.0.1.2.</span> <span class="nav-text">2、快重传与快恢复</span></a></li></ol></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#TCP-和-UDP-的不同"><span class="nav-number">5.</span> <span class="nav-text">TCP 和 UDP 的不同</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#TCP对应的协议"><span class="nav-number">5.1.</span> <span class="nav-text">TCP对应的协议</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#UDP对应的协议"><span class="nav-number">5.2.</span> <span class="nav-text">UDP对应的协议</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#HTTP"><span class="nav-number">6.</span> <span class="nav-text">HTTP</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#什么是HTTP？"><span class="nav-number">6.1.</span> <span class="nav-text">什么是HTTP？</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#HTTP格式"><span class="nav-number">6.2.</span> <span class="nav-text">HTTP格式</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#GET方法和POST方法区别"><span class="nav-number">6.3.</span> <span class="nav-text">GET方法和POST方法区别</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#HTTP状态码"><span class="nav-number">6.4.</span> <span class="nav-text">HTTP状态码</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1XX-信息"><span class="nav-number">6.4.1.</span> <span class="nav-text">1XX 信息</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2XX-成功"><span class="nav-number">6.4.2.</span> <span class="nav-text">2XX 成功</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3XX重定向"><span class="nav-number">6.4.3.</span> <span class="nav-text">3XX重定向</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4XXX客户端错误"><span class="nav-number">6.4.4.</span> <span class="nav-text">4XXX客户端错误</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5XX服务器错误"><span class="nav-number">6.4.5.</span> <span class="nav-text">5XX服务器错误</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Cookie"><span class="nav-number">6.5.</span> <span class="nav-text">Cookie</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Session"><span class="nav-number">6.6.</span> <span class="nav-text">Session</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#HTTP缓存"><span class="nav-number">6.7.</span> <span class="nav-text">HTTP缓存</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存过程"><span class="nav-number">6.7.1.</span> <span class="nav-text">缓存过程</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#优点"><span class="nav-number">6.7.2.</span> <span class="nav-text">优点</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Cache-Control"><span class="nav-number">6.7.3.</span> <span class="nav-text">Cache-Control</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存指令"><span class="nav-number">6.7.4.</span> <span class="nav-text">缓存指令</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存过期机制"><span class="nav-number">6.7.5.</span> <span class="nav-text">缓存过期机制</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存验证"><span class="nav-number">6.7.6.</span> <span class="nav-text">缓存验证</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#HTTPS"><span class="nav-number">7.</span> <span class="nav-text">HTTPS</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#加密"><span class="nav-number">7.1.</span> <span class="nav-text">加密</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#加密方法"><span class="nav-number">7.2.</span> <span class="nav-text">加密方法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#HTTPs采用的加密方式"><span class="nav-number">7.3.</span> <span class="nav-text">HTTPs采用的加密方式</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#当你输入域名访问一个网站的时候，背后的过程"><span class="nav-number">8.</span> <span class="nav-text">当你输入域名访问一个网站的时候，背后的过程</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#准备阶段"><span class="nav-number">8.1.</span> <span class="nav-text">准备阶段</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#WEB服务器"><span class="nav-number">8.2.</span> <span class="nav-text">WEB服务器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#应用服务器"><span class="nav-number">8.3.</span> <span class="nav-text">应用服务器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#归途"><span class="nav-number">8.4.</span> <span class="nav-text">归途</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#浏览器再次工作"><span class="nav-number">8.5.</span> <span class="nav-text">浏览器再次工作</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#什么是Socket？"><span class="nav-number">9.</span> <span class="nav-text">什么是Socket？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#什么是IO，什么是NIO，什么是AIO，什么是netty框架？"><span class="nav-number">10.</span> <span class="nav-text">什么是IO，什么是NIO，什么是AIO，什么是netty框架？</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#IO-（BIO）"><span class="nav-number">10.1.</span> <span class="nav-text">IO （BIO）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#NIO-（new-IO）"><span class="nav-number">10.2.</span> <span class="nav-text">NIO （new IO）</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Selector："><span class="nav-number">10.2.1.</span> <span class="nav-text">Selector：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Buffer："><span class="nav-number">10.2.2.</span> <span class="nav-text">Buffer：</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#AIO"><span class="nav-number">10.3.</span> <span class="nav-text">AIO</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Netty"><span class="nav-number">10.4.</span> <span class="nav-text">Netty</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用HEXO和MARKDOWN格式书写博客</title>
      <link href="/2019/10/18/%E7%94%A8HEXO%E5%92%8CMARKDOWN%E6%A0%BC%E5%BC%8F%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/18/%E7%94%A8HEXO%E5%92%8CMARKDOWN%E6%A0%BC%E5%BC%8F%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="HEXO,BLOG,MARKDOWN," /><meta name="description" content="1.标题，分类以及标签的格式以本文的标题作例子：上下必须有 —12345--- title: 用HEXO和MARKDOWN格式书写博客 categories: 配置篇 tags: [MARKDOWN,HEXO,BLOG] ---  title(标题) &amp;emsp;&amp;emsp;  随意编写即可  categries(分类) &amp;emsp;&amp;emsp;  根据个人的分类进行编写  tags(标签)"><meta name="keywords" content="HEXO,BLOG,MARKDOWN"><meta property="og:type" content="article"><meta property="og:title" content="用HEXO和MARKDOWN格式书写博客"><meta property="og:url" content="http://yoursite.com/2018/09/13/用HEXO和MARKDOWN格式书写博客/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:description" content="1.标题，分类以及标签的格式以本文的标题作例子：上下必须有 —12345--- title: 用HEXO和MARKDOWN格式书写博客 categories: 配置篇 tags: [MARKDOWN,HEXO,BLOG] ---  title(标题) &amp;emsp;&amp;emsp;  随意编写即可  categries(分类) &amp;emsp;&amp;emsp;  根据个人的分类进行编写  tags(标签)"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fv7totbwftj20lt0f176x.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fv6wnzuvzbj20i20mgn4t.jpg"><meta property="og:updated_time" content="2018-11-29T14:50:16.478Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="用HEXO和MARKDOWN格式书写博客"><meta name="twitter:description" content="1.标题，分类以及标签的格式以本文的标题作例子：上下必须有 —12345--- title: 用HEXO和MARKDOWN格式书写博客 categories: 配置篇 tags: [MARKDOWN,HEXO,BLOG] ---  title(标题) &amp;emsp;&amp;emsp;  随意编写即可  categries(分类) &amp;emsp;&amp;emsp;  根据个人的分类进行编写  tags(标签)"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fv7totbwftj20lt0f176x.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/09/13/用HEXO和MARKDOWN格式书写博客/"/>  <title>用HEXO和MARKDOWN格式书写博客 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/09/13/用HEXO和MARKDOWN格式书写博客/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">用HEXO和MARKDOWN格式书写博客</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-09-13T13:25:57+08:00">                2018-09-13              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-11-29T22:50:16+08:00" content="2018-11-29">      2018-11-29    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/配置篇/" itemprop="url" rel="index">                    <span itemprop="name">配置篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <h1 id="1-标题，分类以及标签的格式"><a href="#1-标题，分类以及标签的格式" class="headerlink" title="1.标题，分类以及标签的格式"></a>1.标题，分类以及标签的格式</h1><p>以本文的标题作例子：<strong>上下必须有 <font color="red">—</font></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> title: 用HEXO和MARKDOWN格式书写博客</span><br><span class="line"> categories: 配置篇</span><br><span class="line"> tags: [MARKDOWN,HEXO,BLOG]</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>title(标题)</strong><br> &emsp;&emsp;  随意编写即可</p></li><li><p><strong>categries(分类)</strong><br> &emsp;&emsp;  根据个人的分类进行编写</p></li><li><p><strong>tags(标签)</strong><br>   &emsp;&emsp;单个标签直接写上去，多个标签用大括号包括起来<br>&emsp;&emsp;[tag1,tag2,tag3]</p></li></ul><a id="more"></a><p>#2.MARKDOWN基本的书写格式</p><h2 id="MARKDOWN的六级标题"><a href="#MARKDOWN的六级标题" class="headerlink" title="MARKDOWN的六级标题"></a><strong>MARKDOWN的六级标题</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure><p>=====================</p><p>#一级标题</p><p>##二级标题</p><p>###三级标题</p><p>####四级标题</p><p>#####五级标题</p><h1 id="六级标题"><a href="#六级标题" class="headerlink" title="######六级标题"></a>######六级标题</h1><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a><strong>加粗</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要加粗的文字左右分别用两个*号包起来</span><br><span class="line"></span><br><span class="line">**加粗**</span><br></pre></td></tr></table></figure><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a><strong>斜体</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要倾斜的文字左右分别用一个*号包起来</span><br><span class="line"></span><br><span class="line">*斜体*</span><br></pre></td></tr></table></figure><h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a><strong>斜体加粗</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要倾斜和加粗的文字左右分别用三个*号包起来</span><br><span class="line"></span><br><span class="line">***</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><strong>删除线</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要加删除线的文字左右分别用两个~~号包起来</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>==========================</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><p>==========================</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">三个或者三个以上的 - 或者 * 都可以。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>####示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用新浪图床上传图片并获取图片的地址</span><br><span class="line">在CHROME浏览器安装图床插件，成功后在浏览器右上角即可看到</span><br><span class="line">打开后将图片拖拽进去，即生成图片地址</span><br><span class="line"></span><br><span class="line">插件地址：</span><br><span class="line">https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=zh-CN</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fv7totbwftj20lt0f176x.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fv6wnzuvzbj20i20mgn4t.jpg" alt=""></p><h2 id="超链接地址"><a href="#超链接地址" class="headerlink" title="超链接地址"></a><strong>超链接地址</strong></h2><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[谷歌](http://google.com)</span><br></pre></td></tr></table></figure></p><p>效果：<br><a href="http://google.com" target="_blank" rel="noopener">谷歌</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">:-|  :-: | -:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">在 - 左侧加 : ，表示内容靠左</span><br><span class="line">在 - 两侧加 : ，表示内容居中</span><br><span class="line">在 - 右侧加 : ，表示内容靠右</span><br><span class="line">用 | 隔开每一列</span><br></pre></td></tr></table></figure></p><p>示例：</p><table><thead><tr><th style="text-align:left">表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><p>1.单行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码之间分别用一个反引号包起来</span><br><span class="line"> `代码内容`</span><br></pre></td></tr></table></figure></p><p><code>create database hero;</code></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a><strong>特殊字符</strong></h2><p> 有些字符会与markdown格式冲突，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  &amp;  ￥</span><br></pre></td></tr></table></figure></p><p>2.代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码之间分别用三个反引号包起来，且两边的反引号单独占一行</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h1 id="3-发布"><a href="#3-发布" class="headerlink" title="3.发布"></a>3.发布</h1><p>再架构成功的基础下，打开git Bash，输入</p><blockquote><p>$ hexo d -g</p></blockquote><p>回车即发布</p>          </div>                            <footer class="post-footer">              <div class="post-tags">                      <a href="/tags/HEXO/" rel="tag"># HEXO</a>                      <a href="/tags/BLOG/" rel="tag"># BLOG</a>                      <a href="/tags/MARKDOWN/" rel="tag"># MARKDOWN</a>                  </div>                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/09/14/测试封面/" rel="prev" title="测试封面">                测试封面 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#1-标题，分类以及标签的格式"><span class="nav-number">1.</span> <span class="nav-text">1.标题，分类以及标签的格式</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#MARKDOWN的六级标题"><span class="nav-number">1.1.</span> <span class="nav-text">MARKDOWN的六级标题</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#六级标题"><span class="nav-number">2.</span> <span class="nav-text">######六级标题</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#加粗"><span class="nav-number">2.1.</span> <span class="nav-text">加粗</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#斜体"><span class="nav-number">2.2.</span> <span class="nav-text">斜体</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#斜体加粗"><span class="nav-number">2.3.</span> <span class="nav-text">斜体加粗</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#删除线"><span class="nav-number">2.4.</span> <span class="nav-text">删除线</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#引用"><span class="nav-number">2.5.</span> <span class="nav-text">引用</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#分割线"><span class="nav-number">2.6.</span> <span class="nav-text">分割线</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#图片"><span class="nav-number">2.7.</span> <span class="nav-text">图片</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#超链接地址"><span class="nav-number">2.8.</span> <span class="nav-text">超链接地址</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#表格"><span class="nav-number">2.9.</span> <span class="nav-text">表格</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#代码"><span class="nav-number">2.10.</span> <span class="nav-text">代码</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#特殊字符"><span class="nav-number">2.11.</span> <span class="nav-text">特殊字符</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#3-发布"><span class="nav-number">3.</span> <span class="nav-text">3.发布</span></a></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统原理</title>
      <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="数据库系统原理"><meta property="og:url" content="http://yoursite.com/2018/12/12/数据库系统原理/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy499njbjmj20we0s242h.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1ycm1w4uj20cg0c53yu.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy1zoti5r0j20mj0cgq3p.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy232x0mktj20cf0fqmxd.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy2346jszlj20dr0fwaac.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy2354hxemj20eb0ga74k.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy238mmb0lj20db0fp3yq.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy23dped3nj20na07fq6u.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy32pu9mbqj20c009mmyh.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy37ue2btlj205m058mx0.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy49lx01emj20cc05574a.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49n6653sj20d40az0tc.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy49lx01emj20cc05574a.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49s0oawnj208n04nq2t.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49t93ibfj206605l745.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49w8pqbhj206j04kglg.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49wuquwqj204m03f0sj.jpg"><meta property="og:updated_time" content="2018-12-12T15:48:26.716Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="数据库系统原理"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy499njbjmj20we0s242h.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/12/12/数据库系统原理/"/>  <title>数据库系统原理 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/12/12/数据库系统原理/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">数据库系统原理</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-12T23:48:26+08:00">                2018-12-12              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-12-12T23:48:26+08:00" content="2018-12-12">      2018-12-12    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/数据库/" itemprop="url" rel="index">                    <span itemprop="name">数据库</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy499njbjmj20we0s242h.jpg" alt=""><br><a id="more"></a></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>事务其实就是并发控制的基本单位</strong>，事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1ycm1w4uj20cg0c53yu.jpg" alt=""></p><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><h3 id="1-原子性（Atomicity）"><a href="#1-原子性（Atomicity）" class="headerlink" title="1.原子性（Atomicity）"></a>1.原子性（Atomicity）</h3><p><strong>事务被视为不可分割的最小单元</strong>，事务的所有操作要么全部提交成功，要么全部失败回滚。<br>回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p><h3 id="2-一致性（Consistency）"><a href="#2-一致性（Consistency）" class="headerlink" title="2.一致性（Consistency）"></a>2.一致性（Consistency）</h3><p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。例如，在事务开始时，数据库的所有数据都满足已设置的<strong>各种约束条件和业务规则</strong>，在事务结束时，数据虽然不同，必须仍满足先前设置的各种约束条件和业务规则，事务把数据库从一个一致性状态带入另一个一致性状态。</p><h3 id="3-隔离性（Isolation）"><a href="#3-隔离性（Isolation）" class="headerlink" title="3.隔离性（Isolation）"></a>3.隔离性（Isolation）</h3><p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。</p><h3 id="4-持久性（Durability）"><a href="#4-持久性（Durability）" class="headerlink" title="4.持久性（Durability）"></a>4.持久性（Durability）</h3><p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。<br>使用重做日志来保证持久性。</p><blockquote><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p><blockquote><p>1.只有满足一致性，事务的执行结果才是正确的。<br>2.在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。<br>3.在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。<br>4.事务满足持久化是为了能应对数据库崩溃的情况。</p></blockquote></blockquote><p><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy1zoti5r0j20mj0cgq3p.jpg" alt=""></p><h2 id="AUTOCOMMIT"><a href="#AUTOCOMMIT" class="headerlink" title="AUTOCOMMIT"></a>AUTOCOMMIT</h2><p>MySQL 默认采用自动提交模式。也就是说，如果不显式使用START TRANSACTION语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。</p><h1 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h1><p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p><h2 id="丢失修改"><a href="#丢失修改" class="headerlink" title="丢失修改"></a>丢失修改</h2><p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。<br>  &nbsp;   &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy232x0mktj20cf0fqmxd.jpg" alt=""></p><h2 id="读脏数据（脏读）"><a href="#读脏数据（脏读）" class="headerlink" title="读脏数据（脏读）"></a>读脏数据（脏读）</h2><p>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。<br>  &nbsp;   &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy2346jszlj20dr0fwaac.jpg" alt=""></p><h2 id="不可重复读（数据中途修改）"><a href="#不可重复读（数据中途修改）" class="headerlink" title="不可重复读（数据中途修改）"></a>不可重复读（数据中途修改）</h2><p>T2 读取一个数据，T1 对该数据做了修改。如果T2再次读取这个数据，此时读取的结果和第一次读取的结果不同。<br>  &nbsp;   &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;<img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy2354hxemj20eb0ga74k.jpg" alt=""></p><h2 id="幻想读（中途插入数据）"><a href="#幻想读（中途插入数据）" class="headerlink" title="幻想读（中途插入数据）"></a>幻想读（中途插入数据）</h2><p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。<br>  &nbsp;   &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp; <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy238mmb0lj20db0fp3yq.jpg" alt=""></p><h1 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h1><h2 id="MYSQL隔离级别"><a href="#MYSQL隔离级别" class="headerlink" title="MYSQL隔离级别"></a>MYSQL隔离级别</h2><p><strong>MySQL默认的事务处理级别是’REPEATABLE-READ’,也就是可重复读</strong></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy23dped3nj20na07fq6u.jpg" alt=""></p><h2 id="Oracle隔离级别"><a href="#Oracle隔离级别" class="headerlink" title="Oracle隔离级别"></a>Oracle隔离级别</h2><p>oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别。<br>默认系统事务隔离级别是READ COMMITTED,也就是读已提交</p><h1 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h1><h2 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h2><p>MySQL提供了两种封锁粒度：行级锁以及表级锁。</p><p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p><p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p><p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy32pu9mbqj20c009mmyh.jpg" alt=""></p><h2 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h2><h3 id="1-读写锁"><a href="#1-读写锁" class="headerlink" title="1.读写锁"></a>1.读写锁</h3><ul><li>排他锁，简写为X锁，又称写锁。</li><li>共享锁，简写为S锁，又称读锁。</li></ul><p>有以下两个规定：</p><ul><li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li><li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li></ul><h3 id="2-意向锁（Intention-Locks）"><a href="#2-意向锁（Intention-Locks）" class="headerlink" title="2.意向锁（Intention Locks）"></a>2.意向锁（Intention Locks）</h3><p>使用意向锁可以更容易地支持多粒度封锁。</p><p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><p>各种锁的兼容关系如下：<br><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy37ue2btlj205m058mx0.jpg" alt=""></p><p>解释如下：</p><ul><li>任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；</li><li>S 锁只与 S 锁和 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其它事务可以已经获得对表或者表中的行的 S 锁。</li></ul><h1 id="多版本并发控制-MVCC"><a href="#多版本并发控制-MVCC" class="headerlink" title="多版本并发控制(MVCC)"></a>多版本并发控制(MVCC)</h1><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><h1 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h1><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p><p>如果 {A1，A2，… ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p><p>对于 A-&gt;B，如果能找到 A 的真子集 A’，使得 A’-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p><p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>以下的学生课程关系的函数依赖为 Sno, Cname -&gt; Sname, Sdept, Mname, Grade，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy49lx01emj20cc05574a.jpg" alt=""></p><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p><ul><li>冗余数据：例如 学生-2 出现了两次。</li><li>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</li><li>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 课程-1 需要删除第一行和第三行，那么 学生-1 的信息就会丢失。</li><li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li></ul><h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><p>范式理论是为了解决以上提到四种异常。</p><p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。<br>  <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49n6653sj20d40az0tc.jpg" alt=""></p><h2 id="1-第一范式（1NF）"><a href="#1-第一范式（1NF）" class="headerlink" title="1.第一范式（1NF）"></a>1.第一范式（1NF）</h2><p>属性不可分</p><h2 id="2-第二范式（2NF）"><a href="#2-第二范式（2NF）" class="headerlink" title="2.第二范式（2NF）"></a>2.第二范式（2NF）</h2><p>每个非主属性完全函数依赖于键码。</p><p>可以通过分解来满足。</p><p><strong>分解前：</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy49lx01emj20cc05574a.jpg" alt=""></p><p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p><ul><li>Sno -&gt; Sname, Sdept</li><li>Sdept -&gt; Mname</li><li>Sno, Cname-&gt; Grade</li></ul><p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p><p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p><p><strong>分解后：</strong></p><p>关系-1<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49s0oawnj208n04nq2t.jpg" alt=""></p><p>有以下函数依赖：</p><ul><li>Sno -&gt; Sname,Sdept</li><li>Sdept -&gt; Mname</li></ul><p>关系-2<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49t93ibfj206605l745.jpg" alt=""></p><p>有以下函数依赖：</p><ul><li>Sno, Cname -&gt; Grade</li></ul><h2 id="3-第三范式（3NF）"><a href="#3-第三范式（3NF）" class="headerlink" title="3.第三范式（3NF）"></a>3.第三范式（3NF）</h2><p>非主属性不传递函数依赖于键码。</p><p>上面的 关系-1 中存在以下传递函数依赖：</p><ul><li>Sno -&gt; Sdept -&gt; Mname</li></ul><p>可以进行以下分解：<br>关系-11<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49w8pqbhj206j04kglg.jpg" alt=""><br>关系-12<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy49wuquwqj204m03f0sj.jpg" alt=""></p><h1 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h1><p>Entity-Relationship，有三个组成部分：实体、属性、联系。</p><p>用来进行关系型数据库系统的概念设计。</p><h2 id="ER图关系"><a href="#ER图关系" class="headerlink" title="ER图关系"></a>ER图关系</h2><p>1对1（1:1）：1对1关系是指对于实体集A与实体集B，A中的每一个实体至多与B中一个实体有关系；反之，在实体集B中的每个实体至多与实体集A中一个实体有关系。</p><p>1对多（1:N） ：1对多关系是指实体集A与实体集B中至少有N(N&gt;0)个实体有关系；并且实体集B中每一个实体至多与实体集A中一个实体有关系。</p><p>多对多（M:N） ：多对多关系是指实体集A中的每一个实体与实体集B中至少有M(M&gt;0)个实体有关系，并且实体集B中的每一个实体与实体集A中的至少N（N&gt;0）个实体有关系。</p><h2 id="ER实体"><a href="#ER实体" class="headerlink" title="ER实体"></a>ER实体</h2><p><strong>弱实体</strong>：一个实体必须依赖于另一个实体存在，那么前者是弱实体，后者是强实体，弱实体必须依赖强实体。</p><p>弱实体和强实体的联系必然只有1：N或者1：1，这是由于弱实体完全依赖于强实体，强实体不存在，那么弱实体就不存在，所以弱实体是完全参与联系的，因此弱实体与联系之间的联系也是用的双线菱形。</p><p><strong>复合实体</strong>：复合实体也称联合实体或桥接实体，常常用于实现两个或多个实体间的M：N联系，它由每个关联实体的主玛组成，用长方体内加一个菱形来表示。</p><h2 id="ER属性"><a href="#ER属性" class="headerlink" title="ER属性"></a>ER属性</h2><p><strong>复合属性(composite attribute)</strong>：复合属性是指具有多个属性的组合，例如名字属性，它可以包含姓氏属性和名字属性。</p><p><strong>多值属性（multivalued attribute）</strong>：一个实体的某个属性可以有多个不同的取值，例如一本书的分类属性，这本书有多个分类，例如科学、医学等，这个分类就是多值属性， 用双线椭圆表示。</p><p><strong>派生属性(derivers attribute)</strong>：是非永久性存于数据库的属性。派生属性的值可以从别的属性值或其他数据（如当前日期）派生出来，用虚线椭圆表示</p><p><strong>可选属性(optional attribute)</strong>：并不是所有的属性都必须有值，有些属性的可以没有值，这就是可选属性，在椭圆的文字后用（O）来表示</p><p><strong>联系属性</strong>：联系属于用户表示多个实体之间联系所具有的属性，一般来讲M:N的两个实体的联系具有联系属性，在1:1和1：M的实体联系中联系属性并不必要。</p><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><strong>悲观锁</strong>：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。再比如Java里面的同步原语synchronized关键字的实现也是悲观锁。<br><strong>乐观锁</strong>：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><h2 id="悲观锁的缺陷"><a href="#悲观锁的缺陷" class="headerlink" title="悲观锁的缺陷"></a>悲观锁的缺陷</h2><ul><li>在多线程程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li><li>一个线程持有锁会导致其它所有需要此锁的线程挂起。</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p><strong>冲突检测和数据更新</strong><br><strong>乐观锁是一种思想。CAS是这种思想的一种实现方式。</strong><br>CAS是乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/12/09/计算机网络/" rel="next" title="计算机网络常考面试题">                <i class="fa fa-chevron-left"></i> 计算机网络常考面试题              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/12/16/MYSQL详解/" rel="prev" title="MYSQL详解">                MYSQL详解 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#事务"><span class="nav-number">1.</span> <span class="nav-text">事务</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念"><span class="nav-number">1.1.</span> <span class="nav-text">概念</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ACID"><span class="nav-number">1.2.</span> <span class="nav-text">ACID</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-原子性（Atomicity）"><span class="nav-number">1.2.1.</span> <span class="nav-text">1.原子性（Atomicity）</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-一致性（Consistency）"><span class="nav-number">1.2.2.</span> <span class="nav-text">2.一致性（Consistency）</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-隔离性（Isolation）"><span class="nav-number">1.2.3.</span> <span class="nav-text">3.隔离性（Isolation）</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-持久性（Durability）"><span class="nav-number">1.2.4.</span> <span class="nav-text">4.持久性（Durability）</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#AUTOCOMMIT"><span class="nav-number">1.3.</span> <span class="nav-text">AUTOCOMMIT</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#并发一致性问题"><span class="nav-number">2.</span> <span class="nav-text">并发一致性问题</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#丢失修改"><span class="nav-number">2.1.</span> <span class="nav-text">丢失修改</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#读脏数据（脏读）"><span class="nav-number">2.2.</span> <span class="nav-text">读脏数据（脏读）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#不可重复读（数据中途修改）"><span class="nav-number">2.3.</span> <span class="nav-text">不可重复读（数据中途修改）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#幻想读（中途插入数据）"><span class="nav-number">2.4.</span> <span class="nav-text">幻想读（中途插入数据）</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#隔离级别"><span class="nav-number">3.</span> <span class="nav-text">隔离级别</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#MYSQL隔离级别"><span class="nav-number">3.1.</span> <span class="nav-text">MYSQL隔离级别</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Oracle隔离级别"><span class="nav-number">3.2.</span> <span class="nav-text">Oracle隔离级别</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#封锁"><span class="nav-number">4.</span> <span class="nav-text">封锁</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#封锁粒度"><span class="nav-number">4.1.</span> <span class="nav-text">封锁粒度</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#封锁类型"><span class="nav-number">4.2.</span> <span class="nav-text">封锁类型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-读写锁"><span class="nav-number">4.2.1.</span> <span class="nav-text">1.读写锁</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-意向锁（Intention-Locks）"><span class="nav-number">4.2.2.</span> <span class="nav-text">2.意向锁（Intention Locks）</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#多版本并发控制-MVCC"><span class="nav-number">5.</span> <span class="nav-text">多版本并发控制(MVCC)</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#关系数据库设计理论"><span class="nav-number">6.</span> <span class="nav-text">关系数据库设计理论</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#函数依赖"><span class="nav-number">6.1.</span> <span class="nav-text">函数依赖</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#异常"><span class="nav-number">6.2.</span> <span class="nav-text">异常</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#范式"><span class="nav-number">7.</span> <span class="nav-text">范式</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-第一范式（1NF）"><span class="nav-number">7.1.</span> <span class="nav-text">1.第一范式（1NF）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-第二范式（2NF）"><span class="nav-number">7.2.</span> <span class="nav-text">2.第二范式（2NF）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-第三范式（3NF）"><span class="nav-number">7.3.</span> <span class="nav-text">3.第三范式（3NF）</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#ER图"><span class="nav-number">8.</span> <span class="nav-text">ER图</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#ER图关系"><span class="nav-number">8.1.</span> <span class="nav-text">ER图关系</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ER实体"><span class="nav-number">8.2.</span> <span class="nav-text">ER实体</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ER属性"><span class="nav-number">8.3.</span> <span class="nav-text">ER属性</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#乐观锁和悲观锁"><span class="nav-number">9.</span> <span class="nav-text">乐观锁和悲观锁</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念-1"><span class="nav-number">9.1.</span> <span class="nav-text">概念</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#悲观锁的缺陷"><span class="nav-number">9.2.</span> <span class="nav-text">悲观锁的缺陷</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CAS"><span class="nav-number">9.3.</span> <span class="nav-text">CAS</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基础</title>
      <link href="/2019/10/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/10/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="操作系统基础"><meta property="og:url" content="http://yoursite.com/2018/12/21/操作系统基础/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fye8cb8asnj22fn0mutcw.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyaqrohuoaj20qw0iw75g.jpg"><meta property="og:updated_time" content="2018-12-21T03:59:01.035Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="操作系统基础"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fye8cb8asnj22fn0mutcw.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/12/21/操作系统基础/"/>  <title>操作系统基础 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/12/21/操作系统基础/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">操作系统基础</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-21T11:51:32+08:00">                2018-12-21              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-12-21T11:59:01+08:00" content="2018-12-21">      2018-12-21    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/操作系统/" itemprop="url" rel="index">                    <span itemprop="name">操作系统</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fye8cb8asnj22fn0mutcw.jpg" alt=""></p><a id="more"></a><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。</p><p>线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</p><p><strong>一个程序至少一个进程，一个进程至少一个线程。</strong></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。<br><strong>但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</strong></p><h2 id="进程间通信的方式有什么？线程间通信的方式有什么？"><a href="#进程间通信的方式有什么？线程间通信的方式有什么？" class="headerlink" title="进程间通信的方式有什么？线程间通信的方式有什么？"></a>进程间通信的方式有什么？线程间通信的方式有什么？</h2><h3 id="进程间通信的方式"><a href="#进程间通信的方式" class="headerlink" title="进程间通信的方式"></a>进程间通信的方式</h3><ul><li><p>管道 ： 半双工通信方式，数据单向流动。只能在具有亲缘关系的进程间使用。进程的亲缘关系通常指父子进程关系。</p></li><li><p>有名管道 ： 有名管道也是半双工通信方式，但是它允许无亲缘关系进程间的通信。</p></li><li><p>信号量 ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p></li><li><p>消息队列 ： 消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。</p></li><li><p>信号 ： 信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。</p></li><li><p>共享内存 ： 可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</p></li><li><p>套接字（Socket）: 这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</p></li></ul><h3 id="线程间通信的方式"><a href="#线程间通信的方式" class="headerlink" title="线程间通信的方式"></a>线程间通信的方式</h3><p>（共享变量？）</p><ul><li><p>同步 ： 多个线程通过synchronized关键词这种方式来实现线程间的通信。</p></li><li><p>while轮询 ：但是这种方式会浪费CPU资源</p></li><li><p>wait/notify机制 </p></li><li><p>管道通信 ： 主要实现两个线程之间的二进制数据的传输</p></li></ul><h2 id="进程同步问题"><a href="#进程同步问题" class="headerlink" title="进程同步问题"></a>进程同步问题</h2><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><h3 id="互斥与同步："><a href="#互斥与同步：" class="headerlink" title="互斥与同步："></a>互斥与同步：</h3><ul><li>临界资源（临界区）：指一次只能允许一个进程使用的共享资源称为临界资源；</li><li>同步：指为完成某种任务而建立的两个和多个进程，这些进程在合作的过程中需要协调工作次序进行有序的访问而出现等待所产生的制约关系。</li><li>互斥：指两个或多个进程访问临界资源时只能一个进程访问，其他进程等待的一种相互制约的关系。</li></ul><h3 id="信号量与互斥量："><a href="#信号量与互斥量：" class="headerlink" title="信号量与互斥量："></a>信号量与互斥量：</h3><ul><li>信号量：本身是一个计数器，使用P，V两个操作来实现计数的减与加，当计数不大于0时，则进程进入睡眠状态，它用于为多个进程提供共享数据对象的访问。</li><li>信号量：本身是一个计数器，使用P，V两个操作来实现计数的减与加，当计数不大于0时，则进程进入睡眠状态，它用于为多个进程提供共享数据对象的访问。</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Thread-sleep-和-Object-wait-Object-notify-方法区别"><a href="#Thread-sleep-和-Object-wait-Object-notify-方法区别" class="headerlink" title="Thread.sleep() 和 Object.wait() , Object.notify() 方法区别"></a>Thread.sleep() 和 Object.wait() , Object.notify() 方法区别</h3><ul><li>sleep()是Thread类的方法，而wait(),notify(),notifyAll()是Object类中定义的方法。都会影响线程的执行行为</li><li>Thread.sleep()不会导致锁行为的改变，如果当前线程是拥有锁的，那么Thread.sleep()不会让线程释放锁。如果能够帮助你的记忆的话，可以简单认为和锁相关方法都定义在Object类中，因此调用Thread.sleep()是不会影响锁的相关行为。</li><li>Thread.sleep和Object.wait都会暂停当前的线程，对于CPU资源来说，不管是哪种方式暂停的线程，都表示它暂时不在需要CPU的执行时间，OS会将执行时间分配给其他线程。区别是调用wait后，需要别的线程执行notify/notifyAll才能重新获得CPU执行时间。</li></ul><h3 id="线程状态图"><a href="#线程状态图" class="headerlink" title="线程状态图"></a>线程状态图</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyaqrohuoaj20qw0iw75g.jpg" alt=""></p><h2 id="实现生产者消费者模型"><a href="#实现生产者消费者模型" class="headerlink" title="实现生产者消费者模型"></a>实现生产者消费者模型</h2><p>生产者和消费者在同一时间段内共用同一存储空间，生产者向空间里生产数据，而消费者取走数据。</p><p>在Java中有四种方法支持</p><ul><li>Object的wait()/notify()方法</li><li>Lock和Condition的await() / signal()方法 </li><li>BlockingQueue阻塞队列方法 </li><li>PipedInputStream / PipedOutputStream</li></ul><p>前三中是同步方法，最后一种是管道方法</p><h3 id="使用Object的wait-notify-方法"><a href="#使用Object的wait-notify-方法" class="headerlink" title="使用Object的wait()/notify()方法"></a>使用Object的wait()/notify()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生产者消费者模式：使用Object.wait() / notify()方法实现</span><br><span class="line"> */</span><br><span class="line">public class ProducerConsumer &#123;</span><br><span class="line">    private static final int CAPACITY = 5;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        Thread producer1 = new Producer(&quot;P-1&quot;, queue, CAPACITY);</span><br><span class="line">        Thread producer2 = new Producer(&quot;P-2&quot;, queue, CAPACITY);</span><br><span class="line">        Thread consumer1 = new Consumer(&quot;C1&quot;, queue, CAPACITY);</span><br><span class="line">        Thread consumer2 = new Consumer(&quot;C2&quot;, queue, CAPACITY);</span><br><span class="line">        Thread consumer3 = new Consumer(&quot;C3&quot;, queue, CAPACITY);</span><br><span class="line"></span><br><span class="line">        producer1.start();</span><br><span class="line">        producer2.start();</span><br><span class="line">        consumer1.start();</span><br><span class="line">        consumer2.start();</span><br><span class="line">        consumer3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生产者</span><br><span class="line">     */</span><br><span class="line">    public static class Producer extends Thread&#123;</span><br><span class="line">        private Queue&lt;Integer&gt; queue;</span><br><span class="line">        String name;</span><br><span class="line">        int maxSize;</span><br><span class="line">        int i = 0;</span><br><span class="line"></span><br><span class="line">        public Producer(String name, Queue&lt;Integer&gt; queue, int maxSize)&#123;</span><br><span class="line">            super(name);</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.queue = queue;</span><br><span class="line">            this.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while(true)&#123;</span><br><span class="line">                synchronized(queue)&#123;</span><br><span class="line">                    while(queue.size() == maxSize)&#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            System.out .println(&quot;Queue is full, Producer[&quot; + name + &quot;] thread waiting for &quot; + &quot;consumer to take something from queue.&quot;);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125; catch (Exception ex) &#123;</span><br><span class="line">                            ex.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;[&quot; + name + &quot;] Producing value : +&quot; + i);</span><br><span class="line">                    queue.offer(i++);</span><br><span class="line">                    queue.notifyAll();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(new Random().nextInt(1000));</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消费者</span><br><span class="line">     */</span><br><span class="line">    public static class Consumer extends Thread&#123;</span><br><span class="line">        private Queue&lt;Integer&gt; queue;</span><br><span class="line">        String name;</span><br><span class="line">        int maxSize;</span><br><span class="line"></span><br><span class="line">        public Consumer(String name, Queue&lt;Integer&gt; queue, int maxSize)&#123;</span><br><span class="line">            super(name);</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.queue = queue;</span><br><span class="line">            this.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while(true)&#123;</span><br><span class="line">                synchronized(queue)&#123;</span><br><span class="line">                    while(queue.isEmpty())&#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            System.out.println(&quot;Queue is empty, Consumer[&quot; + name + &quot;] thread is waiting for Producer&quot;);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125; catch (Exception ex) &#123;</span><br><span class="line">                            ex.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    int x = queue.poll();</span><br><span class="line">                    System.out.println(&quot;[&quot; + name + &quot;] Consuming value : &quot; + x);</span><br><span class="line">                    queue.notifyAll();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(new Random().nextInt(1000));</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了防止线程虚假唤醒，在判断Queue大小为0或者大于等于queueSize时需使用while而不能使用if（自旋锁）</strong></p><h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>允许多个读者同时执行读写操作</li><li>不允许读者，写者同时操作</li><li>不允许多个写者同时操作</li></ul><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>ReentrantReadWriteLock会使用两把锁来解决问题，一个读锁，一个写锁。<br>线程进入读锁的前提条件：</p><ul><li>没有其他线程的写锁</li><li>没有写请求或者有写请求，但调用线程和持有锁的线程是同一个</li></ul><p>线程进入写锁的前提条件</p><ul><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ul><p>特性：</p><ul><li>WriteLock可以降级为ReadLock，顺序是：先获得WriteLock再获得ReadLock，然后释放WriteLock，这时候线程将保持Readlock的持有。反过来ReadLock想要升级为WriteLock则不可能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rwl.readLock().lock();</span><br><span class="line">      if (!cacheValid) &#123;</span><br><span class="line">         // Must release read lock before acquiring write lock</span><br><span class="line">         rwl.readLock().unlock();</span><br><span class="line">         rwl.writeLock().lock();</span><br><span class="line">        </span><br><span class="line">         if (!cacheValid) &#123;</span><br><span class="line">           data = ...</span><br><span class="line">           cacheValid = true;</span><br><span class="line">         &#125;</span><br><span class="line">       </span><br><span class="line">         rwl.readLock().lock();</span><br><span class="line">         rwl.writeLock().unlock(); // 降级：先获取读锁再释放写锁</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="读写锁实现读者写者问题"><a href="#读写锁实现读者写者问题" class="headerlink" title="读写锁实现读者写者问题"></a>读写锁实现读者写者问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">import java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line">public class ReadWriteLockTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final Queue3 q3 = new Queue3();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            new Thread() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    while (true) &#123;</span><br><span class="line">                        q3.get();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            new Thread() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    while (true) &#123;</span><br><span class="line">                        q3.put(new Random().nextInt(10000));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Queue3 &#123;</span><br><span class="line">    private Object data = null;// 共享数据，只能有一个线程能写该数据，但可以有多个线程同时读该数据。</span><br><span class="line">    private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    public void get() &#123;</span><br><span class="line">        rwl.readLock().lock();// 上读锁，其他线程只能读不能写</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + &quot; be ready to read data!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep((long) (Math.random() * 1000));</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + &quot;have read data :&quot; + data);</span><br><span class="line">        rwl.readLock().unlock(); // 释放读锁，最好放在finnaly里面</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(Object data) &#123;</span><br><span class="line">        rwl.writeLock().lock();// 上写锁，不允许其他线程读也不允许写</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + &quot; be ready to write data!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep((long) (Math.random() * 1000));</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        this.data = data;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + &quot; have write data: &quot; + data);</span><br><span class="line">        rwl.writeLock().unlock();// 释放写锁</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h3><p>暂不列举</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><ul><li>互斥： 每个资源要么已经分配给一个进程，要么就是可用的</li><li>占有和等待：已经得到某个资源的进程可以再请求新的资源</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放</li><li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占用的资源</li></ul><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><h3 id="鸵鸟策略"><a href="#鸵鸟策略" class="headerlink" title="鸵鸟策略"></a><strong>鸵鸟策略</strong></h3><p>把头埋在沙子里，假装根本没发生问题。</p><p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</p><p>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p><p>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p><h3 id="死锁检测与死锁恢复"><a href="#死锁检测与死锁恢复" class="headerlink" title="死锁检测与死锁恢复"></a><strong>死锁检测与死锁恢复</strong></h3><p>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p><ul><li>抢占恢复</li><li>回滚恢复</li><li>杀死进程恢复</li></ul><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a><strong>死锁预防</strong></h3><ul><li><p>破坏互斥条件</p><blockquote><p>打印机进程</p></blockquote></li><li><p>破坏占有和等待条件</p><blockquote><p>规定所有进程在开始执行前请求所需要的全部资源</p></blockquote></li><li><p>破坏不可抢占条件</p></li><li><p>破坏环路等待</p></li></ul><h3 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a><strong>死锁避免</strong></h3><p>在程序运行时避免发生死锁。<br><strong>银行家算法</strong></p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h2><p><strong>缓存就是数据交换的缓冲区</strong><br>是存放使用频繁的数据的临时地方。相对于取原始数据的速度快一些。</p><h2 id="缓存命中与缓存不命中"><a href="#缓存命中与缓存不命中" class="headerlink" title="缓存命中与缓存不命中"></a>缓存命中与缓存不命中</h2><p>数据是缓存好了，但是不一定缓存的数据就是需要的数据。</p><p>所以取数据时也分缓存命中和缓存不命中。</p><h3 id="缓存命中"><a href="#缓存命中" class="headerlink" title="缓存命中"></a>缓存命中</h3><p>意思就是第k+1层需要的数据就是第k层缓存好的，直接读取就行了。</p><h3 id="缓存不命中"><a href="#缓存不命中" class="headerlink" title="缓存不命中"></a>缓存不命中</h3><p>意思就是第k+1层需要的数据在第k层中没有。发生缓存不命中之后，会把该数据缓存在第k层中，如果当前有空余的空间还好，可以直接缓存，但是如果没有空间就会导致替换的发生，意思就是覆盖第k层中的某一个块，当然，这个不是随便替换的，也会使用适用于<strong>当前情况的替换策略</strong>，可以随机替换、也可以根据在某个时间段内引用次数最少的块来替换、还有替换掉最长时间没有使用的块。</p><h2 id="缓存方法"><a href="#缓存方法" class="headerlink" title="缓存方法"></a>缓存方法</h2><ul><li>Least Frequently Used（LFU 最近不经常使用）：计算每个缓存对象被使用的频率，把不常用的缓存对象踢走。</li><li>Least Recently User（LRU 最近最少使用）：把数据加入一个链表中，按访问时间排序，发生淘汰的时候，把访问时间最旧的淘汰掉。</li></ul>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/12/16/MYSQL详解/" rel="next" title="MYSQL详解">                <i class="fa fa-chevron-left"></i> MYSQL详解              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/12/26/Linux/" rel="prev" title="Linux">                Linux <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#进程和线程"><span class="nav-number">1.</span> <span class="nav-text">进程和线程</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念"><span class="nav-number">1.1.</span> <span class="nav-text">概念</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#区别"><span class="nav-number">1.2.</span> <span class="nav-text">区别</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#进程间通信的方式有什么？线程间通信的方式有什么？"><span class="nav-number">1.3.</span> <span class="nav-text">进程间通信的方式有什么？线程间通信的方式有什么？</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#进程间通信的方式"><span class="nav-number">1.3.1.</span> <span class="nav-text">进程间通信的方式</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#线程间通信的方式"><span class="nav-number">1.3.2.</span> <span class="nav-text">线程间通信的方式</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#进程同步问题"><span class="nav-number">1.4.</span> <span class="nav-text">进程同步问题</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#概念-1"><span class="nav-number">1.5.</span> <span class="nav-text">概念</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#互斥与同步："><span class="nav-number">1.5.1.</span> <span class="nav-text">互斥与同步：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#信号量与互斥量："><span class="nav-number">1.5.2.</span> <span class="nav-text">信号量与互斥量：</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#前言"><span class="nav-number">1.6.</span> <span class="nav-text">前言</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Thread-sleep-和-Object-wait-Object-notify-方法区别"><span class="nav-number">1.6.1.</span> <span class="nav-text">Thread.sleep() 和 Object.wait() , Object.notify() 方法区别</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#线程状态图"><span class="nav-number">1.6.2.</span> <span class="nav-text">线程状态图</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#实现生产者消费者模型"><span class="nav-number">1.7.</span> <span class="nav-text">实现生产者消费者模型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#使用Object的wait-notify-方法"><span class="nav-number">1.7.1.</span> <span class="nav-text">使用Object的wait()/notify()方法</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#读者-写者问题"><span class="nav-number">1.8.</span> <span class="nav-text">读者-写者问题</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#要求"><span class="nav-number">1.8.1.</span> <span class="nav-text">要求</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#读写锁"><span class="nav-number">1.8.2.</span> <span class="nav-text">读写锁</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#读写锁实现读者写者问题"><span class="nav-number">1.8.3.</span> <span class="nav-text">读写锁实现读者写者问题</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#哲学家问题"><span class="nav-number">1.8.4.</span> <span class="nav-text">哲学家问题</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#死锁"><span class="nav-number">2.</span> <span class="nav-text">死锁</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#必要条件"><span class="nav-number">2.1.</span> <span class="nav-text">必要条件</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#处理方法"><span class="nav-number">2.2.</span> <span class="nav-text">处理方法</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#鸵鸟策略"><span class="nav-number">2.2.1.</span> <span class="nav-text">鸵鸟策略</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#死锁检测与死锁恢复"><span class="nav-number">2.2.2.</span> <span class="nav-text">死锁检测与死锁恢复</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#死锁预防"><span class="nav-number">2.2.3.</span> <span class="nav-text">死锁预防</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#死锁避免"><span class="nav-number">2.2.4.</span> <span class="nav-text">死锁避免</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#缓存"><span class="nav-number">3.</span> <span class="nav-text">缓存</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#什么是缓存？"><span class="nav-number">3.1.</span> <span class="nav-text">什么是缓存？</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#缓存命中与缓存不命中"><span class="nav-number">3.2.</span> <span class="nav-text">缓存命中与缓存不命中</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存命中"><span class="nav-number">3.2.1.</span> <span class="nav-text">缓存命中</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#缓存不命中"><span class="nav-number">3.2.2.</span> <span class="nav-text">缓存不命中</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#缓存方法"><span class="nav-number">3.3.</span> <span class="nav-text">缓存方法</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/18/hello-world/"/>
      <url>/2019/10/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 框架分析</title>
      <link href="/2019/10/18/Spring%20%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/"/>
      <url>/2019/10/18/Spring%20%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Spring 框架分析"><meta property="og:url" content="http://yoursite.com/2019/02/02/Spring 框架分析/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzs88x5w1rj21hc0k07au.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzhsxn2he3g20e809ugll.gif"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzhtg30rvwg20c306et8k.gif"><meta property="og:updated_time" content="2019-02-02T09:54:57.052Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Spring 框架分析"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzs88x5w1rj21hc0k07au.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/02/02/Spring 框架分析/"/>  <title>Spring 框架分析 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/02/02/Spring 框架分析/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Spring 框架分析</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-02-02T17:54:56+08:00">                2019-02-02              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-02-02T17:54:57+08:00" content="2019-02-02">      2019-02-02    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/Spring篇/" itemprop="url" rel="index">                    <span itemprop="name">Spring篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzs88x5w1rj21hc0k07au.jpg" alt=""><br><a id="more"></a></p><h1 id="Spring-架构"><a href="#Spring-架构" class="headerlink" title="Spring 架构"></a>Spring 架构</h1><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzhsxn2he3g20e809ugll.gif" alt=""></p><p>Spring 框架三大核心组件：</p><ul><li>Core</li><li>Context</li><li>Beans</li></ul><p>他们构建起了整个 Spring 的骨骼架构。</p><h1 id="Spring-的设计理念"><a href="#Spring-的设计理念" class="headerlink" title="Spring 的设计理念"></a>Spring 的设计理念</h1><p>Bean 在 Spring 中作用就像 Object 对 OOP 的意义一样，没有对象的概念就没有面向对象编程。Spring 把对象之间的依赖关系转而用配置文件来管理，也就是他的依赖注入机制。而这个注入关系在一个叫 IOC 容器中管理，那么 IOC 容器就是被 Bean 包裹的对象，Spring整数通过把对象报装在 Bean 中而达到对这些对象的管理以及一些列而外操作的目的。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC 的全称是（Inversion of Control）控制反转，是面向对象编程中的一种设计原则,可以用来减低计算机代码之间的耦合度。</p><p>对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。</p><p>IoC是在系统运行时，动态的向某个对象提供它所需要的其他对象。这一点通过依赖注入（DI）来实现。</p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态地将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能。</p><p>简单来说就是某个对象需要调用其他对象时，被调用对象这个工作交予spring来完成，并且注入依赖。此处的依赖指Bean与容器间的依赖关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当某个角色 需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在spring中 创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者。因此也称为依赖注入。</span><br></pre></td></tr></table></figure><h2 id="IOC-和-DI-的关系"><a href="#IOC-和-DI-的关系" class="headerlink" title="IOC 和 DI 的关系"></a>IOC 和 DI 的关系</h2><p>其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”。相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p><h1 id="核心组件-协同工作"><a href="#核心组件-协同工作" class="headerlink" title="核心组件 协同工作"></a>核心组件 协同工作</h1><p>Context 就是一个 Bean 关系的集合，这个关系集合又叫 Ioc 容器。Core 就是发现、建立和维护每个 Bean 之间的关系所需要的一些列的工具。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzhtg30rvwg20c306et8k.gif" alt=""></p><h2 id="Bean-组件"><a href="#Bean-组件" class="headerlink" title="Bean 组件"></a>Bean 组件</h2><p>Bean 组件在 Spring 的 org.springframework.beans 包下。这个包下的所有类主要解决了三件事：</p><ul><li>Bean的定义</li><li>Bean的创建</li><li>Bean的解析</li></ul><p>对 Spring 的使用者来说唯一需要关心的是 Bean 的创建，其余的由 Spring 在内部帮你完成。</p><h2 id="Context组件"><a href="#Context组件" class="headerlink" title="Context组件"></a>Context组件</h2><p>Context 在 Spring 的 org.springframework.context 包下， Context 组件实际上就是给 Spring 提供一个运行时的环境，用以保存各个对象的状态。</p><p>ApplicationContext 是 Context 的顶级父类，他除了能标识一个应用环境的基本信息外，他还继承了五个接口，这五个接口主要是扩展了 Context 的功能。</p><p>总体来说 ApplicationContext 必须要完成以下几件事：</p><ul><li>标识一个应用环境</li><li>利用 BeanFactory 创建 Bean 对象</li><li>保存对象关系表</li><li><p>能够捕获各种事件</p><p>Context 作为 Spring 的 Ioc 容器，基本上整合了 Spring 的大部分功能，或者说是大部分功能的基础。</p></li></ul><h2 id="Core组件"><a href="#Core组件" class="headerlink" title="Core组件"></a>Core组件</h2><p>Core 组件作为 Spring 的核心组件，他其中包含了很多的关键类，其中一个重要组成部分就是定义了资源的访问方式。把所有资源都抽象成一个接口。</p><h1 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h1><p>面向切面编程（AOP是Aspect Oriented Program的首字母缩写） ，我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能分散到不同的对象中去，这在软件设计中往往称为职责分配。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。      这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。  </p><p>一般而言，我们管切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。有了AOP，我们就可以把几个类共有的代码，抽取到一个切片中，等到需要时再切入对象中去，从而改变其原有的行为。这样看来，AOP其实只是OOP的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。如果加上时间维度，AOP使OOP由原来的二维变为三维了，由平面变成立体了。从技术上来说，AOP基本上是通过代理机制实现的。     </p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/01/23/Java IO/" rel="next" title="Java IO">                <i class="fa fa-chevron-left"></i> Java IO              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/02/16/AOP/" rel="prev" title="AOP">                AOP <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#Spring-架构"><span class="nav-number">1.</span> <span class="nav-text">Spring 架构</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Spring-的设计理念"><span class="nav-number">2.</span> <span class="nav-text">Spring 的设计理念</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#IOC"><span class="nav-number">2.1.</span> <span class="nav-text">IOC</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#DI"><span class="nav-number">2.2.</span> <span class="nav-text">DI</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#IOC-和-DI-的关系"><span class="nav-number">2.3.</span> <span class="nav-text">IOC 和 DI 的关系</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#核心组件-协同工作"><span class="nav-number">3.</span> <span class="nav-text">核心组件 协同工作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Bean-组件"><span class="nav-number">3.1.</span> <span class="nav-text">Bean 组件</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Context组件"><span class="nav-number">3.2.</span> <span class="nav-text">Context组件</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Core组件"><span class="nav-number">3.3.</span> <span class="nav-text">Core组件</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#AOP（面向切面编程）"><span class="nav-number">4.</span> <span class="nav-text">AOP（面向切面编程）</span></a></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句</title>
      <link href="/2019/10/18/SQL%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/10/18/SQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="SQL语句"><meta property="og:url" content="http://yoursite.com/2019/03/08/SQL语句/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1wc6zy5sj20sg0hptd7.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy0uoqvdjtj20go0d478k.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1rvrak3rj20if0dadh7.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1rw7vu54j20ih0l5di7.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1g0uqqpd352j20g502o3yd.jpg"><meta property="og:updated_time" content="2019-03-07T17:29:40.712Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="SQL语句"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1wc6zy5sj20sg0hptd7.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/03/08/SQL语句/"/>  <title>SQL语句 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/03/08/SQL语句/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">SQL语句</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-03-08T01:29:26+08:00">                2019-03-08              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-03-08T01:29:40+08:00" content="2019-03-08">      2019-03-08    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/数据库/" itemprop="url" rel="index">                    <span itemprop="name">数据库</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1wc6zy5sj20sg0hptd7.jpg" alt=""><br><a id="more"></a></p><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="SQL-SELECT-语句"><a href="#SQL-SELECT-语句" class="headerlink" title="SQL SELECT 语句"></a>SQL SELECT 语句</h2><p>SELECT 语句用于从表中选取数据。</p><ul><li>SELECT 列名称 FROM 表名称</li><li>SELECT * FROM 表名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LastName,FirstName FROM Persons</span><br></pre></td></tr></table></figure><h2 id="SQL-SELECT-DISTINCT-语句"><a href="#SQL-SELECT-DISTINCT-语句" class="headerlink" title="SQL SELECT DISTINCT 语句"></a>SQL SELECT DISTINCT 语句</h2><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。<br>关键词 DISTINCT 用于返回唯一不同的值。</p><ul><li>SELECT DISTINCT 列名称 FROM 表名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT Company FROM Orders</span><br></pre></td></tr></table></figure></li></ul><h2 id="WHERE-语句"><a href="#WHERE-语句" class="headerlink" title="WHERE 语句"></a>WHERE 语句</h2><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。</p><ul><li>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City=&apos;Beijing&apos;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">&lt;&gt;  /   !=</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">>=</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">在某个范围内</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">搜索某种模式</td></tr></tbody></table><p><strong>如果条件值为文本值，则需要单引号。如果是数值，不要用引号</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE FirstName=&apos;Bush&apos;</span><br><span class="line"></span><br><span class="line">SELECT * FROM Persons WHERE Year&gt;1965</span><br></pre></td></tr></table></figure></p><h2 id="SQL-AND-amp-OR-语句"><a href="#SQL-AND-amp-OR-语句" class="headerlink" title="SQL AND &amp; OR 语句"></a>SQL AND &amp; OR 语句</h2><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。<br>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。<br>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE FirstName=&apos;Thomas&apos; AND LastName=&apos;Carter&apos;</span><br><span class="line"></span><br><span class="line">SELECT * FROM Persons WHERE firstname=&apos;Thomas&apos; OR lastname=&apos;Carter&apos;</span><br></pre></td></tr></table></figure><h2 id="SQL-ORDER-BY-语句"><a href="#SQL-ORDER-BY-语句" class="headerlink" title="SQL ORDER BY 语句"></a>SQL ORDER BY 语句</h2><p>ORDER BY 语句用于根据指定的列对结果集进行排序。<br>ORDER BY 语句默认按照升序对记录进行排序。<br>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Company, OrderNumber FROM Orders ORDER BY Company //正字母顺序</span><br><span class="line"></span><br><span class="line">SELECT Company, OrderNumber FROM Orders ORDER BY Company DESC  //逆字母顺序</span><br></pre></td></tr></table></figure></p><h2 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h2><p>INSERT INTO 语句用于向表格中插入新的行。</p><ul><li>INSERT INTO 表名称 VALUES (值1, 值2,….)</li><li>INSERT INTO table_name (列1, 列2,…) VALUES (值1, 值2,….)       //指定值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons VALUES (&apos;Gates&apos;, &apos;Bill&apos;, &apos;Xuanwumen 10&apos;, &apos;Beijing&apos;)</span><br></pre></td></tr></table></figure><h2 id="SQL-UPDATE-语句"><a href="#SQL-UPDATE-语句" class="headerlink" title="SQL UPDATE 语句"></a>SQL UPDATE 语句</h2><p>Update 语句用于修改表中的数据。</p><ul><li>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Person SET FirstName = &apos;Fred&apos; WHERE LastName = &apos;Wilson&apos;</span><br></pre></td></tr></table></figure><h2 id="SQL-DELETE-语句"><a href="#SQL-DELETE-语句" class="headerlink" title="SQL DELETE 语句"></a>SQL DELETE 语句</h2><p>DELETE 语句用于删除表中的行。</p><ul><li>DELETE FROM 表名称 WHERE 列名称 = 值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Person WHERE LastName = &apos;Wilson&apos;</span><br></pre></td></tr></table></figure><h3 id="删除所有行"><a href="#删除所有行" class="headerlink" title="删除所有行"></a>删除所有行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line"></span><br><span class="line">DELETE * FROM table_name</span><br></pre></td></tr></table></figure><h1 id="SQL-TOP-字句"><a href="#SQL-TOP-字句" class="headerlink" title="SQL TOP 字句"></a>SQL TOP 字句</h1><p>TOP 子句用于规定要返回的记录的数目。<br>对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。<br><strong>并非所有的数据库系统都支持 TOP 子句。</strong></p><h3 id="MySQL-语法"><a href="#MySQL-语法" class="headerlink" title="MySQL 语法"></a>MySQL 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name LIMIT number</span><br><span class="line"></span><br><span class="line">SELECT * FROM Persons LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="Oracle-语法"><a href="#Oracle-语法" class="headerlink" title="Oracle 语法"></a>Oracle 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name WHERE ROWNUM &lt;= number</span><br><span class="line"></span><br><span class="line">SELECT * FROM Persons WHERE ROWNUM &lt;= 5</span><br></pre></td></tr></table></figure><h2 id="SQL-LIKE-操作符（模糊搜索）"><a href="#SQL-LIKE-操作符（模糊搜索）" class="headerlink" title="SQL LIKE 操作符（模糊搜索）"></a>SQL LIKE 操作符（模糊搜索）</h2><p>LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p><ul><li>SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>现在，我们希望从上面的 “Persons” 表中选取居住在以 “N” 开始的城市里的人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;N%&apos;</span><br></pre></td></tr></table></figure></p><p>接下来，我们希望从 “Persons” 表中选取居住在以 “g” 结尾的城市里的人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;%g&apos;</span><br></pre></td></tr></table></figure></p><p>接下来，我们希望从 “Persons” 表中选取居住在包含 “lon” 的城市里的人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;%lon%&apos;</span><br></pre></td></tr></table></figure></p><p>通过使用 NOT 关键字，我们可以从 “Persons” 表中选取居住在不包含 “lon” 的城市里的人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City NOT LIKE &apos;%lon%&apos;</span><br></pre></td></tr></table></figure></p><h2 id="SQL-通配符"><a href="#SQL-通配符" class="headerlink" title="SQL 通配符"></a>SQL 通配符</h2><p>在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符。<br><strong>SQL 通配符必须与 LIKE 运算符一起使用。</strong><br>通配符|描述<br>:-:|:-:<br>%|替代一个或多个字符<br>_|仅替代一个字符<br>[charlist]|字符列中的任何单一字符<br>[^charlist] 或 [!charlist]|不在字符列中的任何单一字符</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ul><li><p>使用 % 通配符<br>现在，我们希望从上面的 “Persons” 表中选取居住在以 “Ne” 开始的城市里的人：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;Ne%&apos;</span><br></pre></td></tr></table></figure></li><li><p>使用 _ 通配符<br>我们希望从 “Persons” 表中选取的这条记录的姓氏以 “C” 开头，然后是一个任意字符，然后是 “r”，然后是任意字符，然后是 “er”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE LastName LIKE &apos;C_r_er&apos;</span><br></pre></td></tr></table></figure></li><li><p>使用 [charlist] 通配符<br>我们希望从上面的 “Persons” 表中选取居住的城市以 “A” 或 “L” 或 “N” 开头的人：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;[ALN]%&apos;</span><br></pre></td></tr></table></figure></li><li><p>使用 [!charlist] 通配符<br>我们希望从上面的 “Persons” 表中选取居住的城市不以 “A” 或 “L” 或 “N” 开头的人：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE City LIKE &apos;[!ALN]%&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL-IN-操作符"><a href="#SQL-IN-操作符" class="headerlink" title="SQL IN 操作符"></a>SQL IN 操作符</h2><p>IN 操作符允许我们在 WHERE 子句中规定多个值。</p><ul><li>SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,…)</li></ul><p>我们希望从上表中选取姓氏为 Adams 和 Carter 的人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE LastName IN (&apos;Adams&apos;,&apos;Carter&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="BETWEEN-操作符"><a href="#BETWEEN-操作符" class="headerlink" title="BETWEEN 操作符"></a>BETWEEN 操作符</h2><p>操作符 BETWEEN … AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。<br><strong>请检查你的数据库是如何处理 BETWEEN….AND 操作符</strong></p><ul><li>SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2</li></ul><p>如需以字母顺序显示介于 “Adams”（包括）和 “Carter”（不包括）之间的人，请使用下面的 SQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE LastName BETWEEN &apos;Adams&apos; AND &apos;Carter&apos;</span><br></pre></td></tr></table></figure></p><p>如需使用上面的例子显示范围之外的人，请使用 NOT 操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons WHERE LastName NOT BETWEEN &apos;Adams&apos; AND &apos;Carter&apos;</span><br></pre></td></tr></table></figure></p><h2 id="SQL-Alias（别名）"><a href="#SQL-Alias（别名）" class="headerlink" title="SQL Alias（别名）"></a>SQL Alias（别名）</h2><p>通过使用 SQL，可以为列名称和表名称指定别名（Alias）。</p><p>假设我们有两个表分别是：”Persons” 和 “Product_Orders”。我们分别为它们指定别名 “p” 和 “po”。<br>现在，我们希望列出 “John Adams” 的所有定单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT po.OrderID, p.LastName, p.FirstName</span><br><span class="line">FROM Persons AS p, Product_Orders AS po</span><br><span class="line">WHERE p.LastName=&apos;Adams&apos; AND p.FirstName=&apos;John&apos;</span><br></pre></td></tr></table></figure></p><h2 id="SQL-JOIN"><a href="#SQL-JOIN" class="headerlink" title="SQL JOIN"></a>SQL JOIN</h2><p>SQL join 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。</p><ul><li><p>普通 SQL 双表查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons, Orders</span><br><span class="line">WHERE Persons.Id_P = Orders.Id_P</span><br></pre></td></tr></table></figure></li><li><p>使用SQL Join方法(内连接)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons</span><br><span class="line">INNER JOIN Orders</span><br><span class="line">ON Persons.Id_P = Orders.Id_P</span><br><span class="line">ORDER BY Persons.LastName</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库左连接、右连接、内连接、全连接"><a href="#数据库左连接、右连接、内连接、全连接" class="headerlink" title="数据库左连接、右连接、内连接、全连接"></a>数据库左连接、右连接、内连接、全连接</h3><ul><li>INNER JOIN : 在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li><li>LEFT JOIN : LEFT JOIN 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有匹配的行。</li><li>RIGHT JOIN ：RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。</li><li>FULL JOIN ：只要其中某个表存在匹配，FULL JOIN 关键字就会返回行。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy0uoqvdjtj20go0d478k.jpg" alt=""></p><h2 id="SQL-UNION-和-UNION-ALL-操作符（少用）"><a href="#SQL-UNION-和-UNION-ALL-操作符（少用）" class="headerlink" title="SQL UNION 和 UNION ALL 操作符（少用）"></a>SQL UNION 和 UNION ALL 操作符（少用）</h2><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。<br><strong>UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name1</span><br><span class="line">UNION</span><br><span class="line">SELECT column_name(s) FROM table_name2</span><br><span class="line"></span><br><span class="line">SELECT column_name(s) FROM table_name1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT column_name(s) FROM table_name2</span><br></pre></td></tr></table></figure></p><h2 id="SELECT-INTO-语句"><a href="#SELECT-INTO-语句" class="headerlink" title="SELECT INTO 语句"></a>SELECT INTO 语句</h2><p>SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。<br>SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。</p><p>下面的例子会制作 “Persons” 表的备份复件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">INTO Persons_backup</span><br><span class="line">FROM Persons</span><br></pre></td></tr></table></figure></p><h2 id="CREATE-DATABASE-语句"><a href="#CREATE-DATABASE-语句" class="headerlink" title="CREATE DATABASE 语句"></a>CREATE DATABASE 语句</h2><p>CREATE DATABASE 用于创建数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database_name</span><br></pre></td></tr></table></figure></p><h2 id="CREATE-TABLE-语句"><a href="#CREATE-TABLE-语句" class="headerlink" title="CREATE TABLE 语句"></a>CREATE TABLE 语句</h2><p>CREATE TABLE 语句用于创建数据库中的表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名称</span><br><span class="line">(</span><br><span class="line">列名称1 数据类型,</span><br><span class="line">列名称2 数据类型,</span><br><span class="line">列名称3 数据类型,</span><br><span class="line">....</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>本例演示如何创建名为 “Person” 的表。<br>该表包含 5 个列，列名分别是：”Id_P”、”LastName”、”FirstName”、”Address” 以及 “City”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int,</span><br><span class="line">LastName varchar(255),</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="SQL-约束"><a href="#SQL-约束" class="headerlink" title="SQL 约束"></a>SQL 约束</h2><h3 id="SQL-NOT-NULL-约束"><a href="#SQL-NOT-NULL-约束" class="headerlink" title="SQL NOT NULL 约束"></a>SQL NOT NULL 约束</h3><p>NOT NULL 约束强制列不接受 NULL 值。<br>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。</p><p>下面的 SQL 语句强制 “Id_P” 列和 “LastName” 列不接受 NULL 值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="SQL-UNIQUE-约束-字段值不能重复"><a href="#SQL-UNIQUE-约束-字段值不能重复" class="headerlink" title="SQL UNIQUE 约束(字段值不能重复)"></a>SQL UNIQUE 约束(字段值不能重复)</h3><p>UNIQUE 约束唯一标识数据库表中的每条记录。<br>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。<br>PRIMARY KEY 拥有自动定义的 UNIQUE 约束。<br>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">UNIQUE (Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="SQL-PRIMARY-KEY-约束-主键"><a href="#SQL-PRIMARY-KEY-约束-主键" class="headerlink" title="SQL PRIMARY KEY 约束(主键)"></a>SQL PRIMARY KEY 约束(主键)</h3><p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。<br>主键必须包含唯一的值。<br>主键列不能包含 NULL 值。<br>每个表都应该有一个主键，并且每个表只能有一个主键。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">PRIMARY KEY (Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="SQL-FOREIGN-KEY-约束-外键"><a href="#SQL-FOREIGN-KEY-约束-外键" class="headerlink" title="SQL FOREIGN KEY 约束(外键)"></a>SQL FOREIGN KEY 约束(外键)</h3><p>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders</span><br><span class="line">(</span><br><span class="line">Id_O int NOT NULL,</span><br><span class="line">OrderNo int NOT NULL,</span><br><span class="line">Id_P int,</span><br><span class="line">PRIMARY KEY (Id_O),</span><br><span class="line">FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="SQL-CHECK-约束"><a href="#SQL-CHECK-约束" class="headerlink" title="SQL CHECK 约束"></a>SQL CHECK 约束</h3><p>CHECK 约束用于限制列中的值的范围。<br>如果对单个列定义 CHECK 约束，那么该列只允许特定的值。<br>如果对一个表定义 CHECK 约束，那么此约束会在特定的列中对值进行限制。(暂时不懂)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">CHECK (Id_P&gt;0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="SQL-DEFAULT-约束"><a href="#SQL-DEFAULT-约束" class="headerlink" title="SQL DEFAULT 约束"></a>SQL DEFAULT 约束</h3><p>DEFAULT 约束用于向列中插入默认值。<br>如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p><p>下面的 SQL 在 “Persons” 表创建时为 “City” 列创建 DEFAULT 约束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">Id_P int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255) DEFAULT &apos;Sandnes&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="SQL-CREATE-INDEX-语句"><a href="#SQL-CREATE-INDEX-语句" class="headerlink" title="SQL CREATE INDEX 语句"></a>SQL CREATE INDEX 语句</h2><p>CREATE INDEX 语句用于在表中创建索引。<br>在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。</p><p>本例会创建一个简单的索引，名为 “PersonIndex”，在 Person 表的 LastName 列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX PersonIndex</span><br><span class="line">ON Person (LastName)</span><br></pre></td></tr></table></figure></p><h2 id="SQL-撤销索引、表以及数据库"><a href="#SQL-撤销索引、表以及数据库" class="headerlink" title="SQL 撤销索引、表以及数据库"></a>SQL 撤销索引、表以及数据库</h2><p>通过使用 DROP 语句，可以轻松地删除索引、表和数据库。</p><h3 id="SQL-DROP-INDEX-语句"><a href="#SQL-DROP-INDEX-语句" class="headerlink" title="SQL DROP INDEX 语句"></a>SQL DROP INDEX 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP INDEX index_name</span><br></pre></td></tr></table></figure><h3 id="SQL-DROP-TABLE-语句"><a href="#SQL-DROP-TABLE-语句" class="headerlink" title="SQL DROP TABLE 语句"></a>SQL DROP TABLE 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 表名称</span><br></pre></td></tr></table></figure><h3 id="SQL-DROP-DATABASE-语句"><a href="#SQL-DROP-DATABASE-语句" class="headerlink" title="SQL DROP DATABASE 语句"></a>SQL DROP DATABASE 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE 数据库名称</span><br></pre></td></tr></table></figure><h3 id="SQL-TRUNCATE-TABLE-语句"><a href="#SQL-TRUNCATE-TABLE-语句" class="headerlink" title="SQL TRUNCATE TABLE 语句"></a>SQL TRUNCATE TABLE 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名称</span><br></pre></td></tr></table></figure><h2 id="SQL-ALTER-TABLE-语句"><a href="#SQL-ALTER-TABLE-语句" class="headerlink" title="SQL ALTER TABLE 语句"></a>SQL ALTER TABLE 语句</h2><p>ALTER TABLE 语句用于在已有的表中添加、修改或删除列。</p><ul><li><p>如需在表中添加列，请使用下列语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name datatype</span><br></pre></td></tr></table></figure></li><li><p>要删除表中的列，请使用下列语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name </span><br><span class="line">DROP COLUMN column_name</span><br></pre></td></tr></table></figure></li><li><p>要改变表中列的数据类型，请使用下列语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL-AUTO-INCREMENT-字段"><a href="#SQL-AUTO-INCREMENT-字段" class="headerlink" title="SQL AUTO INCREMENT 字段"></a>SQL AUTO INCREMENT 字段</h2><p>Auto-increment 会在新记录插入表中时生成一个唯一的数字。<br>我们通常希望在每次插入新记录时，自动地创建主键字段的值。<br>我们可以在表中创建一个 auto-increment 字段。</p><p>下列 SQL 语句把 “Persons” 表中的 “P_Id” 列定义为 auto-increment 主键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">PRIMARY KEY (P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="SQL-VIEW（视图）"><a href="#SQL-VIEW（视图）" class="headerlink" title="SQL VIEW（视图）"></a>SQL VIEW（视图）</h2><h3 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h3><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。<br>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。</p><p><strong>视图是一个虚拟的表，是一个表中的数据经过某种筛选后的显示方式，视图由一个预定义的查询select语句组成。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_name AS</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br></pre></td></tr></table></figure><h2 id="SQL-数据类型"><a href="#SQL-数据类型" class="headerlink" title="SQL 数据类型"></a>SQL 数据类型</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1rvrak3rj20if0dadh7.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy1rw7vu54j20ih0l5di7.jpg" alt=""></p><h1 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h1><h2 id="一条SQL语句分时间段查询"><a href="#一条SQL语句分时间段查询" class="headerlink" title="一条SQL语句分时间段查询"></a>一条SQL语句分时间段查询</h2><p>使用 case when then 用法</p><p>//例子<br>字段分别是ID，NUM1,NUM2, TIME1，TIME2, MONEY.<br>想要按照15分钟为间隔来统计ID的数量。效果如同下面的sql语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT  </span><br><span class="line">  sum(CASE when TIME1 &gt;= &apos;2014-02-27 8:00:00&apos; and TIME1 &lt; &apos;2014-02-27 8:15:00&apos; then 1 else 0 end)   AS &apos;1&apos;,  </span><br><span class="line">  sum(CASE when TIME1 &gt;= &apos;2014-02-27 8:15:00&apos; AND TIME1 &lt; &apos;2014-02-27 8:30:00&apos; then 1 else 0 end)   AS &apos;2&apos;,  </span><br><span class="line">  sum(CASE when TIME1 &gt;= &apos;2014-02-27 8:30:00&apos; AND TIME1 &lt; &apos;2014-02-27 8:45:00&apos; then 1 else 0 end)   AS &apos;3&apos;,  </span><br><span class="line">  sum(CASE when TIME1 &gt;= &apos;2014-02-27 8:45:00&apos; AND TIME1 &lt; &apos;2014-02-27 9:00:00&apos; then 1 else 0 end)   AS &apos;4&apos;,  </span><br><span class="line">  sum(CASE when TIME1 &gt;= &apos;2014-02-27 9:00:00&apos; and TIME1 &lt; &apos;2014-02-27 9:15:00&apos; then 1 else 0 end)   AS &apos;5&apos;  </span><br><span class="line">from dealdata;</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1g0uqqpd352j20g502o3yd.jpg" alt=""></p><p><strong><a href="https://segmentfault.com/q/1010000009539927" target="_blank" rel="noopener">文章来源地址</a></strong></p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/02/16/AOP/" rel="next" title="AOP">                <i class="fa fa-chevron-left"></i> AOP              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#SQL语句"><span class="nav-number">1.</span> <span class="nav-text">SQL语句</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-SELECT-语句"><span class="nav-number">1.1.</span> <span class="nav-text">SQL SELECT 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-SELECT-DISTINCT-语句"><span class="nav-number">1.2.</span> <span class="nav-text">SQL SELECT DISTINCT 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#WHERE-语句"><span class="nav-number">1.3.</span> <span class="nav-text">WHERE 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-AND-amp-OR-语句"><span class="nav-number">1.4.</span> <span class="nav-text">SQL AND &amp; OR 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-ORDER-BY-语句"><span class="nav-number">1.5.</span> <span class="nav-text">SQL ORDER BY 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-INSERT-INTO-语句"><span class="nav-number">1.6.</span> <span class="nav-text">SQL INSERT INTO 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-UPDATE-语句"><span class="nav-number">1.7.</span> <span class="nav-text">SQL UPDATE 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-DELETE-语句"><span class="nav-number">1.8.</span> <span class="nav-text">SQL DELETE 语句</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#删除所有行"><span class="nav-number">1.8.1.</span> <span class="nav-text">删除所有行</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#SQL-TOP-字句"><span class="nav-number">2.</span> <span class="nav-text">SQL TOP 字句</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#MySQL-语法"><span class="nav-number">2.0.1.</span> <span class="nav-text">MySQL 语法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Oracle-语法"><span class="nav-number">2.0.2.</span> <span class="nav-text">Oracle 语法</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-LIKE-操作符（模糊搜索）"><span class="nav-number">2.1.</span> <span class="nav-text">SQL LIKE 操作符（模糊搜索）</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#例子"><span class="nav-number">2.1.1.</span> <span class="nav-text">例子</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-通配符"><span class="nav-number">2.2.</span> <span class="nav-text">SQL 通配符</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#例子-1"><span class="nav-number">2.2.1.</span> <span class="nav-text">例子</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-IN-操作符"><span class="nav-number">2.3.</span> <span class="nav-text">SQL IN 操作符</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#BETWEEN-操作符"><span class="nav-number">2.4.</span> <span class="nav-text">BETWEEN 操作符</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-Alias（别名）"><span class="nav-number">2.5.</span> <span class="nav-text">SQL Alias（别名）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-JOIN"><span class="nav-number">2.6.</span> <span class="nav-text">SQL JOIN</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#数据库左连接、右连接、内连接、全连接"><span class="nav-number">2.6.1.</span> <span class="nav-text">数据库左连接、右连接、内连接、全连接</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-UNION-和-UNION-ALL-操作符（少用）"><span class="nav-number">2.7.</span> <span class="nav-text">SQL UNION 和 UNION ALL 操作符（少用）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SELECT-INTO-语句"><span class="nav-number">2.8.</span> <span class="nav-text">SELECT INTO 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CREATE-DATABASE-语句"><span class="nav-number">2.9.</span> <span class="nav-text">CREATE DATABASE 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CREATE-TABLE-语句"><span class="nav-number">2.10.</span> <span class="nav-text">CREATE TABLE 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-约束"><span class="nav-number">2.11.</span> <span class="nav-text">SQL 约束</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-NOT-NULL-约束"><span class="nav-number">2.11.1.</span> <span class="nav-text">SQL NOT NULL 约束</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-UNIQUE-约束-字段值不能重复"><span class="nav-number">2.11.2.</span> <span class="nav-text">SQL UNIQUE 约束(字段值不能重复)</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-PRIMARY-KEY-约束-主键"><span class="nav-number">2.11.3.</span> <span class="nav-text">SQL PRIMARY KEY 约束(主键)</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-FOREIGN-KEY-约束-外键"><span class="nav-number">2.11.4.</span> <span class="nav-text">SQL FOREIGN KEY 约束(外键)</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-CHECK-约束"><span class="nav-number">2.11.5.</span> <span class="nav-text">SQL CHECK 约束</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-DEFAULT-约束"><span class="nav-number">2.11.6.</span> <span class="nav-text">SQL DEFAULT 约束</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-CREATE-INDEX-语句"><span class="nav-number">2.12.</span> <span class="nav-text">SQL CREATE INDEX 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-撤销索引、表以及数据库"><span class="nav-number">2.13.</span> <span class="nav-text">SQL 撤销索引、表以及数据库</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-DROP-INDEX-语句"><span class="nav-number">2.13.1.</span> <span class="nav-text">SQL DROP INDEX 语句</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-DROP-TABLE-语句"><span class="nav-number">2.13.2.</span> <span class="nav-text">SQL DROP TABLE 语句</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-DROP-DATABASE-语句"><span class="nav-number">2.13.3.</span> <span class="nav-text">SQL DROP DATABASE 语句</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SQL-TRUNCATE-TABLE-语句"><span class="nav-number">2.13.4.</span> <span class="nav-text">SQL TRUNCATE TABLE 语句</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-ALTER-TABLE-语句"><span class="nav-number">2.14.</span> <span class="nav-text">SQL ALTER TABLE 语句</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-AUTO-INCREMENT-字段"><span class="nav-number">2.15.</span> <span class="nav-text">SQL AUTO INCREMENT 字段</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-VIEW（视图）"><span class="nav-number">2.16.</span> <span class="nav-text">SQL VIEW（视图）</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#什么是视图？"><span class="nav-number">2.16.1.</span> <span class="nav-text">什么是视图？</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SQL-数据类型"><span class="nav-number">2.17.</span> <span class="nav-text">SQL 数据类型</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#复杂查询"><span class="nav-number">3.</span> <span class="nav-text">复杂查询</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#一条SQL语句分时间段查询"><span class="nav-number">3.1.</span> <span class="nav-text">一条SQL语句分时间段查询</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL详解</title>
      <link href="/2019/10/18/MYSQL%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/10/18/MYSQL%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="MYSQL详解"><meta property="og:url" content="http://yoursite.com/2018/12/16/MYSQL详解/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy8wo6e1hgj20xc0mkgvf.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6ly1fy7kmfmfjgj20cq037glr.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy7ul8hri5j20rs08n3yr.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy7um31dprj20sj06v74m.jpg"><meta property="og:updated_time" content="2018-12-16T13:27:04.576Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="MYSQL详解"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fy8wo6e1hgj20xc0mkgvf.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/12/16/MYSQL详解/"/>  <title>MYSQL详解 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/12/16/MYSQL详解/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">MYSQL详解</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-16T00:34:47+08:00">                2018-12-16              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-12-16T21:27:04+08:00" content="2018-12-16">      2018-12-16    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/数据库/" itemprop="url" rel="index">                    <span itemprop="name">数据库</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy8wo6e1hgj20xc0mkgvf.jpg" alt=""><br><a id="more"></a></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用来加快查询的技术很多，其中最重要的是索引。通常索引能够快速提高查询速度。</p><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</p><h2 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h2><p>索引是在MYSQL的存储引擎层中实现的，而不是在服务层实现的。所以不同存储引擎具有不同的索引类型和实现。</p><ul><li>B-Tree 索引：最常见的索引类型，大部分引擎都支持B树索引。</li><li>HASH 索引：只有Memory引擎支持，使用场景简单。</li><li>R-Tree 索引(空间索引)：空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型。</li><li>Full-text (全文索引)：全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。</li></ul><p><strong>MyISAM、InnoDB引擎、Memory三个常用引擎类型比较</strong></p><table><thead><tr><th style="text-align:center">索引</th><th style="text-align:center">MyISAM引擎</th><th style="text-align:center">InnoDB引擎</th><th style="text-align:center">Memory引擎</th></tr></thead><tbody><tr><td style="text-align:center">B-Tree索引</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">HASH索引</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">R-Tree索引</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">Full-text索引</td><td style="text-align:center">不支持</td><td style="text-align:center">暂不支持</td><td style="text-align:center">不支持</td></tr></tbody></table><h2 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h2><ul><li><p>普通索引<br>这是最基本的索引类型，而且它没有唯一性之类的限制。普通索引可以通过以下几种方式创建：</p><p>&nbsp;&nbsp;(1)创建索引：CREATE INDEX 索引名 ON 表名(列名1，列名2,…);<br>（2）修改表: ALTER TABLE 表名ADD INDEX 索引名 (列名1，列名2,…);<br>（3）创建表时指定索引：CREATE TABLE 表名 ( […], INDEX 索引名 (列名1，列名 2,…) );</p></li><li><p>UNIQUE索引<br>表示唯一的，不允许重复的索引，如果该字段信息保证不会重复例如身份证号用作索引时，可设置为unique：<br>（1）创建索引：CREATE UNIQUE INDEX 索引名 ON 表名(列的列表);<br>（2）修改表：ALTER TABLE 表名ADD UNIQUE 索引名 (列的列表);<br>（3）创建表时指定索引：CREATE TABLE 表名( […], UNIQUE 索引名 (列的列表) );</p></li><li><p>主键：PRIMARY KEY索引<br>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。<br>（1）主键一般在创建表的时候指定：“CREATE TABLE 表名( […], PRIMARY KEY (列的列表) ); ”。<br>（2）但是，我们也可以通过修改表的方式加入主键：“ALTER TABLE 表名ADD PRIMARY KEY (列的列表); ”。<br>每个表只能有一个主键。 （主键相当于聚合索引，是查找最快的索引）</p></li></ul><p><strong>注：不能用CREATE INDEX语句创建PRIMARY KEY索引</strong></p><h2 id="索引的设置语法"><a href="#索引的设置语法" class="headerlink" title="索引的设置语法"></a>索引的设置语法</h2><h3 id="1、设置索引"><a href="#1、设置索引" class="headerlink" title="1、设置索引"></a>1、设置索引</h3><p>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p><p>1.<strong>ALTER TABLE</strong> - ALTER TABLE用来创建<strong>普通索引、UNIQUE索引</strong>或<strong>PRIMARY KEY索引</strong>。</p><ul><li>ALTER TABLE table_name ADD <strong>INDEX</strong> index_name (column_list)</li><li>ALTER TABLE table_name ADD <strong>UNIQUE</strong> (column_list)</li><li>ALTER TABLE table_name ADD <strong>PRIMARY KEY</strong> (column_list)</li></ul><p>2.<strong>CREATE INDEX</strong> - CREATE INDEX可对表增加普通索引或UNIQUE索引。</p><ul><li>CREATE <strong>INDEX</strong> index_name ON table_name (column_list)</li><li>CREATE <strong>UNIQUE</strong> INDEX index_name ON table_name (column_list)</li></ul><h3 id="2-删除索引"><a href="#2-删除索引" class="headerlink" title="2.删除索引"></a>2.删除索引</h3><p>可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。</p><ul><li>DROP <strong>INDEX</strong> index_name ON talbe_name</li><li>ALTER TABLE table_name DROP <strong>INDEX</strong> index_name</li><li>ALTER TABLE table_name DROP <strong>PRIMARY KEY</strong></li></ul><p>其中，前两条语句是等价的，删除掉table_name中的索引index_name。<br>第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</p><blockquote><p>如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p></blockquote><h3 id="3-查看索引"><a href="#3-查看索引" class="headerlink" title="3.查看索引"></a>3.查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show index from tblname;</span><br><span class="line">mysql&gt; show keys from tblname;</span><br></pre></td></tr></table></figure><ul><li>Table:表的名称</li><li>Non_unique：如果索引不能包括重复词，则为0。如果可以，则为1</li><li>Key_name：索引的名称</li><li>Seq_in_index：索引中的列序列号，从1开始</li><li>Column_name：列名称</li><li>Collation：列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。</li><li>Cardinality：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li><li>Sub_part：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li><li>Packed：指示关键字如何被压缩。如果没有被压缩，则为NULL。</li><li>Null：如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li><li>Index_type：用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li><li>Comment：更多评注。</li></ul><h1 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h1><h2 id="B-tree结构"><a href="#B-tree结构" class="headerlink" title="B-tree结构"></a>B-tree结构</h2><p>为了描述B-Tree，首先定义一条数据记录为一个<strong>二元组[key, data]</strong>，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">d&gt;=2，即B-Tree的度；</span><br><span class="line"></span><br><span class="line">h为B-Tree的高；</span><br><span class="line"></span><br><span class="line">每个非叶子结点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d；</span><br><span class="line"></span><br><span class="line">每个叶子结点至少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶结点的指针均为NULL；</span><br><span class="line"></span><br><span class="line">所有叶结点都在同一层，深度等于树高h；</span><br><span class="line"></span><br><span class="line">key和指针相互间隔，结点两端是指针；</span><br><span class="line"></span><br><span class="line">一个结点中的key从左至右非递减排列；</span><br><span class="line"></span><br><span class="line">如果某个指针在结点node最左边且不为null，则其指向结点的所有key小于v(key1)，其中v(key1)为node的第一个key的值。</span><br><span class="line"></span><br><span class="line">如果某个指针在结点node最右边且不为null，则其指向结点的所有key大于v(keym)，其中v(keym)为node的最后一个key的值。</span><br><span class="line"></span><br><span class="line">如果某个指针在结点node的左右相邻key分别是keyi和keyi+1且不为null，则其指向结点的所有key小于v(keyi+1)且大于v(keyi)。</span><br></pre></td></tr></table></figure><p>下图是一个d=2的B-Tree示意图。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://ww1.sinaimg.cn/large/bfd348c6ly1fy7kmfmfjgj20cq037glr.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy7ul8hri5j20rs08n3yr.jpg" alt=""></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p><p>插入删除操作会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。</p><h1 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p><p>与B-Tree相比，B+Tree有以下不同点：</p><blockquote><p>每个结点的指针上限为2d而不是2d+1。<strong>(对此有疑惑)</strong><br>内结点不存储data，只存储key；叶子结点不存储指针。</p></blockquote><p>图3是一个简单的B+Tree示意。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fy7um31dprj20sj06v74m.jpg" alt=""></p><h2 id="为啥用B-Tree"><a href="#为啥用B-Tree" class="headerlink" title="为啥用B+Tree"></a>为啥用B+Tree</h2><p>典型的B-tree节点，其中最大的问题在于，如果data所占空间太大，那么我们不得不选择一个较小的B值，而B值过小又无法保证合理的树高。更加麻烦的是，在实现B-tree时，我们往往并不知道data有多大。考虑到上述这些困境，B+tree应运而生。下图展示了典型的B+tree节点，其中最大的变化在于，内部节点不再保存数据，因此每个内部节点得到了更多的空间来存储key值，进一步发挥了B-tree的优势。同时外部节点的实现也有了更多的想象空间，它可以是硬盘中的一页数据，也可以是网络中的某台计算机。如果是用来实现数据库索引，通常还会在外部节点之间添加指向下一节点的指针，这样可以更好的支持范围查询操作。</p><h1 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h1><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p><ul><li>无法用于排序与分组；</li><li>只支持精确查找，无法用于部分查找和范围查找。</li></ul><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><h1 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h1><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</p><p>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p><p>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</p><p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p><h1 id="空间数据索引"><a href="#空间数据索引" class="headerlink" title="空间数据索引"></a>空间数据索引</h1><p>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><p>必须使用 GIS 相关的函数来维护数据。</p><h1 id="索引的优化（MYSQL对千万级大表该怎么优化？）"><a href="#索引的优化（MYSQL对千万级大表该怎么优化？）" class="headerlink" title="索引的优化（MYSQL对千万级大表该怎么优化？）"></a>索引的优化（MYSQL对千万级大表该怎么优化？）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.zhihu.com/question/19719997</span><br><span class="line">https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md</span><br></pre></td></tr></table></figure><h2 id="1、优化你的SQL语句和索引"><a href="#1、优化你的SQL语句和索引" class="headerlink" title="1、优化你的SQL语句和索引"></a>1、优化你的SQL语句和索引</h2><h2 id="2、加缓存。memcached，redis；"><a href="#2、加缓存。memcached，redis；" class="headerlink" title="2、加缓存。memcached，redis；"></a>2、加缓存。memcached，redis；</h2><p>关于 memcached 和 redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/xifeijian/article/details/21994941</span><br><span class="line"></span><br><span class="line">http://wiki.jikexueyuan.com/project/redis/preliminary-redis.html</span><br></pre></td></tr></table></figure></p><h2 id="3、主从复制或主主复制，读写分离，可以在应用层做，效率高"><a href="#3、主从复制或主主复制，读写分离，可以在应用层做，效率高" class="headerlink" title="3、主从复制或主主复制，读写分离，可以在应用层做，效率高"></a>3、主从复制或主主复制，读写分离，可以在应用层做，效率高</h2><p>关于主从复制和主主复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://blog.51cto.com/ximenfeibing/1665272</span><br></pre></td></tr></table></figure></p><h2 id="4、进行MYSQL表分区。"><a href="#4、进行MYSQL表分区。" class="headerlink" title="4、进行MYSQL表分区。"></a>4、进行MYSQL表分区。</h2><p>mysql自带分区表，先试试这个，对你的应用是透明的，无需更改代码,但是sql语句是需要针对分区表做优化的，sql条件中要带上分区条件的列，从而使查询定位到少量的分区上</p><h2 id="5、垂直拆分"><a href="#5、垂直拆分" class="headerlink" title="5、垂直拆分"></a>5、垂直拆分</h2><h2 id="6、水平切分"><a href="#6、水平切分" class="headerlink" title="6、水平切分"></a>6、水平切分</h2><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p><p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ 间隙锁（Next-Key Locking）防止幻影读。</p><p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p><p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p><p>提供了大量的特性，包括压缩表、空间数据索引等。</p><p>不支持事务。</p><p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li><p>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</p></li><li><p>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</p></li><li><p>外键：InnoDB 支持外键。</p></li><li><p>备份：InnoDB 支持在线热备份。</p></li><li><p>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</p></li><li><p>其它特性：MyISAM 支持压缩表和空间数据索引。</p></li></ul>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/12/12/数据库系统原理/" rel="next" title="数据库系统原理">                <i class="fa fa-chevron-left"></i> 数据库系统原理              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/12/21/操作系统基础/" rel="prev" title="操作系统基础">                操作系统基础 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#索引"><span class="nav-number">1.</span> <span class="nav-text">索引</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念"><span class="nav-number">1.1.</span> <span class="nav-text">概念</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#索引的本质"><span class="nav-number">1.2.</span> <span class="nav-text">索引的本质</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#索引的类型"><span class="nav-number">1.3.</span> <span class="nav-text">索引的类型</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#索引种类"><span class="nav-number">1.4.</span> <span class="nav-text">索引种类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#索引的设置语法"><span class="nav-number">1.5.</span> <span class="nav-text">索引的设置语法</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、设置索引"><span class="nav-number">1.5.1.</span> <span class="nav-text">1、设置索引</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-删除索引"><span class="nav-number">1.5.2.</span> <span class="nav-text">2.删除索引</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-查看索引"><span class="nav-number">1.5.3.</span> <span class="nav-text">3.查看索引</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#B-Tree"><span class="nav-number">2.</span> <span class="nav-text">B-Tree</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#B-tree结构"><span class="nav-number">2.1.</span> <span class="nav-text">B-tree结构</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#操作"><span class="nav-number">2.2.</span> <span class="nav-text">操作</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#B-Tree-1"><span class="nav-number">3.</span> <span class="nav-text">B+Tree</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念-1"><span class="nav-number">3.1.</span> <span class="nav-text">概念</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#为啥用B-Tree"><span class="nav-number">3.2.</span> <span class="nav-text">为啥用B+Tree</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#哈希索引"><span class="nav-number">4.</span> <span class="nav-text">哈希索引</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#全文索引"><span class="nav-number">5.</span> <span class="nav-text">全文索引</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#空间数据索引"><span class="nav-number">6.</span> <span class="nav-text">空间数据索引</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#索引的优化（MYSQL对千万级大表该怎么优化？）"><span class="nav-number">7.</span> <span class="nav-text">索引的优化（MYSQL对千万级大表该怎么优化？）</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1、优化你的SQL语句和索引"><span class="nav-number">7.1.</span> <span class="nav-text">1、优化你的SQL语句和索引</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2、加缓存。memcached，redis；"><span class="nav-number">7.2.</span> <span class="nav-text">2、加缓存。memcached，redis；</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3、主从复制或主主复制，读写分离，可以在应用层做，效率高"><span class="nav-number">7.3.</span> <span class="nav-text">3、主从复制或主主复制，读写分离，可以在应用层做，效率高</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4、进行MYSQL表分区。"><span class="nav-number">7.4.</span> <span class="nav-text">4、进行MYSQL表分区。</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5、垂直拆分"><span class="nav-number">7.5.</span> <span class="nav-text">5、垂直拆分</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6、水平切分"><span class="nav-number">7.6.</span> <span class="nav-text">6、水平切分</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#存储引擎"><span class="nav-number">8.</span> <span class="nav-text">存储引擎</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#InnoDB"><span class="nav-number">8.1.</span> <span class="nav-text">InnoDB</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#MyISAM"><span class="nav-number">8.2.</span> <span class="nav-text">MyISAM</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#比较"><span class="nav-number">8.3.</span> <span class="nav-text">比较</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2019/10/18/Linux/"/>
      <url>/2019/10/18/Linux/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Linux"><meta property="og:url" content="http://yoursite.com/2018/12/26/Linux/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fykd0sb7w7j21he0nn7ir.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fygrpz7kryj20ic08p0to.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fygurzrz6xj20cj05k0tn.jpg"><meta property="og:updated_time" content="2018-12-26T11:14:07.563Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Linux"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fykd0sb7w7j21he0nn7ir.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/12/26/Linux/"/>  <title>Linux | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/12/26/Linux/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Linux</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-26T19:14:07+08:00">                2018-12-26              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-12-26T19:14:07+08:00" content="2018-12-26">      2018-12-26    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/操作系统/" itemprop="url" rel="index">                    <span itemprop="name">操作系统</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fykd0sb7w7j21he0nn7ir.jpg" alt=""><br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Linux是一套基于POSIX和UNIX的多用户，多任务，支持多线程和多CPU的操作系统</p><h1 id="常见操作以及概念"><a href="#常见操作以及概念" class="headerlink" title="常见操作以及概念"></a>常见操作以及概念</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Tab：命令和文件名补全；</li><li>Ctrl+C：中断正在运行的程序；</li><li>Ctrl+D：结束键盘输入（End Of File，EOF）</li></ul><h2 id="求助"><a href="#求助" class="headerlink" title="求助"></a>求助</h2><h3 id="1、-–help"><a href="#1、-–help" class="headerlink" title="1、 –help"></a>1、 –help</h3><p>指令的基本用法选项介绍</p><h3 id="2、man"><a href="#2、man" class="headerlink" title="2、man"></a>2、man</h3><p>man是manual的缩写，将指令的具体信息显示出来。<br>当执行 man date时， 有DATE（1）出现，其中的数字代表指令的类型，常用的数字及其类型如下：<br>代号|类型<br>:-:|:-:<br>1|用户在shell环境中可以操作的指令或者可执行文件<br>5|配置文件<br>8|系统管理员科院使用的管理指令</p><h3 id="3、info"><a href="#3、info" class="headerlink" title="3、info"></a>3、info</h3><p>info与man类似，但是info将文档分成一个个页面，每个页面科院进行跳转。</p><h3 id="4、doc"><a href="#4、doc" class="headerlink" title="4、doc"></a>4、doc</h3><p>/usr/share/doc存放着软件的一整套说明文件。</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><h3 id="1、who"><a href="#1、who" class="headerlink" title="1、who"></a>1、who</h3><p>在关机前需要先使用who命令查看有没有其他用户在线。</p><h3 id="2、sync"><a href="#2、sync" class="headerlink" title="2、sync"></a>2、sync</h3><p>为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，因此关机前需要先进行sync同步操作。</p><h3 id="3、shutdown"><a href="#3、shutdown" class="headerlink" title="3、shutdown"></a>3、shutdown</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># shutdown[ -krhc]时间[信息]</span><br><span class="line">-k: 不会关机，只是发送警告信息，通知所有在线的用户</span><br><span class="line">-r: 将系统的服务停掉后就重新启动</span><br><span class="line">-h: 将系统的服务停掉后就立即关机</span><br><span class="line">-c：取消已经在进行的shutdown指令内容</span><br></pre></td></tr></table></figure><h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>可以在环境变量PATH中声明可执行文件的路径。路径之间用：分隔。<br>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>sudo允许一般用户在使用root可执行的命令，不过只有在/etc/sudoers配置文件中添加的用户才能只用该指令。</p><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>RPM和DPKG最常见的两类软件包管理工具；</p><h2 id="VIM三种模式"><a href="#VIM三种模式" class="headerlink" title="VIM三种模式"></a>VIM三种模式</h2><ul><li>一般指令模式：VIM的默认模式，可以用于移动游标查看内容；</li><li>编辑模式：按下”i”等按键之后进入，可以对文本进行编辑；</li><li>指令列模式：按下”:”按键之后进入，用于保存退出等操作；</li></ul><p>在指令模式下，有以下命令用于离开或者保存文件。<br>命令|作用<br>:-:|:-:<br>:w|写入磁盘<br>:w!|当文件为只读时，强制写入磁盘，到底能不能写入，与用户对该文件的权限有关<br>:q|离开<br>:q!|强制离开不保存<br>:wq|写入磁盘后离开<br>:wq!|强制写入磁盘后离开</p><h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><p>为了使不同的Linux发行版本的目录结构保持一致性。规定了linux的目录结构，最基础的是哪个目录如下：</p><ul><li>/（root，根目录）</li><li>/usr（unix software resource）：所有系统默认软件都会安装到这个目录</li><li>/var（variable）：存放系统或程序运行过程中的数据文件。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fygrpz7kryj20ic08p0to.jpg" alt=""></p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>用户分为三种：文件拥有者，群组以及其他人，对不用用户有不同的文件权限。<br>使用ls查看一个文件时，会显示一个文件的信息。例如 drwxr-xr-x. 3 root root 17 May 6 00:14 .config，对这个信息解释如下：</p><ul><li>drwxr-xr-x:文件类型以及权限，第1位为文件类型字段，后9位为文件权限字段</li><li>3：链接数</li><li>root：文件拥有者</li><li>root：所属群组</li><li>17：文件大小</li><li>May 6 00:14：文件最后被修改的时间</li><li>.config：文件名</li></ul><p>常见的文件类型及其含义有：</p><ul><li>d:目录</li><li>-：文件</li><li>|：链接文件</li></ul><p>9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。<br><strong>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fygurzrz6xj20cj05k0tn.jpg" alt=""></p><h2 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h2><h3 id="1、ls"><a href="#1、ls" class="headerlink" title="1、ls"></a>1、ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的包文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ls [选项][目录或文件名]</span><br><span class="line">参数：</span><br><span class="line">-a：--all 的缩写，显示所有的文件（包括以.开头的文件），包括隐藏文件</span><br><span class="line">-A：--almost-all 的缩写，显示所有的文件,包括隐藏文件，但不包括当前目录.和上级目录..这两个文件</span><br><span class="line">-c：和-lt一起使用：显示列表并且以ctime（文件状态最后改变时间）排序。和-l一起使用：显示ctime并且以文件名排序。，其他情况以ctime排序。</span><br><span class="line">-d：--directory的缩写，仅列出目录本身，而不是列出目录里的内容列表</span><br><span class="line">-f：直接列出结果，而不进行排序</span><br><span class="line">-h：将文件内容大小以GB、KB等易读方式显示</span><br><span class="line">-l：列出长数据串，显示出文件的属性与权限等数据信息</span><br><span class="line">-S：以文件大小排序</span><br><span class="line">-t：以修改时间排序</span><br><span class="line">--help：显示帮助信息</span><br></pre></td></tr></table></figure></p><h3 id="2、cd"><a href="#2、cd" class="headerlink" title="2、cd"></a>2、cd</h3><p>更换当前目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 3、mkdir</span><br><span class="line">创建目录</span><br></pre></td></tr></table></figure></p><p>mkdir[-mp]目录名称<br>-m：配置目录权限<br>-p：递归创建目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4、rmdir</span><br><span class="line">删除目录，目录必须为空</span><br></pre></td></tr></table></figure></p><p>rmdir [-p] 目录名称<br>-p：递归删除目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5、touch</span><br><span class="line">更新文件时间或者建立新文件</span><br></pre></td></tr></table></figure></p><h1 id="touch-acdmt-filename"><a href="#touch-acdmt-filename" class="headerlink" title="touch [-acdmt] filename"></a>touch [-acdmt] filename</h1><p> -a：更新atime<br> -c：更新ctime，若文件不存在则不建立新文件<br> -m：更新mtime<br> -d：后面可以接更新日期而不使用当前日期，也可以使用 –date=”日期或时间”<br> -t：后面可以接更新时间而不使用当前时间，格式[YYYYMMDDhhmm]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 6、cp</span><br><span class="line">复制文件。</span><br><span class="line">如果源文件有两个以上，则目的文件一定要是目录才行。</span><br></pre></td></tr></table></figure><p>cp[选项] source destination<br>-a：此选项通常在复制目录时使用，保留链接、文件属性，并复制目录下所有内容。<br>-d：复制时保留链接。这里的链接相当于Windows系统的快捷方式。<br>-f：覆盖已存在的目录文件而不给出提示。<br>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。<br>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。<br>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有子目录和文件。<br>-l：不复制文件，只是生成链接文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 7、rm</span><br><span class="line">删除文件。</span><br></pre></td></tr></table></figure></p><h1 id="rm-选项-文件或目录"><a href="#rm-选项-文件或目录" class="headerlink" title="rm[选项] 文件或目录"></a>rm[选项] 文件或目录</h1><p>-r：递归删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 8、mv</span><br><span class="line">移动文件</span><br></pre></td></tr></table></figure></p><h1 id="mv-选项-源文件或目录-目标文件或目录"><a href="#mv-选项-源文件或目录-目标文件或目录" class="headerlink" title="mv [选项] 源文件或目录 目标文件或目录"></a>mv [选项] 源文件或目录 目标文件或目录</h1><p>-f： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 文件默认权限</span><br><span class="line">- 文件默认权限：文件默认没有可执行权限，因此是666，也就是-rw-rw-rw-。</span><br><span class="line">- 目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此是777，也就是drwxrwxrwx。</span><br><span class="line"></span><br><span class="line">## 目录的权限</span><br><span class="line">文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的w权限并不能对文件名进行修改。</span><br><span class="line">目录存储文件列表，一个目录的权限也是对其文件列表的权限。因此，目录的r权限可以表示可以读取文件列表；w权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改。</span><br><span class="line"></span><br><span class="line">## 获取文件内容</span><br><span class="line">### 1、cat</span><br><span class="line">取得文件内容</span><br></pre></td></tr></table></figure></p><h1 id="cat-选项-filename"><a href="#cat-选项-filename" class="headerlink" title="cat[选项] filename"></a>cat[选项] filename</h1><p>-n：打印出行号，连同空白行也有行号，-b不会<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2、tac</span><br><span class="line">是cat的反向操作，从最后一行开始打印</span><br><span class="line"></span><br><span class="line">### 3、more</span><br><span class="line">和cat不同的是它可以一页一页查看文件内容，比较适合大文件的查看。</span><br><span class="line"></span><br><span class="line">### 4、less</span><br><span class="line">和more类似，但是多了一个向前翻页的功能</span><br><span class="line"></span><br><span class="line">### 5.、head</span><br><span class="line">取得文件前几行</span><br></pre></td></tr></table></figure></p><h1 id="head-n-number-filename"><a href="#head-n-number-filename" class="headerlink" title="head [-n number] filename"></a>head [-n number] filename</h1><p>-n:后面接数字，代表显示几行的意思<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">### 6、tail</span><br><span class="line">是head的反向操作，只是取得是最后几行</span><br><span class="line"></span><br><span class="line">### 7、od</span><br><span class="line">以字符或者十六进制的形式显示二进制文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 指令与文件搜索</span><br><span class="line">### 1、which</span><br><span class="line">指令搜索</span><br></pre></td></tr></table></figure></p><h1 id="which-a-command"><a href="#which-a-command" class="headerlink" title="which [-a] command"></a>which [-a] command</h1><p>-a:将所有指令列出，而不是只列第一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2、whereis</span><br><span class="line">文件搜索，速度比较快，因为它只搜索几个特定的目录</span><br></pre></td></tr></table></figure></p><h1 id="whereis-选项-dirname-filename"><a href="#whereis-选项-dirname-filename" class="headerlink" title="whereis [选项] dirname/filename"></a>whereis [选项] dirname/filename</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### 3、locate</span><br><span class="line">文件搜索。可以用关键字或者正则表达式进行搜索</span><br><span class="line">locate使用 /var/lib/mlcate 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用locate搜索新建的文件，可以使用updatedb来立即更新数据库。</span><br></pre></td></tr></table></figure><h1 id="locate-r-keyword"><a href="#locate-r-keyword" class="headerlink" title="locate [-r] keyword"></a>locate [-r] keyword</h1><p>-r:正则表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4、find</span><br><span class="line">文件搜索，可以使用文件的属性和权限进行搜索</span><br></pre></td></tr></table></figure></p><h1 id="find-basedir-option"><a href="#find-basedir-option" class="headerlink" title="find [basedir] [option]"></a>find [basedir] [option]</h1><p>example: find . -name”shadow*”<br>表示当前目录下查找文件名开头是字符串’shadow’的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 压缩与打包</span><br><span class="line">## 压缩文件名</span><br><span class="line">Linux的压缩文件名</span><br><span class="line">扩展名|压缩程序</span><br><span class="line">:-:|:-:</span><br><span class="line">*.Z|compress</span><br><span class="line">*.zip|zip</span><br><span class="line">*.gz|gzip</span><br><span class="line">*.bz2|bzip2</span><br><span class="line">*.xz|xz</span><br><span class="line">*.tar|tar程序打包的数据，没有经过压缩</span><br><span class="line">*tar.gz|tar程序打包的文件，经过gzip的压缩</span><br><span class="line">*tar.bz2|tar程序打包的文件。经过bzip2的压缩</span><br><span class="line">*.tar.xz|tar程序打包的文件。经过xz的压缩</span><br><span class="line"></span><br><span class="line">## 压缩指令</span><br><span class="line">### 1、gzip</span><br><span class="line">gzip 是Linux使用最广的压缩指令，可以解开comoress，zip与gzip所压缩的文件</span><br><span class="line">经过 gzip压缩过，源文件就不存在了。</span><br><span class="line">可以使用 zcat、zmore、zless 来读取压缩文件的内容</span><br></pre></td></tr></table></figure></p><p>$ gzip [选项] filename<br>-c：将压缩的数据输出到屏幕上<br>-d：解压缩<br>-t：检验压缩文件是否出错<br>-v：显示压缩比等信息<br>-#：#为数字的意思。代表压缩等级。数字越大压缩比例越高，默认为6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2、bzip2</span><br><span class="line">提供比gzip更高的压缩比</span><br><span class="line">查看命令：bzcat、bzmore、bzless、bzgrep。</span><br></pre></td></tr></table></figure></p><p>$ bzip2 [选项] filename<br>-k：保留源文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3、xz</span><br><span class="line">提供比bzip2更佳的压缩比</span><br><span class="line">可以看到 gzip、bzip2、xz的压缩比不断优化 。压缩比越高，压缩时间越长</span><br><span class="line">查看命令：xzcat、xzmore、xzless、xzgrep</span><br></pre></td></tr></table></figure></p><p>$xz [选项] filename<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 打包</span><br><span class="line">压缩指令只对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar不仅可以用于打包，也可以只用gip，bzip2、xz将打包文件进行压缩。</span><br></pre></td></tr></table></figure></p><p>$ tar [-z|-j|-J] [cv] [-f 新建的tar文件] filename… == 打包压缩<br>$ tar [-z|-j|-J] [tv] [-f 已有的tar文件]             == 查看<br>$ tar [-z|-j|-J] [xv] [-f 已有的tar文件] [-C 目录]   ==解压缩</p><p>-z：使用zip<br>-j:使用bzip2<br>-J：使用xz<br>-c：新建打包文件<br>-t：查看打包文件里面有哪些文件<br>-x：解打包或者解压缩的功能<br>-v：在压缩/解压缩过程中，显示正在处理的文件名<br>-f：filename：要处理的文件<br>-C 目录： 在特定目录解压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用方法|命令</span><br><span class="line">:-:|:-:</span><br><span class="line">打包压缩|tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</span><br><span class="line">查看| tar -jtv -f filename.tar.bz2</span><br><span class="line">解压缩| tar -jxv filename.tar.bz2 -C 要解压的目录</span><br><span class="line"></span><br><span class="line"># Bash</span><br><span class="line">可以通过Shell请求内核提供服务，Bash正是Shell的一种</span><br><span class="line"></span><br><span class="line">## 特性</span><br><span class="line">- 命令历史：记录使用过的命令</span><br><span class="line">- 命令与文件不全：快捷键：tab</span><br><span class="line">- 命名别名：例如 lm 是 ls -al的别名</span><br><span class="line">- shell scripts</span><br><span class="line">- 通配符：例如 ls -l /usr/bin/X* 列出/usr/bin下面所有以X开头的文件</span><br><span class="line"></span><br><span class="line">## 变量操作</span><br><span class="line">对于一个变量赋值直接使用 =。</span><br><span class="line">对变量取用需要在变量前加上$，也可以用$&#123;&#125;的形式；</span><br><span class="line">输出变量使用echo命令。</span><br></pre></td></tr></table></figure></p><p>$ x=abc<br>$ echo $x<br>$ echo ${x}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">变量内容如果有空格，必须使用双引号或者单引号。</span><br><span class="line"></span><br><span class="line">- 双引号内的特殊字符可以保留原本特性，例如x=&quot;lang is $LANG&quot;,则x的值为 lang is zh_TW.UTF-8;</span><br><span class="line"></span><br><span class="line">- 单引号内的特殊字符就是特殊字符本身，例如x=&apos;lang is $LANG&apos;,则x的值为 lang is $LANG.</span><br><span class="line"></span><br><span class="line">## 正则表达式</span><br><span class="line">### grep</span><br><span class="line"></span><br><span class="line">g/re/p（globally search a regular expression and print)，使用正则表示式进行全局查找并打印。</span><br></pre></td></tr></table></figure></p><p>$ grep [选项] [–color=auto] 搜寻字符串 filename<br>-c ： 统计个数<br>-i ： 忽略大小写<br>-n ： 输出行号<br>-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行<br>–color=auto ：找到的关键字加颜色显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### printf</span><br><span class="line"></span><br><span class="line">用于格式化输出。它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。</span><br></pre></td></tr></table></figure></p><p>$ printf ‘%10s %5i %5i %5i %8.2f \n’ $(cat printf.txt)<br>    DmTsai    80    60    92    77.33<br>     VBird    75    55    80    70.00<br>       Ken    60    90    70    73.33<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 进程管理</span><br><span class="line">### 1、ps</span><br><span class="line">查看某个时间点的进程信息</span><br></pre></td></tr></table></figure></p><h1 id="ps-选项"><a href="#ps-选项" class="headerlink" title="ps [选项]"></a>ps [选项]</h1><p>-l：查看自己的进程<br>aux：查看系统所有进程<br>aux | grep threadx：查看特定的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2、pstree</span><br><span class="line">查看进程树</span><br></pre></td></tr></table></figure></p><p>查看所有进程树</p><h1 id="pstree-A"><a href="#pstree-A" class="headerlink" title="pstree -A"></a>pstree -A</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3、top</span><br><span class="line">实时显示进程信息</span><br></pre></td></tr></table></figure><p>两秒钟刷新一次<br>top -d 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4、netstat</span><br><span class="line">查看占用端口的进程</span><br></pre></td></tr></table></figure></p><p>查看特定端口的进程</p><h1 id="netstat-anp-grep-port"><a href="#netstat-anp-grep-port" class="headerlink" title="netstat -anp | grep port"></a>netstat -anp | grep port</h1><p><code>`</code></p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/12/21/操作系统基础/" rel="next" title="操作系统基础">                <i class="fa fa-chevron-left"></i> 操作系统基础              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/01/08/Java基础/" rel="prev" title="Java基础">                Java基础 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#简介"><span class="nav-number">1.</span> <span class="nav-text">简介</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#常见操作以及概念"><span class="nav-number">2.</span> <span class="nav-text">常见操作以及概念</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#快捷键"><span class="nav-number">2.1.</span> <span class="nav-text">快捷键</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#求助"><span class="nav-number">2.2.</span> <span class="nav-text">求助</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、-–help"><span class="nav-number">2.2.1.</span> <span class="nav-text">1、 –help</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、man"><span class="nav-number">2.2.2.</span> <span class="nav-text">2、man</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、info"><span class="nav-number">2.2.3.</span> <span class="nav-text">3、info</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4、doc"><span class="nav-number">2.2.4.</span> <span class="nav-text">4、doc</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#关机"><span class="nav-number">2.3.</span> <span class="nav-text">关机</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、who"><span class="nav-number">2.3.1.</span> <span class="nav-text">1、who</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、sync"><span class="nav-number">2.3.2.</span> <span class="nav-text">2、sync</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、shutdown"><span class="nav-number">2.3.3.</span> <span class="nav-text">3、shutdown</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#PATH"><span class="nav-number">2.4.</span> <span class="nav-text">PATH</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#sudo"><span class="nav-number">2.5.</span> <span class="nav-text">sudo</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#包管理工具"><span class="nav-number">2.6.</span> <span class="nav-text">包管理工具</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#VIM三种模式"><span class="nav-number">2.7.</span> <span class="nav-text">VIM三种模式</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#目录配置"><span class="nav-number">2.8.</span> <span class="nav-text">目录配置</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#文件"><span class="nav-number">3.</span> <span class="nav-text">文件</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#文件属性"><span class="nav-number">3.1.</span> <span class="nav-text">文件属性</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#文件与目录的基本操作"><span class="nav-number">3.2.</span> <span class="nav-text">文件与目录的基本操作</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、ls"><span class="nav-number">3.2.1.</span> <span class="nav-text">1、ls</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、cd"><span class="nav-number">3.2.2.</span> <span class="nav-text">2、cd</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#touch-acdmt-filename"><span class="nav-number">4.</span> <span class="nav-text">touch [-acdmt] filename</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#rm-选项-文件或目录"><span class="nav-number">5.</span> <span class="nav-text">rm[选项] 文件或目录</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#mv-选项-源文件或目录-目标文件或目录"><span class="nav-number">6.</span> <span class="nav-text">mv [选项] 源文件或目录 目标文件或目录</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#cat-选项-filename"><span class="nav-number">7.</span> <span class="nav-text">cat[选项] filename</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#head-n-number-filename"><span class="nav-number">8.</span> <span class="nav-text">head [-n number] filename</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#which-a-command"><span class="nav-number">9.</span> <span class="nav-text">which [-a] command</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#whereis-选项-dirname-filename"><span class="nav-number">10.</span> <span class="nav-text">whereis [选项] dirname/filename</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#locate-r-keyword"><span class="nav-number">11.</span> <span class="nav-text">locate [-r] keyword</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#find-basedir-option"><span class="nav-number">12.</span> <span class="nav-text">find [basedir] [option]</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#ps-选项"><span class="nav-number">13.</span> <span class="nav-text">ps [选项]</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#pstree-A"><span class="nav-number">14.</span> <span class="nav-text">pstree -A</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#netstat-anp-grep-port"><span class="nav-number">15.</span> <span class="nav-text">netstat -anp | grep port</span></a></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机</title>
      <link href="/2019/10/18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/10/18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Java 虚拟机"><meta property="og:url" content="http://yoursite.com/2019/01/22/Java虚拟机/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzfhsi7ylaj21z30z5kjm.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb16xqgh8j20eu0hv0tk.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb1d804gaj20gv09s0t4.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb1j5ywc6j20lq0930tj.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb2tgyq7bj20ez08d0sz.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdehf4i81j20gv07b0sz.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdejl0s3hj20hq06f0t0.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdeztm88wj20j00670t3.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdfe723ibj20hy0av0td.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdfw78hagj20k207t0ta.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdgifh9kjj20jw07b0tc.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdgoaxo04j20ke07j0ta.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzeiflv3dij20kk07i0tc.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzeiicd6idj20kd07c0tj.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejax0iq1j20kf0bh0t8.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejd3azdvj20jt0e70t9.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejt444tfj20l706x0th.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzff4da6otj20ht05s0t2.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzfhly0w16j21r11440vv.jpg"><meta property="og:updated_time" content="2019-01-22T09:32:02.188Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java 虚拟机"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzfhsi7ylaj21z30z5kjm.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/01/22/Java虚拟机/"/>  <title>Java 虚拟机 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/01/22/Java虚拟机/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java 虚拟机</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-01-22T17:31:46+08:00">                2019-01-22              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-01-22T17:32:02+08:00" content="2019-01-22">      2019-01-22    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzfhsi7ylaj21z30z5kjm.jpg" alt=""><br><a id="more"></a></p><h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb16xqgh8j20eu0hv0tk.jpg" alt=""></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>每个Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在Java虚拟机栈中入栈和出栈的过程。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb1d804gaj20gv09s0t4.jpg" alt=""></p><p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：</p><blockquote><p>java -Xss512M HackTheJava</p></blockquote><p>该区域可能抛出以下异常：</p><ul><li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li><li>栈进行动态扩展时如果无法申请到足够内存，就会抛出 OutOfMemoryError 异常。</li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈与Java虚拟机栈类似，他们之间的区别只不过是本地方法栈为本地方法服务。</p><p>本地方法一般使用其它语言（C、C++或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理 。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb1j5ywc6j20lq0930tj.jpg" alt=""></p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>所有对象都在这里分配内存，是垃圾收集的主要区域（”GC堆”）。<br>现代垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：</p><ul><li>新生代（Young Generation）</li><li>老年代（Old Generation）</li></ul><p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemeoryError 异常。<br>可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p><blockquote><p>java -Xms1M -Xmx2M HackTheJava</p></blockquote><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p><p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是方法区的一部分。</p><p>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p><p>除了在编译器生成的常量，还允许动态生成，例如 String类的intern()。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>在JDK 1.4中新加入了NIO类，它可以使用Native函数库直接分配堆外内存，然后通过Java堆里的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能。因为避免了在堆内存和堆外内存来回拷贝数据。</p><h1 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h1><p>垃圾收集主要是针对堆和方法区进行。<br>程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p><h2 id="判断一个对象是否可被回收"><a href="#判断一个对象是否可被回收" class="headerlink" title="判断一个对象是否可被回收"></a>判断一个对象是否可被回收</h2><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1.引用计数算法"></a>1.引用计数算法</h3><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加1，引用失效时计数器减1。引用计数为0的对象可被回收。</p><p>两个对象出现循环引用的情况下，此时引用计数器永远不为0，导致无法对它们进行回收。正因为循环引用的存在，因此Java虚拟机不使用引用计数算法。</p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h3><p>通过 GC Roots作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。</p><p>Java 虚拟机使用该算法来判断对象是否可被回收，在Java中 GC Roots 一般包含以下内容：</p><ul><li>虚拟机栈中局部变量表中引用的对象</li><li>本地方法栈中JNI中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中的常量引用的对象</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzb2tgyq7bj20ez08d0sz.jpg" alt=""></p><h3 id="3-方法区的回收"><a href="#3-方法区的回收" class="headerlink" title="3.方法区的回收"></a>3.方法区的回收</h3><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，因此在方法区进行回收性价比不高。</p><p>主要是对常量池的回收和对类的卸载。</p><p>为了避免内存溢出，在大量使用反射、动态代理的场景都需要虚拟机具备类卸载功能。</p><p>类的卸载条件很多，需要满足以下三个条件，但是满足了也不一定会被卸载：</p><ul><li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li><li>加载该类的ClassLoader已经被回收。</li><li>该类对应的Class对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li></ul><h3 id="4-finalize"><a href="#4-finalize" class="headerlink" title="4.finalize()"></a>4.finalize()</h3><p>finalize()类似C++的析构函数，用于关闭外部资源，但是 try-finally等方法可以做的更好，并且该方法运行代价很高，不确定大，无法保证各个对象的调用顺序，因此最好不要使用。</p><p>当一个对象可被回收时，如果需要执行该对象的finalize()方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了finalize()方法自救，后面回收时不会调用finalize()方法。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>无论是通过引用技术算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判断对象是否可被回收都与引用有关。<br>Java 提供了四种强度不同的引用类型。</p><h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1.强引用"></a>1.强引用</h3><p>被强引用关联的对象不会被回收。<br>使用new一个新对象的方式来创建强引用。</p><blockquote><p>Object obj = new Object();</p></blockquote><h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2.软引用"></a>2.软引用</h3><p>被软引用关联的对象只有在内存不够的情况下才会被回收。<br>使用 SoftReference 类来穿件软引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = new SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = null;  // 使对象只被软引用关联</span><br></pre></td></tr></table></figure></p><h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3.弱引用"></a>3.弱引用</h3><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。<br>使用 WeakReference 类来实现弱引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = new WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = null;</span><br></pre></td></tr></table></figure></p><h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4.虚引用"></a>4.虚引用</h3><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p><p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来实现虚引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = new PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj = null;</span><br></pre></td></tr></table></figure></p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="1-标记-清除"><a href="#1-标记-清除" class="headerlink" title="1.标记 - 清除"></a>1.标记 - 清除</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdehf4i81j20gv07b0sz.jpg" alt=""></p><p>标记要回收的对象，然后清除。<br>不足：</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><h3 id="2-标记-整理"><a href="#2-标记-整理" class="headerlink" title="2.标记 - 整理"></a>2.标记 - 整理</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdejl0s3hj20hq06f0t0.jpg" alt=""><br>让所有存活的对象都向一端移动，然后直接清理掉端边界外的内存。</p><h3 id="3-复制"><a href="#3-复制" class="headerlink" title="3.复制"></a>3.复制</h3><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdeztm88wj20j00670t3.jpg" alt=""></p><p>将内存划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了就将还存活的对象复制到另一块上面，而后在把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种手机算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden空间和两块较小的Survivor空间上，最后清理Eden和使用或的那一块Survivor。</p><p>HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%，如果每次回收有多余10%的对象存活，那么一块Survivor空间就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</p><h3 id="4-分代收集"><a href="#4-分代收集" class="headerlink" title="4.分代收集"></a>4.分代收集</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdfe723ibj20hy0av0td.jpg" alt=""></p><p>以上是 HotSpot 虚拟机中的7个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程：单线程指的是垃圾收集器只是用一个线程进行收集，而多线程使用多个线程；</li><li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了CMS 和 G1 之外，其他垃圾收集器都是以串行的方法执行。</li></ul><p><strong>1、Serial收集器</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdfw78hagj20k207t0ta.jpg" alt=""><br>Serial 翻译为串行，也就是说它以串行的方式执行。<br>他是单线程的收集器，只会使用一个线程进行垃圾收集工作。<br>它的优点是简单高效，对于单个CPU环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是Client模式下的默认新生代收集器，因为在该应用场景下内存一般来说不会很大。Serial收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><p><strong>2、ParNew收集器</strong><br>它是Serial收集器的多线程版本。</p><p>是 Server模式下首选的新生代收集器，除了性能原因外，主要是因为除了 Serial收集器，只有它能与CMS收集器配合工作。</p><p>默认开启的线程数量与CPU数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdgifh9kjj20jw07b0tc.jpg" alt=""></p><p><strong>3、Parallel Scavenge收集器</strong><br>与ParNew 一样是多线程收集器。</p><p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是打到一个可控制的吞吐量，因此它被称为”吞吐量优先”收集器。这里的吞吐量是指CPU用于运行用户程序的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><p><strong>4、Serial Old 收集器</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzdgoaxo04j20ke07j0ta.jpg" alt=""><br>是Serial收集器的老年代版本，也是给 Client模式下虚拟机使用。如果用在 Server模式下，它有两大用途：</p><ul><li>在JDK 1.5以及之前的版本中与 Paraller Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ul><p><strong>5、Prarllel Old收集器</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzeiflv3dij20kk07i0tc.jpg" alt=""></p><p>是Parallel Scavenge 收集器的老年代版本。</p><p>在注重吞吐量以及CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><p><strong>6、CMS 收集器</strong><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzeiicd6idj20kd07c0tj.jpg" alt=""></p><p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程：</p><ul><li>初始标记：仅仅只是标记一个 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行GC Roots Tracing的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ul><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致CPU利用率不够高。</li><li>无法处理浮动垃圾：可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次GC时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着CMS收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启动 Serial Old 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前出发一次 Full GC。</li></ul><p><strong>7、G1收集器</strong><br>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多CPU和大内存的场景下有很好的性能。HotSpot开发团队赋予它的使命是未开可以替换掉CMS收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而G1可以直接对新生代和老年代一起回收。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejax0iq1j20kf0bh0t8.jpg" alt=""></p><p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejd3azdvj20jt0e70t9.jpg" alt=""></p><p> 通过引入 Region的概念，从而将原来的一整块内存空间划分为多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个Region垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的手机时间，优先回收价值最大的Region。</p><p> 每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><p> <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzejt444tfj20l706x0th.jpg" alt=""></p><p> 如果不计算维护 Remembered Set 的操作，G1收集器的运作大致可分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个Region中的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高手机效率。</li></ul><p>具备如下特点：</p><ul><li>空间整合：整体来看是基于”标记 - 整理”算法实现的收集器，从局部（两个Region之间）上来看是基于”复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒。</li></ul><h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><h2 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h2><ul><li>Minor GC：回收新生代上，因为新生代对象存活时间很短，因此Minor GC 会频繁执行，执行的速度一般也会比较快。</li><li>Full GC：回收老年代和新生代，老年代对象其存活时间长，因此Full GC 很少执行，执行速度比 Minor GC 慢很多。</li></ul><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><h3 id="1-对象优先在Eden分配"><a href="#1-对象优先在Eden分配" class="headerlink" title="1.对象优先在Eden分配"></a>1.对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区分配，当Eden区空间不够时，发起 Minor GC。</p><h3 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2.大对象直接进入老年代"></a>2.大对象直接进入老年代</h3><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。<br>经常出现大对象会提前出发垃圾收集以获取足够的连续空间分配给大对象。<br>-XX:PretenureSizeThreshold,大于此值的对象直接在老年代分配，避免在Eden区和Survivor区之间的大量内存复制。</p><h3 id="3-长期存活的对象进入老年代"><a href="#3-长期存活的对象进入老年代" class="headerlink" title="3.长期存活的对象进入老年代"></a>3.长期存活的对象进入老年代</h3><p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor中，年龄就增加1岁，增加到一定年龄则移动到老年代中。<br>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p><h3 id="4-动态对象年龄判定"><a href="#4-动态对象年龄判定" class="headerlink" title="4.动态对象年龄判定"></a>4.动态对象年龄判定</h3><p>虚拟机并不是永远地要求对象的年龄必须达到 MaxTenuring Threshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold中要求的年龄。</p><h3 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5.空间分配担保"></a>5.空间分配担保</h3><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p><p>如果不成立的话虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那么就要进行一次 Full GC。</p><h2 id="Full-GC-的触发条件"><a href="#Full-GC-的触发条件" class="headerlink" title="Full GC 的触发条件"></a>Full GC 的触发条件</h2><p>对于Minor GC ，其触发条件非常简单，当 Eden空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p><h3 id="1-调用-System-gc"><a href="#1-调用-System-gc" class="headerlink" title="1.调用 System.gc()"></a>1.调用 System.gc()</h3><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><h3 id="2-老年代空间不足"><a href="#2-老年代空间不足" class="headerlink" title="2.老年代空间不足"></a>2.老年代空间不足</h3><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmm 虚拟机参数调打新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以用过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象再新生代多存活一段时间。</p><h3 id="3-空间分配担保失败"><a href="#3-空间分配担保失败" class="headerlink" title="3.空间分配担保失败"></a>3.空间分配担保失败</h3><p>使用复制算法的Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。</p><h3 id="4-JDK-1-7及以前的永久代空间不足"><a href="#4-JDK-1-7及以前的永久代空间不足" class="headerlink" title="4.JDK 1.7及以前的永久代空间不足"></a>4.JDK 1.7及以前的永久代空间不足</h3><p>在JDK 1.7及以前，HotSpot虚拟机中的方法区是用永久代实现的，永久代中存放的一些 Class 的信息、常量、静态变量等数据。</p><p>当系统中要加载的类、反射的类和调用的方法叫多时，永久代可能会被沾满，在未配置为采用CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p><p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p><h3 id="5-Concurrnet-Mode-Failure"><a href="#5-Concurrnet-Mode-Failure" class="headerlink" title="5.Concurrnet Mode Failure"></a>5.Concurrnet Mode Failure</h3><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是GC过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure错误，并触发 Full GC。</p><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载。因为如果一次性加载，那么会占用很多的内存。</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzff4da6otj20ht05s0t2.jpg" alt=""></p><p>包括以下7个阶段：</p><ul><li>加载（Loading）</li><li>验证（Verification）</li><li>准备（Preparation）</li><li>解析（Resolution）</li><li>初始化（Initialization）</li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>包含了加载、验证、准备、解析和初始化这5个阶段。</p><h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h3><p>加载是类加载的一个阶段，注意不要混淆。</p><p>加载过程完成以下三件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构。</li><li>在内存中生成一个代表这个类的Class对象，作为方法区这个类的各种数据的访问入口。</li></ul><p>其中二进制字节流可以从以下方式获取：</p><ul><li>从ZIP包读取，JAR、EAR、WAR 格式的基础。</li><li>从网络中获取，最典型的应用是 Applet。</li><li>运行时计算生成，例如动态代理技术，在 java.lang.reflect.proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。</li><li>由其他文件生成，例如由JSP文件生成对应的 Class 类。</li></ul><h3 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a>2.验证</h3><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h3 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a>3.准备</h3><p>类变量是被static修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</p><p>实例变量不会在这阶段分配内存，它将会在对象实例化时随着对象一起分配在堆中。</p><p>注意，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p><p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p><blockquote><p>public static int value = 123;</p></blockquote><p> 如果类变量是常量，那么会按照表达式来进行初始化，而不是赋值为 0。</p><blockquote><p>public static final int value = 123;</p></blockquote><h3 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a>4.解析</h3><p>将常量池的符号引用替换为直接引用的过程。</p><p>其中解析过程在某些情况下可以在初始化阶段之后再开始，只是为了支持 Java 的动态绑定。</p><h3 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h3><p>初始化阶段才真正开始执行类中定义的 Java 程序代码，初始化阶段即虚拟机执行类构造器<clinit>()方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主管计划去初始化类变量和其他资源。</clinit></p><p><clinit>() 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的。编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        i = 0;                // 给变量赋值可以正常编译通过</span><br><span class="line">        System.out.print(i);  // 这句编译器会提示“非法向前引用”</span><br><span class="line">    &#125;</span><br><span class="line">    static int i = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></clinit></p><p> 由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块的执行要由于子类。例如以下代码：</clinit></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> static class Parent &#123;</span><br><span class="line">    public static int A = 1;</span><br><span class="line">    static &#123;</span><br><span class="line">        A = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class Sub extends Parent &#123;</span><br><span class="line">    public static int B = A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     System.out.println(Sub.B);  // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父类接口的<clinit>()方法。只有当父类接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化也一样不会执行接口的<clinit>()方法。</clinit></clinit></clinit></clinit></p><p>虚拟机会保证一个类的 <clinit>() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <clinit>() 方法，其他线程都会阻塞等待，直到活动线程执行 <clinit>() 方法完毕，如果在一个类的 <clinit>() 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</clinit></clinit></clinit></clinit></p><h2 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h2><h3 id="1-主动引用"><a href="#1-主动引用" class="headerlink" title="1.主动引用"></a>1.主动引用</h3><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p><ul><li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</li><li>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</li></ul><h3 id="2-被动引用"><a href="#2-被动引用" class="headerlink" title="2.被动引用"></a>2.被动引用</h3><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><ul><li><p>通过子类引用父类的静态字段，不会导致子类初始化。</p><blockquote><p>System.out.println(SubClass.value);  // value 字段在 SuperClass 中定义</p></blockquote></li><li><p>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</p><blockquote><p>SuperClass[] sca = new SuperClass[10];</p></blockquote></li><li><p>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</p><blockquote><p>System.out.println(ConstClass.HELLOWORLD);</p></blockquote></li></ul><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>两个类相等需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。</p><p>这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。</p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader），这个类加载器用 C++ 实现，是虚拟机自身的一部分；</li><li>所有其他类的加载器，这些类由 Java 实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</li></ul><p>从 Java 开发人员的角度看，类加载器可以划分得更细致一些：</p><ul><li>启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 &lt;JRE_HOME&gt;\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</li><li>扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 &lt;JAVA_HOME&gt;/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>应用程序都是由三种类加载器相互配合进行加载的，如果有必要，还可以加入自己定义的类加载器。</p><p>下图展示的类加载器之间的层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzfhly0w16j21r11440vv.jpg" alt=""></p><h3 id="1-工作过程"><a href="#1-工作过程" class="headerlink" title="1.工作过程"></a>1.工作过程</h3><p>一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载。</p><h3 id="2-好处"><a href="#2-好处" class="headerlink" title="2.好处"></a>2.好处</h3><p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</p><p>例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。</p><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3.实现"></a>3.实现</h3><p>以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ClassLoader &#123;</span><br><span class="line">    // The parent class loader for delegation</span><br><span class="line">    private final ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        return loadClass(name, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123;</span><br><span class="line">        synchronized (getClassLoadingLock(name)) &#123;</span><br><span class="line">            // First, check if the class has already been loaded</span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            if (c == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (parent != null) &#123;</span><br><span class="line">                        c = parent.loadClass(name, false);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                    // ClassNotFoundException thrown if class not found</span><br><span class="line">                    // from the non-null parent class loader</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (c == null) &#123;</span><br><span class="line">                    // If still not found, then invoke findClass in order</span><br><span class="line">                    // to find the class.</span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            return c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        throw new ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义类加载器实现"><a href="#自定义类加载器实现" class="headerlink" title="自定义类加载器实现"></a>自定义类加载器实现</h2><p>FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。</p><p>java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，因此自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class FileSystemClassLoader extends ClassLoader &#123;</span><br><span class="line"></span><br><span class="line">    private String rootDir;</span><br><span class="line"></span><br><span class="line">    public FileSystemClassLoader(String rootDir) &#123;</span><br><span class="line">        this.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        byte[] classData = getClassData(name);</span><br><span class="line">        if (classData == null) &#123;</span><br><span class="line">            throw new ClassNotFoundException();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return defineClass(name, classData, 0, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private byte[] getClassData(String className) &#123;</span><br><span class="line">        String path = classNameToPath(className);</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream ins = new FileInputStream(path);</span><br><span class="line">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">            int bufferSize = 4096;</span><br><span class="line">            byte[] buffer = new byte[bufferSize];</span><br><span class="line">            int bytesNumRead;</span><br><span class="line">            while ((bytesNumRead = ins.read(buffer)) != -1) &#123;</span><br><span class="line">                baos.write(buffer, 0, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            return baos.toByteArray();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String classNameToPath(String className) &#123;</span><br><span class="line">        return rootDir + File.separatorChar</span><br><span class="line">                + className.replace(&apos;.&apos;, File.separatorChar) + &quot;.class&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/01/17/Java并发/" rel="next" title="Java并发">                <i class="fa fa-chevron-left"></i> Java并发              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/01/23/Java IO/" rel="prev" title="Java IO">                Java IO <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#运行时数据区域"><span class="nav-number">1.</span> <span class="nav-text">运行时数据区域</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#程序计数器"><span class="nav-number">1.1.</span> <span class="nav-text">程序计数器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Java虚拟机栈"><span class="nav-number">1.2.</span> <span class="nav-text">Java虚拟机栈</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#本地方法栈"><span class="nav-number">1.3.</span> <span class="nav-text">本地方法栈</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#堆"><span class="nav-number">1.4.</span> <span class="nav-text">堆</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#方法区"><span class="nav-number">1.5.</span> <span class="nav-text">方法区</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#运行时常量池"><span class="nav-number">1.6.</span> <span class="nav-text">运行时常量池</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#直接内存"><span class="nav-number">1.7.</span> <span class="nav-text">直接内存</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#垃圾收集"><span class="nav-number">2.</span> <span class="nav-text">垃圾收集</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#判断一个对象是否可被回收"><span class="nav-number">2.1.</span> <span class="nav-text">判断一个对象是否可被回收</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-引用计数算法"><span class="nav-number">2.1.1.</span> <span class="nav-text">1.引用计数算法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-可达性分析算法"><span class="nav-number">2.1.2.</span> <span class="nav-text">2.可达性分析算法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-方法区的回收"><span class="nav-number">2.1.3.</span> <span class="nav-text">3.方法区的回收</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-finalize"><span class="nav-number">2.1.4.</span> <span class="nav-text">4.finalize()</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#引用类型"><span class="nav-number">2.2.</span> <span class="nav-text">引用类型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-强引用"><span class="nav-number">2.2.1.</span> <span class="nav-text">1.强引用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-软引用"><span class="nav-number">2.2.2.</span> <span class="nav-text">2.软引用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-弱引用"><span class="nav-number">2.2.3.</span> <span class="nav-text">3.弱引用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-虚引用"><span class="nav-number">2.2.4.</span> <span class="nav-text">4.虚引用</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#垃圾收集算法"><span class="nav-number">2.3.</span> <span class="nav-text">垃圾收集算法</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-标记-清除"><span class="nav-number">2.3.1.</span> <span class="nav-text">1.标记 - 清除</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-标记-整理"><span class="nav-number">2.3.2.</span> <span class="nav-text">2.标记 - 整理</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-复制"><span class="nav-number">2.3.3.</span> <span class="nav-text">3.复制</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-分代收集"><span class="nav-number">2.3.4.</span> <span class="nav-text">4.分代收集</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#垃圾收集器"><span class="nav-number">2.4.</span> <span class="nav-text">垃圾收集器</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#内存分配与回收策略"><span class="nav-number">3.</span> <span class="nav-text">内存分配与回收策略</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Minor-GC-和-Full-GC"><span class="nav-number">3.1.</span> <span class="nav-text">Minor GC 和 Full GC</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#内存分配策略"><span class="nav-number">3.2.</span> <span class="nav-text">内存分配策略</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-对象优先在Eden分配"><span class="nav-number">3.2.1.</span> <span class="nav-text">1.对象优先在Eden分配</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-大对象直接进入老年代"><span class="nav-number">3.2.2.</span> <span class="nav-text">2.大对象直接进入老年代</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-长期存活的对象进入老年代"><span class="nav-number">3.2.3.</span> <span class="nav-text">3.长期存活的对象进入老年代</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-动态对象年龄判定"><span class="nav-number">3.2.4.</span> <span class="nav-text">4.动态对象年龄判定</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-空间分配担保"><span class="nav-number">3.2.5.</span> <span class="nav-text">5.空间分配担保</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Full-GC-的触发条件"><span class="nav-number">3.3.</span> <span class="nav-text">Full GC 的触发条件</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-调用-System-gc"><span class="nav-number">3.3.1.</span> <span class="nav-text">1.调用 System.gc()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-老年代空间不足"><span class="nav-number">3.3.2.</span> <span class="nav-text">2.老年代空间不足</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-空间分配担保失败"><span class="nav-number">3.3.3.</span> <span class="nav-text">3.空间分配担保失败</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-JDK-1-7及以前的永久代空间不足"><span class="nav-number">3.3.4.</span> <span class="nav-text">4.JDK 1.7及以前的永久代空间不足</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-Concurrnet-Mode-Failure"><span class="nav-number">3.3.5.</span> <span class="nav-text">5.Concurrnet Mode Failure</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#类加载机制"><span class="nav-number">4.</span> <span class="nav-text">类加载机制</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#类的生命周期"><span class="nav-number">4.1.</span> <span class="nav-text">类的生命周期</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#类加载过程"><span class="nav-number">4.2.</span> <span class="nav-text">类加载过程</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-加载"><span class="nav-number">4.2.1.</span> <span class="nav-text">1.加载</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-验证"><span class="nav-number">4.2.2.</span> <span class="nav-text">2.验证</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-准备"><span class="nav-number">4.2.3.</span> <span class="nav-text">3.准备</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-解析"><span class="nav-number">4.2.4.</span> <span class="nav-text">4.解析</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-初始化"><span class="nav-number">4.2.5.</span> <span class="nav-text">5.初始化</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#类初始化时机"><span class="nav-number">4.3.</span> <span class="nav-text">类初始化时机</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-主动引用"><span class="nav-number">4.3.1.</span> <span class="nav-text">1.主动引用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-被动引用"><span class="nav-number">4.3.2.</span> <span class="nav-text">2.被动引用</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#类与类加载器"><span class="nav-number">4.4.</span> <span class="nav-text">类与类加载器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#类加载器分类"><span class="nav-number">4.5.</span> <span class="nav-text">类加载器分类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#双亲委派模型"><span class="nav-number">4.6.</span> <span class="nav-text">双亲委派模型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-工作过程"><span class="nav-number">4.6.1.</span> <span class="nav-text">1.工作过程</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-好处"><span class="nav-number">4.6.2.</span> <span class="nav-text">2.好处</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-实现"><span class="nav-number">4.6.3.</span> <span class="nav-text">3.实现</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#自定义类加载器实现"><span class="nav-number">4.7.</span> <span class="nav-text">自定义类加载器实现</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="/2019/10/18/Java%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/10/18/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Java并发"><meta property="og:url" content="http://yoursite.com/2019/01/17/Java并发/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5h1ytxr6j21us0m6ats.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz3v4hjr1tj20ot0do0ta.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz43y4q0afj209t09e0sx.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz44mum3yjj20ae0an0t0.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz44oal1fvj20840de0t7.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz45rdaglwj20l40cy0to.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f1lsyspj20pw08j0su.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f4akq2nj20n40bs0t2.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f56hpm7j20k30580sn.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5foel2q8j20df0cy0ss.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5fraifkjj20e20i00sv.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9lehkzaej20990830sw.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9log0fynj20hc09v0t5.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9lwdisswj20kb0aa0ta.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9mfncm5vj20gw0910t3.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9mgq3h0zj20h708m0t4.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9o2fs2cpj20mb0bw0sq.jpg"><meta property="og:updated_time" content="2019-01-17T09:24:26.619Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java并发"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5h1ytxr6j21us0m6ats.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/01/17/Java并发/"/>  <title>Java并发 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/01/17/Java并发/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java并发</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-01-17T17:24:08+08:00">                2019-01-17              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-01-17T17:24:26+08:00" content="2019-01-17">      2019-01-17    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5h1ytxr6j21us0m6ats.jpg" alt=""><br><a id="more"></a></p><h1 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h1><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz3v4hjr1tj20ot0do0ta.jpg" alt=""></p><h2 id="新建（New）"><a href="#新建（New）" class="headerlink" title="新建（New）"></a>新建（New）</h2><p>创建后尚未启动。</p><h2 id="可运行（Runnable）"><a href="#可运行（Runnable）" class="headerlink" title="可运行（Runnable）"></a>可运行（Runnable）</h2><p>可能正在运行，也可能正在等待CPU时间片。<br>包含了操作系统线程状态中Running和Ready。</p><h2 id="阻塞（Blocking）"><a href="#阻塞（Blocking）" class="headerlink" title="阻塞（Blocking）"></a>阻塞（Blocking）</h2><p>等待获取一个排他锁，如果其线程释放了锁就会结束此状态。</p><h2 id="无期限等待（Waiting）"><a href="#无期限等待（Waiting）" class="headerlink" title="无期限等待（Waiting）"></a>无期限等待（Waiting）</h2><p>等待其他线程显式地唤醒，否则不会被分配CPU时间片。<br>进入方法|退出方法<br>:-:|:-:<br>没有设置Timeout参数的Object.wait()方法|Object.notify()/Object.notifyAll()<br>没有设置Timeout参数的Thread.join()方法|被调用的线程执行完毕<br>LockSupport.park()方法|-、</p><h2 id="限期等待（Timed-Waiting）"><a href="#限期等待（Timed-Waiting）" class="headerlink" title="限期等待（Timed Waiting）"></a>限期等待（Timed Waiting）</h2><p>无需等待其他线程显式地唤醒，在一定时间之后会被系统自动唤醒。<br>调用 Thread.sleep()方法使线程进入限期等待状态时，常常用”使一个线程睡眠”进行描述。<br>调用Object.wait()方法使线程进入限期等待或者无限期等待时，常常用”挂起一个线程”进行描述。<br>睡眠和挂起是用来描述行为，而阻塞和等待时用来描述状态。<br>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用Thread.sleep()和Object.wait()等方法进入。</p><table><thead><tr><th style="text-align:center">进入方法</th><th style="text-align:center">退出方法</th></tr></thead><tbody><tr><td style="text-align:center">Thread.sleep()方法</td><td style="text-align:center">时间结束</td></tr><tr><td style="text-align:center">设置了Timeout参数的Object.wait()方法</td><td style="text-align:center">时间结束/Object.notify()/Object.notifyAll()</td></tr><tr><td style="text-align:center">设置了Timeout参数的Thread.join()方法</td><td style="text-align:center">时间结束/被调用的线程执行完毕</td></tr><tr><td style="text-align:center">LockSupport.parkNanos()方法</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">LockSupport.parkUntil()方法</td><td style="text-align:center">-</td></tr></tbody></table><h2 id="死亡（Terminated）"><a href="#死亡（Terminated）" class="headerlink" title="死亡（Terminated）"></a>死亡（Terminated）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><h1 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h1><p>有三种使用线程的方法：</p><ul><li>实现 Runnable 接口；</li><li>实现 Callable 接口；</li><li>继承 Thread 类。</li></ul><p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。</p><h2 id="实现-RUnnable-接口"><a href="#实现-RUnnable-接口" class="headerlink" title="实现 RUnnable 接口"></a>实现 RUnnable 接口</h2><p>需要实现run()方法</p><p>通过 Thread 调用 start() 方法来启动线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MyRunnable implements Runnable &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    MyRunnable instance = new MyRunnable();</span><br><span class="line">    Thread thread = new Thread(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h2><p>与Runnable 相比，Callable 可以有返回值，返回值通过 FUntureTask 进行封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    public Integer call() &#123;</span><br><span class="line">        return 123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">    MyCallable mc = new MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = new Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>同样也是需要实现 run()方法，因此 Thread类也实现了 Runnable 接口。<br>当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待调度，当一个线程被调度时会执行该线程的run()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    MyThread mt = new MyThread();</span><br><span class="line">    mt.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现接口-VS-继承-Thread"><a href="#实现接口-VS-继承-Thread" class="headerlink" title="实现接口 VS 继承 Thread"></a>实现接口 VS 继承 Thread</h2><p>实现接口会更好一些，因为：</p><ul><li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其他类，但是可以实现多个接口；</li><li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li></ul><h1 id="基础线程机制"><a href="#基础线程机制" class="headerlink" title="基础线程机制"></a>基础线程机制</h1><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Executor管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期，这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。</p><p>主要有三种 Executor：</p><ul><li>CachedTreadPool：一个任务创建一个线程；</li><li>FixedThreadPool：所以任务只能使用固定大小的线程</li><li>SingleThreadExecutor：相当于大小为1的FixedThreadPool。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">        executorService.execute(new MyRunnable());</span><br><span class="line">    &#125;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h2><p>守护线程是程序运行时在后台提供服务的线程，不属于线程中不可或缺的部分。(垃圾回收线程也是守护线程)<br>当所以非守护线程结束时，程序也终止，同时会杀死所有守护线程。<br>main()属于非守护线程。<br>使用setDaeMon()方法将一个线程设置为守护线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Thread thread = new Thread(new MyRunnable());</span><br><span class="line">    thread.setDaemon(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep()"></a>Sleep()</h2><p>Thread.sleep(millisec)方法会休眠当前正在执行的线程，millisec单位为毫秒。<br>sleep()可能会抛出InterruptedException，因为异常不能夸线程传播回main()中，因此必须在本地进行处理，线程中抛出的其它异常也同样需要在本地进行处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(3000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h2><p>对静态方法Thread.yield()的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其他线程来执行，该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其他线程可以运行。</p><p>当一个线程使用了这个方法之后，它就会把自己CPU执行的时间让掉，让自己或者其它的线程运行，注意是让自己或者其他线程运行，并不是单纯的让给其他线程。</p><p>yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    Thread.yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>一个线程执行完毕之后会自动结束，如果再运行过程中发生异常也会提前结束。</p><h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><p>通过调用一个线程的interrupt()来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出InterruptedException，从而提前结束该线程。但是不能中断I/O阻塞和synchronized锁阻塞。</p><p>对于以下代码，在main()中启动一个线程之后再中断它，由于线程中调用了Thread.sleep()方法，因此会抛出一个InterruptedException，从而提前结束线程，不执行之后的语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class InterruptExample &#123;</span><br><span class="line"></span><br><span class="line">    private static class MyThread1 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">                System.out.println(&quot;Thread run&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread1 = new MyThread1();</span><br><span class="line">    thread1.start();</span><br><span class="line">    thread1.interrupt();</span><br><span class="line">    System.out.println(&quot;Main run&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Main run</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at InterruptExample.lambda$main$0(InterruptExample.java:5)</span><br><span class="line">    at InterruptExample$$Lambda$1/713338599.run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure></p><h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h2><p>如果一个线程的run()方法执行一个无线循环，并且没有执行sleep()等会抛出InterruptedException的操作，那么调用线程的interrupt()方法就无法使线程提前结束。</p><p>但是调用interrupt()方法会设置线程的中断标记，此时调用interrupted()方法会返回true。因此可以在循环体中使用 interrupted()方法来判断线程是否处于中断状态，从而提前结束线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class InterruptExample &#123;</span><br><span class="line"></span><br><span class="line">    private static class MyThread2 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (!interrupted()) &#123;</span><br><span class="line">                // ..</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;Thread end&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread2 = new MyThread2();</span><br><span class="line">    thread2.start();</span><br><span class="line">    thread2.interrupt();</span><br><span class="line">&#125;</span><br><span class="line">Thread end</span><br></pre></td></tr></table></figure></p><h2 id="Executor的中断操作"><a href="#Executor的中断操作" class="headerlink" title="Executor的中断操作"></a>Executor的中断操作</h2><p>调用 Executor 的shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow()方法，则相当于调用每个线程的interrupt()方法。</p><p>以下使用 Lambda 创建线程，相当于创建一个匿名内部线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(2000);</span><br><span class="line">            System.out.println(&quot;Thread run&quot;);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    executorService.shutdownNow();</span><br><span class="line">    System.out.println(&quot;Main run&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Main run</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)</span><br><span class="line">    at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure></p><p>如果只想中断 Executor 中的一个线程，可以通过使用 submit()方法来提交一个线程，它会返回一个Future&lt;?&gt;对象，通过该对象的cancel(true)方法就可以中断线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">    // ..</span><br><span class="line">&#125;);</span><br><span class="line">future.cancel(true);</span><br></pre></td></tr></table></figure></p><h1 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h1><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是JVM实现的synchronized，而另一个是JDK实现的ReentrantLock。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>1.同步一个代码块</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void func() &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。<br>对于以下代码，使用ExecutorService执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedExample &#123;</span><br><span class="line"></span><br><span class="line">    public void func1() &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">                System.out.print(i + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    SynchronizedExample e1 = new SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></p><p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，这两个线程交叉执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    SynchronizedExample e1 = new SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = new SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e2.func1());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9</span><br></pre></td></tr></table></figure></p><p><strong>2.同步一个方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void func () &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它和同步代码块一样，作用同一个对象。</p><p><strong>3.同步一个类</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void func() &#123;</span><br><span class="line">    synchronized (SynchronizedExample.class) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作用于整个类，也就是说这两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedExample &#123;</span><br><span class="line"></span><br><span class="line">    public void func2() &#123;</span><br><span class="line">        synchronized (SynchronizedExample.class) &#123;</span><br><span class="line">            for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">                System.out.print(i + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    SynchronizedExample e1 = new SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = new SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func2());</span><br><span class="line">    executorService.execute(() -&gt; e2.func2());</span><br><span class="line">&#125;</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></p><p><strong>4.同步一个静态方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static void fun() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作用于整个类。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock 是 java.util.concurrent(J.U.C)包中的锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class LockExample &#123;</span><br><span class="line"></span><br><span class="line">    private Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public void func() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">                System.out.print(i + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock(); // 确保释放锁，从而避免发生死锁。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LockExample lockExample = new LockExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">&#125;</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><strong>1.锁的实现</strong><br>synchronized是JVM实现的，而ReentrantLock是JDK实现的。<br><strong>2.性能</strong><br>新版本Java对synchronized进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。<br><strong>3.等待可中断</strong><br>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。<br>ReentrantLock可中断，而synchronized不行。<br><strong>4.公平锁</strong><br>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。<br>synchronized的锁是非公平的，ReentrantLock默认情况下也是非公平的，但是也可以是公平的。<br><strong>5.锁绑定多个条件</strong><br>一个ReentrantLock可以同时绑定多个Condition对象。</p><h2 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h2><p>除非需要使用ReentrantLock的高级功能，否则优先使用synchronized。这是因为synchronized是JVM实现的一个锁机制，JVM原生地支持它，而ReentrantLock不是所有JDK版本都支持。并且使用synchronized不用担心没有释放锁而导致死锁的问题，因为JVM会确保锁的释放。</p><p>、</p><h1 id="线程之间的协作"><a href="#线程之间的协作" class="headerlink" title="线程之间的协作"></a>线程之间的协作</h1><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其他部分之前完成，那么久需要对线程进行协调。</p><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>在线程中调用另外一个线程的join()方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><p>对于以下代码，虽然b线程先启动，但是因为在b线程中调用了a线程的join()方法，b线程会等待a线程结束才继续执行，因此最后能够保证a线程的输出先于b线程的输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class JoinExample &#123;</span><br><span class="line"></span><br><span class="line">    private class A extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(&quot;A&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class B extends Thread &#123;</span><br><span class="line"></span><br><span class="line">        private A a;</span><br><span class="line"></span><br><span class="line">        B(A a) &#123;</span><br><span class="line">            this.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                a.join();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;B&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test() &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        B b = new B(a);</span><br><span class="line">        b.start();</span><br><span class="line">        a.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    JoinExample example = new JoinExample();</span><br><span class="line">    example.test();</span><br><span class="line">&#125;</span><br><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure></p><h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait() notify() notifyAll()"></a>wait() notify() notifyAll()</h2><p>调用wait()使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其他线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p><p>它们都属于 Object 的一部分，而不属于 Thread。</p><p>只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 illegalmonitorStateException。</p><p>使用wait()挂起期间，线程会释放锁，这是因为，如果没有释放锁，那么其他线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class WaitNotifyExample &#123;</span><br><span class="line"></span><br><span class="line">    public synchronized void before() &#123;</span><br><span class="line">        System.out.println(&quot;before&quot;);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized void after() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;after&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    WaitNotifyExample example = new WaitNotifyExample();</span><br><span class="line">    executorService.execute(() -&gt; example.after());</span><br><span class="line">    executorService.execute(() -&gt; example.before());</span><br><span class="line">&#125;</span><br><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure></p><h3 id="wait-和-sleep-的区别"><a href="#wait-和-sleep-的区别" class="headerlink" title="wait() 和 sleep() 的区别"></a>wait() 和 sleep() 的区别</h3><ul><li>wait()是 Object 的方法，而sleep() 是 Thread 的静态方法；</li><li>wait()会释放锁，sleep()不会。</li></ul><h2 id="await-signal-signalAll"><a href="#await-signal-signalAll" class="headerlink" title="await()  signal()  signalAll()"></a>await()  signal()  signalAll()</h2><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或者 signalAll() 方法唤醒等待的线程。</p><p>相比于 wait() 这种等待方式，await() 指定等待的条件，因此更加灵活。<br>使用Lock 来获取一个 Condition 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class AwaitSignalExample &#123;</span><br><span class="line"></span><br><span class="line">    private Lock lock = new ReentrantLock();</span><br><span class="line">    private Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    public void before() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;before&quot;);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void after() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(&quot;after&quot;);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    AwaitSignalExample example = new AwaitSignalExample();</span><br><span class="line">    executorService.execute(() -&gt; example.after());</span><br><span class="line">    executorService.execute(() -&gt; example.before());</span><br><span class="line">&#125;</span><br><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure></p><h1 id="J-U-C-AQS"><a href="#J-U-C-AQS" class="headerlink" title="J.U.C - AQS"></a>J.U.C - AQS</h1><p>java.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。</p><h2 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h2><p>用来控制一个线程等待多个线程。</p><p>维护了一个计数器 cnt，每次调用 countDown() 方法会让计数器的值减 1，减到 0 的时候，那些因为调用 await() 方法而在等待的线程就会被唤醒。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz43y4q0afj209t09e0sx.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class CountdownLatchExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        final int totalThread = 10;</span><br><span class="line">        CountDownLatch countDownLatch = new CountDownLatch(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                System.out.print(&quot;run..&quot;);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(&quot;end&quot;);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">run..run..run..run..run..run..run..run..run..run..end</span><br></pre></td></tr></table></figure></p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p><p>和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。</p><p>CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。</p><p>CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public CyclicBarrier(int parties, Runnable barrierAction) &#123;</span><br><span class="line">    if (parties &lt;= 0) throw new IllegalArgumentException();</span><br><span class="line">    this.parties = parties;</span><br><span class="line">    this.count = parties;</span><br><span class="line">    this.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public CyclicBarrier(int parties) &#123;</span><br><span class="line">    this(parties, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz44mum3yjj20ae0an0t0.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class CyclicBarrierExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final int totalThread = 10;</span><br><span class="line">        CyclicBarrier cyclicBarrier = new CyclicBarrier(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                System.out.print(&quot;before..&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; catch (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&quot;after..&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">before..before..before..before..before..before..before..before..before..before..after..after..after..after..after..after..after..after..after..after..</span><br></pre></td></tr></table></figure></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz44oal1fvj20840de0t7.jpg" alt=""></p><p>以下代码模拟了对某个服务的并发请求，每次只能有3个客户端同时访问，请求总数为10。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class SemaphoreExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final int clientCount = 3;</span><br><span class="line">        final int totalRequestCount = 10;</span><br><span class="line">        Semaphore semaphore = new Semaphore(clientCount);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; totalRequestCount; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.print(semaphore.availablePermits() + &quot; &quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">2 1 2 2 2 2 2 1 2 2</span><br></pre></td></tr></table></figure></p><h1 id="J-U-C-其它组件"><a href="#J-U-C-其它组件" class="headerlink" title="J.U.C - 其它组件"></a>J.U.C - 其它组件</h1><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>在介绍Callable时我们知道它可以有返回值，返回值通过future进行封装。FutureTask 实现了 RunnableFuture 接口，该接口继承自 Runnable 和 Future 接口，这使得 FutureTask既可以当做一个任务执行，也可以有返回值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt;</span><br><span class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt;</span><br></pre></td></tr></table></figure></p><p>FutureTask 可用于异步获取执行结果或者取消执行任务的场景。当一个计算任务需要执行很长时间，那么就可以用 FutureTask 来封装这个任务，主线程在完成自己的任务之后再去获取结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTaskExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Integer call() throws Exception &#123;</span><br><span class="line">                int result = 0;</span><br><span class="line">                for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                    result += i;</span><br><span class="line">                &#125;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread computeThread = new Thread(futureTask);</span><br><span class="line">        computeThread.start();</span><br><span class="line"></span><br><span class="line">        Thread otherThread = new Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;other task is running...&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        otherThread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">other task is running...</span><br><span class="line">4950</span><br></pre></td></tr></table></figure></p><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：</p><ul><li>FIFO 队列 ：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li><li>优先级队列 ：PriorityBlockingQueue</li></ul><p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p><p>使用 BlockingQueue 实现生产者消费者问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class ProducerConsumer &#123;</span><br><span class="line"></span><br><span class="line">    private static BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;&gt;(5);</span><br><span class="line"></span><br><span class="line">    private static class Producer extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                queue.put(&quot;product&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(&quot;produce..&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class Consumer extends Thread &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String product = queue.take();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(&quot;consume..&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">        Producer producer = new Producer();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">        Consumer consumer = new Consumer();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">        Producer producer = new Producer();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">produce..produce..consume..consume..produce..consume..produce..consume..produce..consume..</span><br></pre></td></tr></table></figure></p><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><p>主要用于并行计算中，和 MapReduce 原理类似，都是把大的计算任务拆分成多个小任务并行计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ForkJoinExample extends RecursiveTask&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private final int threshold = 5;</span><br><span class="line">    private int first;</span><br><span class="line">    private int last;</span><br><span class="line"></span><br><span class="line">    public ForkJoinExample(int first, int last) &#123;</span><br><span class="line">        this.first = first;</span><br><span class="line">        this.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer compute() &#123;</span><br><span class="line">        int result = 0;</span><br><span class="line">        if (last - first &lt;= threshold) &#123;</span><br><span class="line">            // 任务足够小则直接计算</span><br><span class="line">            for (int i = first; i &lt;= last; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 拆分成小任务</span><br><span class="line">            int middle = first + (last - first) / 2;</span><br><span class="line">            ForkJoinExample leftTask = new ForkJoinExample(first, middle);</span><br><span class="line">            ForkJoinExample rightTask = new ForkJoinExample(middle + 1, last);</span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line">            result = leftTask.join() + rightTask.join();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">    ForkJoinExample example = new ForkJoinExample(1, 10000);</span><br><span class="line">    ForkJoinPool forkJoinPool = new ForkJoinPool();</span><br><span class="line">    Future result = forkJoinPool.submit(example);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ForkJoin 使用 ForkJoinPool 来启动，它是一个特殊的线程池，线程数量取决于 CPU 核数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class ForkJoinPool extends AbstractExecutorService</span><br></pre></td></tr></table></figure></p><p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。例如下图中，Thread2 从 Thread1 的队列中拿出最晚的 Task1 任务，Thread1 会拿出 Task2 来执行，这样就避免发生竞争。但是如果队列中只有一个任务时还是会发生竞争。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz45rdaglwj20l40cy0to.jpg" alt=""></p><h1 id="线程不安全示例"><a href="#线程不安全示例" class="headerlink" title="线程不安全示例"></a>线程不安全示例</h1><p> 如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> public class ThreadUnsafeExample &#123;</span><br><span class="line"></span><br><span class="line">    private int cnt = 0;</span><br><span class="line"></span><br><span class="line">    public void add() &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        return cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    final int threadSize = 1000;</span><br><span class="line">    ThreadUnsafeExample example = new ThreadUnsafeExample();</span><br><span class="line">    final CountDownLatch countDownLatch = new CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    for (int i = 0; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br><span class="line">997</span><br></pre></td></tr></table></figure><h1 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h1><p> Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java程序在各种平台下都能达到一致的内存访问效果。</p><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度的矛盾，在它们之间加入了高速缓存。</p><p>加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f1lsyspj20pw08j0su.jpg" alt=""></p><p>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p><p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f4akq2nj20n40bs0t2.jpg" alt=""></p><h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>Java内存模型定义了8个操作来完成主内存和工作内存的交互操作。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5f56hpm7j20k30580sn.jpg" alt=""></p><ul><li>read：把一个变量的值从主内存传输到工作内存中。</li><li>load：在read之后执行，把read得到的值放入工作内存的变量副本中。</li><li>use：把工作内存中一个变量的值传递给执行引擎。</li><li>assign：把一个从执行引擎接受到的值赋给工作内存的变量</li><li>store：把工作内存的一个变量的值传送到主内存中</li><li>write：在store之后执行，把store得到的值放入主内存的变量中</li><li>lock：作用于主内存的变量</li><li>unlock</li></ul><h2 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h2><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1.原子性"></a>1.原子性</h3><p> Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。但是 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p><p> int 等原子性的类型在多线程环境中不会出现线程安全问题。——&gt; 是错误的认知，前面的线程不安全示例代码中，cnt 属于 int 类型变量，1000 个线程对它进行自增操作之后，得到的值为 997 而不是 1000。</p><p> 为了方便讨论，将内存间的交互操作简化为 3 个：load、assign、store。</p><p> 下图演示了两个线程同时对 cnt 进行操作，load、assign、store 这一系列操作整体上看不具备原子性，那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存，T2 依然可以读入旧值。可以看出，这两个线程虽然执行了两次自增运算，但是主内存中 cnt 的值最后为 1 而不是 2。因此对 int 类型读写操作满足原子性只是说明 load、assign、store 这些单个操作具备原子性。</p><p> <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5foel2q8j20df0cy0ss.jpg" alt=""></p><p> <strong>Atomicinteger能保证多个线程修改的原子性。</strong><br> <img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz5fraifkjj20e20i00sv.jpg" alt=""></p><p> 使用 AtomicInteger 重写之前线程不安全的代码之后得到以下线程安全实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> public class AtomicExample &#123;</span><br><span class="line">    private AtomicInteger cnt = new AtomicInteger();</span><br><span class="line"></span><br><span class="line">    public void add() &#123;</span><br><span class="line">        cnt.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        return cnt.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    final int threadSize = 1000;</span><br><span class="line">    AtomicExample example = new AtomicExample(); // 只修改这条语句</span><br><span class="line">    final CountDownLatch countDownLatch = new CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    for (int i = 0; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br><span class="line">1000</span><br></pre></td></tr></table></figure></p><p>除了使用原子类之外，也可以使用 synchronized 互斥锁来保证操作的原子性。它对应的内存间交互操作为：lock 和 unlock，在虚拟机实现上对应的字节码指令为 monitorenter 和 monitorexit。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class AtomicSynchronizedExample &#123;</span><br><span class="line">    private int cnt = 0;</span><br><span class="line"></span><br><span class="line">    public synchronized void add() &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized int get() &#123;</span><br><span class="line">        return cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    final int threadSize = 1000;</span><br><span class="line">    AtomicSynchronizedExample example = new AtomicSynchronizedExample();</span><br><span class="line">    final CountDownLatch countDownLatch = new CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    for (int i = 0; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br><span class="line">1000</span><br></pre></td></tr></table></figure></p><h3 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2.可见性"></a>2.可见性</h3><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p><p>主要有有三种实现可见性的方式：</p><ul><li>volatile</li><li>synchronized，对一个变量执行 unlock操作之前，必须把变量值同步回主内存。</li><li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li></ul><p>对前面的线程不安全示例中的 cnt 变量使用 volatile 修饰，不能解决线程不安全问题，因为 volatile 并不能保证操作的原子性。</p><h3 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3.有序性"></a>3.有序性</h3><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p><p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p><h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>上面提及了可以使用volatile 和synchronized 来保证有序性。除此之外，JVM还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p><h3 id="1、单一线程原则"><a href="#1、单一线程原则" class="headerlink" title="1、单一线程原则"></a>1、单一线程原则</h3><blockquote><p>Single Thread rule</p></blockquote><p>在一个线程内，在程序前面的操作先行发生于后面的操作。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9lehkzaej20990830sw.jpg" alt=""></p><h3 id="2、管程锁定规则"><a href="#2、管程锁定规则" class="headerlink" title="2、管程锁定规则"></a>2、管程锁定规则</h3><blockquote><p>Monitor Lock Rule</p></blockquote><p>一个unlock 操作先行发生于后面对同一个锁的lock操作。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9log0fynj20hc09v0t5.jpg" alt=""></p><h3 id="3、volatile变量规则"><a href="#3、volatile变量规则" class="headerlink" title="3、volatile变量规则"></a>3、volatile变量规则</h3><blockquote><p>Volatile Variable Rule</p></blockquote><p>对于一个volatile变量的写操作先行发生于后面对这个变量的读操作。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9lwdisswj20kb0aa0ta.jpg" alt=""></p><h3 id="4、线程启动规则"><a href="#4、线程启动规则" class="headerlink" title="4、线程启动规则"></a>4、线程启动规则</h3><blockquote><p>Thread Start Rule</p></blockquote><p>Thread 对象的start()方法调用先行发生于此线程的每一个动作。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9mfncm5vj20gw0910t3.jpg" alt=""></p><h3 id="5、线程加入规则"><a href="#5、线程加入规则" class="headerlink" title="5、线程加入规则"></a>5、线程加入规则</h3><blockquote><p>Thread Join Rule</p></blockquote><p>Thread 对象的结束先行发生于join()方法返回。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9mgq3h0zj20h708m0t4.jpg" alt=""></p><h3 id="6、线程中断规则"><a href="#6、线程中断规则" class="headerlink" title="6、线程中断规则"></a>6、线程中断规则</h3><blockquote><p>Thread Interruption Rule</p></blockquote><p>对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过interrupted()方法检测是否有中断发生。</p><h3 id="7、对象终结规则"><a href="#7、对象终结规则" class="headerlink" title="7、对象终结规则"></a>7、对象终结规则</h3><blockquote><p>Fiinalizer Rule</p></blockquote><p>一个对象的初始化完成(构造函数执行结束) 先行发生于它的finalize() 方法的开始。</p><h3 id="8、传递性"><a href="#8、传递性" class="headerlink" title="8、传递性"></a>8、传递性</h3><blockquote><p>Transitivity</p></blockquote><p>如果操作A 先行发生于操作B，操作B线程先行发生于操作C，那么操作A先行发生于操作C。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。</p><p>线程安全有以下几种实现方式：</p><h2 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h2><p>不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p><p>不可变的类型：</p><ul><li>final关键字修饰的基本数据类型</li><li>String</li><li>枚举类型</li><li>Number部分子类，如Long 和 Double 等数值包装类型，BigInteger 和BigDecimal等大数据类型。但同为Number的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li></ul><p>对于集合类型，可以使用 Collections.unmodifiableXXX()方法来获取一个不可变的集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class ImmutableExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class="line">        unmodifiableMap.put(&quot;a&quot;, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class="line">    at java.util.Collections$UnmodifiableMap.put(Collections.java:1457)</span><br><span class="line">    at ImmutableExample.main(ImmutableExample.java:9)</span><br></pre></td></tr></table></figure><p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="互斥同步-1"><a href="#互斥同步-1" class="headerlink" title="互斥同步"></a>互斥同步</h2><p>synchronized 和 ReentrantLock</p><h2 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h2><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也成为阻塞同步。</p><p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题，无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><h3 id="1、CAS"><a href="#1、CAS" class="headerlink" title="1、CAS"></a>1、CAS</h3><p>随着硬件指令集的发展，我们可以使用基于冲突检测乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那么操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。这种乐观的并发策略许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p><p>乐观锁需要操作和冲突检测这两个步骤具有原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。CAS指令需要有3个操作数，分别是内存地址V、就的预期值A和新值B。当执行操作时，只有V的值等于A，才将V的值更新为B。</p><h3 id="2、AtomicInteger"><a href="#2、AtomicInteger" class="headerlink" title="2、AtomicInteger"></a>2、AtomicInteger</h3><p>J..U.C 包里面的整数原子类 AtomicInteger的方法调用了Unsafe类的CAS操作。</p><p>以下代码使用了 AtomicInteger 执行了自增的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private AtomicInteger cnt = new AtomicInteger();</span><br><span class="line"></span><br><span class="line">public void add() &#123;</span><br><span class="line">    cnt.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码是incrementAndGet()的源码，它调用了Unsafe 的getAndAddint()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final int incrementAndGet() &#123;</span><br><span class="line">    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p><p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public final int getAndAddInt(Object var1, long var2, int var4) &#123;</span><br><span class="line">    int var5;</span><br><span class="line">    do &#123;</span><br><span class="line">        var5 = this.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    return var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、ABA"><a href="#3、ABA" class="headerlink" title="3、ABA"></a>3、ABA</h3><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p><h2 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h2><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><h3 id="1、栈封闭"><a href="#1、栈封闭" class="headerlink" title="1、栈封闭"></a>1、栈封闭</h3><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StackClosedExample &#123;</span><br><span class="line">    public void add100() &#123;</span><br><span class="line">        int cnt = 0;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    StackClosedExample example = new StackClosedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">100</span><br><span class="line">100</span><br></pre></td></tr></table></figure></p><h3 id="2、线程本地存储-Thread-Local-Storage"><a href="#2、线程本地存储-Thread-Local-Storage" class="headerlink" title="2、线程本地存储(Thread Local Storage)"></a>2、线程本地存储(Thread Local Storage)</h3><p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这核心共享数据是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不会出现数据争用的问题。</p><p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式（如“生产者-消费者”模式）都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p><p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p><p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadLocalExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ThreadLocal threadLocal = new ThreadLocal();</span><br><span class="line">        Thread thread1 = new Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(1);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = new Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(2);</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>为了理解ThreadLocal，先看以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadLocalExample1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ThreadLocal threadLocal1 = new ThreadLocal();</span><br><span class="line">        ThreadLocal threadLocal2 = new ThreadLocal();</span><br><span class="line">        Thread thread1 = new Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(1);</span><br><span class="line">            threadLocal2.set(1);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = new Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(2);</span><br><span class="line">            threadLocal2.set(2);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它所对应的底层结构图为：<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz9o2fs2cpj20mb0bw0sq.jpg" alt=""></p><p>每个Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* ThreadLocal values pertaining to this thread. This map is maintained</span><br><span class="line"> * by the ThreadLocal class. */</span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure></p><p>当调用一个 ThreadLocal 的set(T Value)方法时，先得到当前线程的ThreadLocalMap对象，然后将ThreadLocal-&gt;value 键值对插入到该Map中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null)</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    else</span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">get() 方法类似。</span><br><span class="line"></span><br><span class="line">public T get() &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。</p><p>在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p><h3 id="3、可重入代码-Reentrant-Code"><a href="#3、可重入代码-Reentrant-Code" class="headerlink" title="3、可重入代码(Reentrant Code)"></a>3、可重入代码(Reentrant Code)</h3><p>这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。</p><p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p><h1 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h1><p>这里的锁优化主要是指JVM对synchronized 的优化。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>互斥同步进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</p><p>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用CPU时间，它只使用于共享数据的锁定状态很短的场景。</p><p>在JDK1.6中引用了自适应的自旋锁，自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p><p>锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其他线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p><p>对于一些看起来没有加锁的代码，其实隐式地加了很多锁，例如下面的字符串拼接代码就隐式加了锁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">    return s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>String一个不可变的类，编译器会对String的拼接自动优化。在JDK 1.5之前，会转化为 StringBuffer对象的连续append()操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    sb.append(s3);</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每个append()方法中都有一个同步块，虚拟机观察变量sb，很快会发现它的动态作用域被限制在 concatString()方法内部。也就是说，sb的所有引用永远不会逃逸到concatString()方法外，其他线程无法访问到它，因此可以进行消除。</p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>如果一系列的连续操作都对同一个对象反复加锁和频繁的加锁操作就会导致性能损耗。</p><p>上一节的示例代码中连续的 append() 方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。对于上一节的示例代码就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，这样只需要加锁一次就可以了。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>顾名思义，轻量级锁是相对于重量级锁而言的。使用轻量级锁时，不需要申请互斥量，仅仅将Mark Word中的部分字节CAS更新指向线程栈中的Lock Record，如果更新成功，则轻量级锁获取成功，记录锁状态为轻量级锁；否则，说明已经有线程获得了轻量级锁，目前发生了锁竞争（不适合继续使用轻量级锁），接下来膨胀为重量级锁。</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>轻量级锁每次申请、释放锁都至少需要一次CAS，但偏向锁只有初始化时需要一次CAS。<br>“偏向”的意思是，偏向锁假定将来只有第一个申请锁的线程会使用锁（不会有任何线程再来申请锁），因此，只需要在Mark Word中CAS记录owner（本质上也是更新，但初始值为空），如果记录成功，则偏向锁获取成功，记录锁状态为偏向锁，以后当前线程等于owner就可以零成本的直接获得锁；否则，说明有其他线程竞争，膨胀为轻量级锁。</p><h1 id="多线程开发良好的实践"><a href="#多线程开发良好的实践" class="headerlink" title="多线程开发良好的实践"></a>多线程开发良好的实践</h1><ul><li>给线程起个有意义的名字，这样方便找BUG。</li><li>缩小同步范围，从而减少锁争用，例如对于synchronized，应该尽量使用同步块而不是同步方法。</li><li>多用同步工具少用wait()和notify()，首先，CountDownLatch,CyclicBarrier,Semaphore 和 Exchanger这些同步类简化了编码操作，而用wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的JDK中还会不断优化和完善。</li><li>使用BlockingQueue 实现生产者消费者问题。</li><li>多用并发集合少用同步集合，例如应该使用ConcurrentHashMap 而不是Hashtable。</li><li>使用本地变量和不可变类来保证线程安全。</li><li>使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。</li></ul>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/01/11/Java容器/" rel="next" title="Java容器">                <i class="fa fa-chevron-left"></i> Java容器              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/01/22/Java虚拟机/" rel="prev" title="Java 虚拟机">                Java 虚拟机 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#线程状态转换"><span class="nav-number">1.</span> <span class="nav-text">线程状态转换</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#新建（New）"><span class="nav-number">1.1.</span> <span class="nav-text">新建（New）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#可运行（Runnable）"><span class="nav-number">1.2.</span> <span class="nav-text">可运行（Runnable）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#阻塞（Blocking）"><span class="nav-number">1.3.</span> <span class="nav-text">阻塞（Blocking）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#无期限等待（Waiting）"><span class="nav-number">1.4.</span> <span class="nav-text">无期限等待（Waiting）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#限期等待（Timed-Waiting）"><span class="nav-number">1.5.</span> <span class="nav-text">限期等待（Timed Waiting）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#死亡（Terminated）"><span class="nav-number">1.6.</span> <span class="nav-text">死亡（Terminated）</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#使用线程"><span class="nav-number">2.</span> <span class="nav-text">使用线程</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#实现-RUnnable-接口"><span class="nav-number">2.1.</span> <span class="nav-text">实现 RUnnable 接口</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#实现-Callable-接口"><span class="nav-number">2.2.</span> <span class="nav-text">实现 Callable 接口</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#继承-Thread-类"><span class="nav-number">2.3.</span> <span class="nav-text">继承 Thread 类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#实现接口-VS-继承-Thread"><span class="nav-number">2.4.</span> <span class="nav-text">实现接口 VS 继承 Thread</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#基础线程机制"><span class="nav-number">3.</span> <span class="nav-text">基础线程机制</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Executor"><span class="nav-number">3.1.</span> <span class="nav-text">Executor</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Daemon"><span class="nav-number">3.2.</span> <span class="nav-text">Daemon</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Sleep"><span class="nav-number">3.3.</span> <span class="nav-text">Sleep()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#yield"><span class="nav-number">3.4.</span> <span class="nav-text">yield()</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#中断"><span class="nav-number">4.</span> <span class="nav-text">中断</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#InterruptedException"><span class="nav-number">4.1.</span> <span class="nav-text">InterruptedException</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#interrupted"><span class="nav-number">4.2.</span> <span class="nav-text">interrupted()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Executor的中断操作"><span class="nav-number">4.3.</span> <span class="nav-text">Executor的中断操作</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#互斥同步"><span class="nav-number">5.</span> <span class="nav-text">互斥同步</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#synchronized"><span class="nav-number">5.1.</span> <span class="nav-text">synchronized</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ReentrantLock"><span class="nav-number">5.2.</span> <span class="nav-text">ReentrantLock</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#比较"><span class="nav-number">5.3.</span> <span class="nav-text">比较</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#使用选择"><span class="nav-number">5.4.</span> <span class="nav-text">使用选择</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#线程之间的协作"><span class="nav-number">6.</span> <span class="nav-text">线程之间的协作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#join"><span class="nav-number">6.1.</span> <span class="nav-text">join()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#wait-notify-notifyAll"><span class="nav-number">6.2.</span> <span class="nav-text">wait() notify() notifyAll()</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#wait-和-sleep-的区别"><span class="nav-number">6.2.1.</span> <span class="nav-text">wait() 和 sleep() 的区别</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#await-signal-signalAll"><span class="nav-number">6.3.</span> <span class="nav-text">await()  signal()  signalAll()</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#J-U-C-AQS"><span class="nav-number">7.</span> <span class="nav-text">J.U.C - AQS</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#CountdownLatch"><span class="nav-number">7.1.</span> <span class="nav-text">CountdownLatch</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CyclicBarrier"><span class="nav-number">7.2.</span> <span class="nav-text">CyclicBarrier</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Semaphore"><span class="nav-number">7.3.</span> <span class="nav-text">Semaphore</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#J-U-C-其它组件"><span class="nav-number">8.</span> <span class="nav-text">J.U.C - 其它组件</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#FutureTask"><span class="nav-number">8.1.</span> <span class="nav-text">FutureTask</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#BlockingQueue"><span class="nav-number">8.2.</span> <span class="nav-text">BlockingQueue</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ForkJoin"><span class="nav-number">8.3.</span> <span class="nav-text">ForkJoin</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#线程不安全示例"><span class="nav-number">9.</span> <span class="nav-text">线程不安全示例</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Java-内存模型"><span class="nav-number">10.</span> <span class="nav-text">Java 内存模型</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#主内存与工作内存"><span class="nav-number">10.1.</span> <span class="nav-text">主内存与工作内存</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#内存间交互操作"><span class="nav-number">10.2.</span> <span class="nav-text">内存间交互操作</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#内存模型三大特性"><span class="nav-number">10.3.</span> <span class="nav-text">内存模型三大特性</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-原子性"><span class="nav-number">10.3.1.</span> <span class="nav-text">1.原子性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-可见性"><span class="nav-number">10.3.2.</span> <span class="nav-text">2.可见性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-有序性"><span class="nav-number">10.3.3.</span> <span class="nav-text">3.有序性</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#先行发生原则"><span class="nav-number">10.4.</span> <span class="nav-text">先行发生原则</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、单一线程原则"><span class="nav-number">10.4.1.</span> <span class="nav-text">1、单一线程原则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、管程锁定规则"><span class="nav-number">10.4.2.</span> <span class="nav-text">2、管程锁定规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、volatile变量规则"><span class="nav-number">10.4.3.</span> <span class="nav-text">3、volatile变量规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4、线程启动规则"><span class="nav-number">10.4.4.</span> <span class="nav-text">4、线程启动规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5、线程加入规则"><span class="nav-number">10.4.5.</span> <span class="nav-text">5、线程加入规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6、线程中断规则"><span class="nav-number">10.4.6.</span> <span class="nav-text">6、线程中断规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7、对象终结规则"><span class="nav-number">10.4.7.</span> <span class="nav-text">7、对象终结规则</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#8、传递性"><span class="nav-number">10.4.8.</span> <span class="nav-text">8、传递性</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#线程安全"><span class="nav-number">11.</span> <span class="nav-text">线程安全</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#不可变"><span class="nav-number">11.1.</span> <span class="nav-text">不可变</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#互斥同步-1"><span class="nav-number">11.2.</span> <span class="nav-text">互斥同步</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#非阻塞同步"><span class="nav-number">11.3.</span> <span class="nav-text">非阻塞同步</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、CAS"><span class="nav-number">11.3.1.</span> <span class="nav-text">1、CAS</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、AtomicInteger"><span class="nav-number">11.3.2.</span> <span class="nav-text">2、AtomicInteger</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、ABA"><span class="nav-number">11.3.3.</span> <span class="nav-text">3、ABA</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#无同步方案"><span class="nav-number">11.4.</span> <span class="nav-text">无同步方案</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、栈封闭"><span class="nav-number">11.4.1.</span> <span class="nav-text">1、栈封闭</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、线程本地存储-Thread-Local-Storage"><span class="nav-number">11.4.2.</span> <span class="nav-text">2、线程本地存储(Thread Local Storage)</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、可重入代码-Reentrant-Code"><span class="nav-number">11.4.3.</span> <span class="nav-text">3、可重入代码(Reentrant Code)</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#锁优化"><span class="nav-number">12.</span> <span class="nav-text">锁优化</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#自旋锁"><span class="nav-number">12.1.</span> <span class="nav-text">自旋锁</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#锁消除"><span class="nav-number">12.2.</span> <span class="nav-text">锁消除</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#锁粗化"><span class="nav-number">12.3.</span> <span class="nav-text">锁粗化</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#轻量级锁"><span class="nav-number">12.4.</span> <span class="nav-text">轻量级锁</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#偏向锁"><span class="nav-number">12.5.</span> <span class="nav-text">偏向锁</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#多线程开发良好的实践"><span class="nav-number">13.</span> <span class="nav-text">多线程开发良好的实践</span></a></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常见面试题</title>
      <link href="/2019/10/18/Java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/10/18/Java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Java," /><meta name="keywords" content="Java"><meta property="og:type" content="article"><meta property="og:title" content="Java常见面试题"><meta property="og:url" content="http://yoursite.com/2018/11/29/Java常见面试题/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxpasjv2k8j218g0p0e81.jpg"><meta property="og:updated_time" content="2018-11-29T15:07:11.628Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java常见面试题"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fxpasjv2k8j218g0p0e81.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/11/29/Java常见面试题/"/>  <title>Java常见面试题 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/11/29/Java常见面试题/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java常见面试题</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-11-29T22:18:17+08:00">                2018-11-29              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2018-11-29T23:07:11+08:00" content="2018-11-29">      2018-11-29    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fxpasjv2k8j218g0p0e81.jpg" alt=""><br><a id="more"></a></p><h1 id="1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><a href="#1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？" class="headerlink" title="1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"></a>1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h1><p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。<br>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p><h1 id="2、JDK和JRE的区别是什么？"><a href="#2、JDK和JRE的区别是什么？" class="headerlink" title="2、JDK和JRE的区别是什么？"></a>2、JDK和JRE的区别是什么？</h1><p>Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。<br>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p><h1 id="3、”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#3、”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title="3、”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？"></a>3、”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</h1><p>“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。<br>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。<br>java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。</p><h1 id="4、是否可以在static环境中访问非static变量？"><a href="#4、是否可以在static环境中访问非static变量？" class="headerlink" title="4、是否可以在static环境中访问非static变量？"></a>4、是否可以在static环境中访问非static变量？</h1><p>因为静态的成员属于类，随着类的加载而加载到静态方法区内存，当类加载时，此时不一定有实例创建，没有实例，就不可以访问非静态的成员。</p><h1 id="5、Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#5、Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="5、Java支持的数据类型有哪些？什么是自动拆装箱？"></a>5、Java支持的数据类型有哪些？什么是自动拆装箱？</h1><p>Java支持8种基本数据类型：byte,char,short,int,long,boolean,double,float。jdk1.5后可以自动实现基本数据类型的装箱和拆箱。装箱是指，将基本数据转化成对象。转化为对象可以方便的操作数据。利用面向对象的方法方便的实现对数据的操作。拆箱就是装箱的逆过程。</p><h1 id="6、Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？"><a href="#6、Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？" class="headerlink" title="6、Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？"></a>6、Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？</h1><p>方法重写的原则：<br>1、重写方法的方法名称、参数列表必须与原方法的相同，返回类型可以相同也可以是原类型的子类型<br>2、重写方法不能比原方法访问性差（即访问权限不允许缩小）。<br>3、重写方法不能比原方法抛出更多的异常。<br>4、被重写的方法不能是final类型，因为final修饰的方法是无法重写的。<br>5、被重写的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重写。<br>6、被重写的方法不能为static。如果父类中的方法为静态的，而子类中的方法不是静态的，但是两个方法除了这一点外其他都满足重写条件，那么会发生编译错误；反之亦然。即使父类和子类中的方法都是静态的，并且满足重写条件，但是仍然不会发生重写，因为静态方法是在编译的时候把静态方法和类的引用类型进行匹配。<br>7、重写是发生在运行时的，因为编译期编译器不知道并且没办法确定该去调用哪个方法，JVM会在代码运行的时候作出决定。</p><p>方法重载的原则：<br>1、方法名称必须相同。<br>2、参数列表必须不同（个数不同、或类型不同、参数类型排列顺序不同等）。<br>3、方法的返回类型可以相同也可以不相同。<br>4、仅仅返回类型不同不足以成为方法的重载。<br>5、重载是发生在编译时的，因为编译器可以根据参数的类型来选择使用哪个方法。</p><p>重写和重载的不同：<br>1、方法重写要求参数列表必须一致，而方法重载要求参数列表必须不一致。<br>2、方法重写要求返回类型必须一致(或为其子类型)，方法重载对此没有要求。<br>3、方法重写只能用于子类重写父类的方法，方法重载用于同一个类中的所有方法。<br>4、方法重写对方法的访问权限和抛出的异常有特殊的要求，而方法重载在这方面没有任何限制。<br>5、父类的一个方法只能被子类重写一次，而一个方法可以在所有的类中可以被重载多次。<br>6、重载是编译时多态，重写是运行时多态。</p><h1 id="7、Java中，什么是构造方法？什么是构造方法重载？"><a href="#7、Java中，什么是构造方法？什么是构造方法重载？" class="headerlink" title="7、Java中，什么是构造方法？什么是构造方法重载？"></a>7、Java中，什么是构造方法？什么是构造方法重载？</h1><p>当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。<br>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。</p><h1 id="8、Java支持多继承么？"><a href="#8、Java支持多继承么？" class="headerlink" title="8、Java支持多继承么？"></a>8、Java支持多继承么？</h1><p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p><h1 id="9、接口和抽象类的区别是什么？"><a href="#9、接口和抽象类的区别是什么？" class="headerlink" title="9、接口和抽象类的区别是什么？"></a>9、接口和抽象类的区别是什么？</h1><p>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范</p><h1 id="10、什么是值传递和引用传递？"><a href="#10、什么是值传递和引用传递？" class="headerlink" title="10、什么是值传递和引用传递？"></a>10、什么是值传递和引用传递？</h1><p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.<br>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。<br>一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递</p><h1 id="11、进程和线程的区别是什么？"><a href="#11、进程和线程的区别是什么？" class="headerlink" title="11、进程和线程的区别是什么？"></a>11、进程和线程的区别是什么？</h1><p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。<br>线程与进程的区别归纳：<br>a.地址空间和其它资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。<br>b.通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。<br>c.调度和切换：线程上下文切换比进程上下文切换要快得多。<br>d.在多线程OS中，进程不是一个可执行的实体。</p><h1 id="12、创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#12、创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="12、创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a>12、创建线程有几种不同的方式？你喜欢哪一种？为什么？</h1><p>有4种方式可以用来创建线程：<br>继承Thread类<br>实现Runnable接口<br>应用程序可以使用Executor框架来创建线程池<br>实现Callable接口</p><p>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。<br>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p><h1 id="13、概括的解释下线程的几种可用状态。"><a href="#13、概括的解释下线程的几种可用状态。" class="headerlink" title="13、概括的解释下线程的几种可用状态。"></a>13、概括的解释下线程的几种可用状态。</h1><ol><li>新建( new )：新创建了一个线程对象。</li><li>可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。</li><li>运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。</li><li>阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：<br>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。<br>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。<br>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。</li><li>死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</li></ol><h1 id="14、同步方法和同步代码块的区别是什么？"><a href="#14、同步方法和同步代码块的区别是什么？" class="headerlink" title="14、同步方法和同步代码块的区别是什么？"></a>14、同步方法和同步代码块的区别是什么？</h1><p>同步方法默认用this或者当前类class对象作为锁；<br>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；<br>同步方法使用关键字 synchronized修饰方法，而同步代码块主要是修饰需要进行同步的代码，用   synchronized（object）{代码内容}进行修饰；</p><h1 id="15、什么是死锁-deadlock-？"><a href="#15、什么是死锁-deadlock-？" class="headerlink" title="15、什么是死锁(deadlock)？"></a>15、什么是死锁(deadlock)？</h1><p>所谓死锁是指多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。死锁产生的4个必要条件：<br>互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。<br>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程自己来释放（只能是主动释放)。<br>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。<br>循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。</p><h1 id="16、如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#16、如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="16、如何确保N个线程可以访问N个资源同时又不导致死锁？"></a>16、如何确保N个线程可以访问N个资源同时又不导致死锁？</h1><p>使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p><h1 id="17、Java集合类框架的基本接口有哪些？"><a href="#17、Java集合类框架的基本接口有哪些？" class="headerlink" title="17、Java集合类框架的基本接口有哪些？"></a>17、Java集合类框架的基本接口有哪些？</h1><p>集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。<br>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：<br>Collection：代表一组对象，每一个对象都是它的子元素。<br>Set：不包含重复元素的Collection。<br>List：有顺序的collection，并且可以包含重复元素。<br>Map：可以把键(key)映射到值(value)的对象，键不能重复。</p><h1 id="18、什么是迭代器-Iterator-？"><a href="#18、什么是迭代器-Iterator-？" class="headerlink" title="18、什么是迭代器(Iterator)？"></a>18、什么是迭代器(Iterator)？</h1><p>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的<br>迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的<br>remove(Object Obj)删除，可以通过迭代器的remove()方法删除。<br>（当不是很清楚list的内部结构时，便使用迭代器进行循环操作）</p><h1 id="19、Iterator和ListIterator的区别是什么？"><a href="#19、Iterator和ListIterator的区别是什么？" class="headerlink" title="19、Iterator和ListIterator的区别是什么？"></a>19、Iterator和ListIterator的区别是什么？</h1><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。<br>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。<br>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p><h1 id="20、Java中的HashMap的工作原理是什么？"><a href="#20、Java中的HashMap的工作原理是什么？" class="headerlink" title="20、Java中的HashMap的工作原理是什么？"></a>20、Java中的HashMap的工作原理是什么？</h1><p>Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面试如何回答HashMap的取值</span><br><span class="line">https://blog.csdn.net/anneqiqi/article/details/51584493</span><br></pre></td></tr></table></figure><h1 id="21、hashCode-和equals-方法的重要性体现在什么地方？"><a href="#21、hashCode-和equals-方法的重要性体现在什么地方？" class="headerlink" title="21、hashCode()和equals()方法的重要性体现在什么地方？"></a>21、hashCode()和equals()方法的重要性体现在什么地方？</h1><p>Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。</p><h1 id="22、HashMap和Hashtable有什么区别？"><a href="#22、HashMap和Hashtable有什么区别？" class="headerlink" title="22、HashMap和Hashtable有什么区别？"></a>22、HashMap和Hashtable有什么区别？</h1><p>HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：<br>HashMap允许键和值是null，而Hashtable不允许键或者值是null。<br>Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。<br>HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。<br>一般认为Hashtable是一个遗留的类。</p><h1 id="23、数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#23、数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="23、数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"></a>23、数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</h1><p>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。<br>Array大小是固定的，ArrayList的大小是动态变化的。<br>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。<br>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。</p><h1 id="24、ArrayList和LinkedList有什么区别？"><a href="#24、ArrayList和LinkedList有什么区别？" class="headerlink" title="24、ArrayList和LinkedList有什么区别？"></a>24、ArrayList和LinkedList有什么区别？</h1><p>ArrayList的实现用的是数组，LinkedList是基于链表，ArrayList适合查找，LinkedList适合增删</p><p>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。<br>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。<br>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。<br>也可以参考ArrayList vs. LinkedList。</p><h1 id="25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？"><a href="#25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？" class="headerlink" title="25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？"></a>25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？</h1><p>垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行。<br>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。</p><h1 id="26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"><a href="#26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？" class="headerlink" title="26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"></a>26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</h1><p>不会，在下一个垃圾回收周期中，这个对象将是可被回收的。</p><h1 id="27、Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space"><a href="#27、Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space" class="headerlink" title="27、Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?"></a>27、Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?</h1><p>JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。<br>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。</p><p>永久代是用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类，永久代中一般包含：<br>类的方法(字节码…)<br>类名(Sring对象)<br>.class文件读到的常量信息<br>class对象相关的对象列表和类型列表 (e.g., 方法对象的array).<br>JVM创建的内部对象<br>JIT编译器优化用的信息</p><h1 id="28、什么是Servlet？"><a href="#28、什么是Servlet？" class="headerlink" title="28、什么是Servlet？"></a>28、什么是Servlet？</h1><p>Servlet是用来处理客户端请求并产生动态网页内容的Java类。Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息。</p><h1 id="29、doGet-方法和doPost-方法有什么区别？"><a href="#29、doGet-方法和doPost-方法有什么区别？" class="headerlink" title="29、doGet()方法和doPost()方法有什么区别？"></a>29、doGet()方法和doPost()方法有什么区别？</h1><p>doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。<br>doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。</p><h1 id="30、HTTP响应的结构是怎么样的？"><a href="#30、HTTP响应的结构是怎么样的？" class="headerlink" title="30、HTTP响应的结构是怎么样的？"></a>30、HTTP响应的结构是怎么样的？</h1><p>HTTP响应由三个部分组成：<br>状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果Servlet没有返回状态码，默认会返回成功的状态码HttpServletResponse.SC_OK。<br>HTTP头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式。如何在Serlet中检索HTTP的头部看这里。<br>主体(Body)：它包含了响应的内容。它可以包含HTML代码，图片，等等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的。</p><h1 id="31、什么是cookie？session和cookie有什么区别？"><a href="#31、什么是cookie？session和cookie有什么区别？" class="headerlink" title="31、什么是cookie？session和cookie有什么区别？"></a>31、什么是cookie？session和cookie有什么区别？</h1><p>cookie是Web服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个Web服务器存储cookie。以后浏览器在给特定的Web服务器发请求的时候，同时会发送所有为该服务器存储的cookie。下面列出了session和cookie的区别：<br>无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。<br>在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。</p><h1 id="32、sendRedirect-和forward-方法有什么区别？"><a href="#32、sendRedirect-和forward-方法有什么区别？" class="headerlink" title="32、sendRedirect()和forward()方法有什么区别？"></a>32、sendRedirect()和forward()方法有什么区别？</h1><p>forward是服务器内部的跳转，浏览器的地址栏不会发生变化，同时可以把request和response传递给后一个请求。sendRedirect()是浏览器方面的跳转，要发送两次请求，地址栏也会发生变化，同时request和response也会发生变化，重新生成新的对象。</p><h1 id="33、什么是URL编码和URL解码？"><a href="#33、什么是URL编码和URL解码？" class="headerlink" title="33、什么是URL编码和URL解码？"></a>33、什么是URL编码和URL解码？</h1><p>URL编码是负责把URL里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码。</p><h1 id="34、面向对象软件开发的优点有哪些？"><a href="#34、面向对象软件开发的优点有哪些？" class="headerlink" title="34、面向对象软件开发的优点有哪些？"></a>34、面向对象软件开发的优点有哪些？</h1><p>代码开发模块化，更易维护和修改。<br>代码复用。<br>增强代码的可靠性和灵活性。<br>增加代码的可理解性。<br>面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象。</p><h1 id="35、封装的定义和好处有哪些？"><a href="#35、封装的定义和好处有哪些？" class="headerlink" title="35、封装的定义和好处有哪些？"></a>35、封装的定义和好处有哪些？</h1><p>一是用private把类的细节与外界隔离起来，从而实现数据项和方法的隐藏，而要访问这些数据项和方法唯一的途径就是通过类本身，类才有资格调用它所拥有的资源（方法，数据项属性等等）。所以第一个好处就是数据的安全性提高了。</p><p>二是通过隐藏隔离，只允许外部对类做有限的访问，开发者可以自由的改变类的内部实现，而无需修改使用该类的那些程序。只要那些在类外部就能被调用的方法保持其外部特征不变，内部代码就可以自由改变，各取所需，利于分工。</p><p>三就是提高了代码的重用性，封装成工具类以后能够减少很多繁琐的步骤。</p><h1 id="36、多态的定义？"><a href="#36、多态的定义？" class="headerlink" title="36、多态的定义？"></a>36、多态的定义？</h1><p>多态产生的原因：函数的重载和函数覆盖<br>多态的表现：不同对象，调用相同函数结果不同；相同对象，调用相同函数名函数（参数列表返回值可能不一样）结果不同。<br>多态的作用：提高程序的可复用性；动态创建对象时，可以通过父类调用子类的方法（核心：涉及到反射的相关知识，大家可以查查资料）。</p><h1 id="37、继承的定义？"><a href="#37、继承的定义？" class="headerlink" title="37、继承的定义？"></a>37、继承的定义？</h1><p>继承是一种类与类之间的关系<br>利用一个已经存在的类，快速的创建新的类的机制<br>被继承的类称为父类/超类，继承者称为子类（得到继承的类为子类）<br>子类继承父类，拥有父类所有属性和方法</p><h1 id="38、抽象的定义？抽象和封装的不同点？"><a href="#38、抽象的定义？抽象和封装的不同点？" class="headerlink" title="38、抽象的定义？抽象和封装的不同点？"></a>38、抽象的定义？抽象和封装的不同点？</h1><p>就是把现实生活中的某一类东西提取出来，用程序代码表示，我们通常叫做类或者接口。抽象包括两个方面：一个是数据抽象，一个是过程抽象。数据抽象也就是对象的属性。过程抽象是对象的行为特征。<br>封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行封装隐藏。封装分为属性的封装和方法的封装。</p>          </div>                            <footer class="post-footer">              <div class="post-tags">                      <a href="/tags/Java/" rel="tag"># Java</a>                  </div>                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/09/19/JQUERY的基本使用方法/" rel="next" title="JQUERY的基本使用方法">                <i class="fa fa-chevron-left"></i> JQUERY的基本使用方法              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/12/09/计算机网络/" rel="prev" title="计算机网络常考面试题">                计算机网络常考面试题 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><span class="nav-number">1.</span> <span class="nav-text">1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#2、JDK和JRE的区别是什么？"><span class="nav-number">2.</span> <span class="nav-text">2、JDK和JRE的区别是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#3、”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><span class="nav-number">3.</span> <span class="nav-text">3、”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#4、是否可以在static环境中访问非static变量？"><span class="nav-number">4.</span> <span class="nav-text">4、是否可以在static环境中访问非static变量？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#5、Java支持的数据类型有哪些？什么是自动拆装箱？"><span class="nav-number">5.</span> <span class="nav-text">5、Java支持的数据类型有哪些？什么是自动拆装箱？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#6、Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？"><span class="nav-number">6.</span> <span class="nav-text">6、Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#7、Java中，什么是构造方法？什么是构造方法重载？"><span class="nav-number">7.</span> <span class="nav-text">7、Java中，什么是构造方法？什么是构造方法重载？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#8、Java支持多继承么？"><span class="nav-number">8.</span> <span class="nav-text">8、Java支持多继承么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#9、接口和抽象类的区别是什么？"><span class="nav-number">9.</span> <span class="nav-text">9、接口和抽象类的区别是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#10、什么是值传递和引用传递？"><span class="nav-number">10.</span> <span class="nav-text">10、什么是值传递和引用传递？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#11、进程和线程的区别是什么？"><span class="nav-number">11.</span> <span class="nav-text">11、进程和线程的区别是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#12、创建线程有几种不同的方式？你喜欢哪一种？为什么？"><span class="nav-number">12.</span> <span class="nav-text">12、创建线程有几种不同的方式？你喜欢哪一种？为什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#13、概括的解释下线程的几种可用状态。"><span class="nav-number">13.</span> <span class="nav-text">13、概括的解释下线程的几种可用状态。</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#14、同步方法和同步代码块的区别是什么？"><span class="nav-number">14.</span> <span class="nav-text">14、同步方法和同步代码块的区别是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#15、什么是死锁-deadlock-？"><span class="nav-number">15.</span> <span class="nav-text">15、什么是死锁(deadlock)？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#16、如何确保N个线程可以访问N个资源同时又不导致死锁？"><span class="nav-number">16.</span> <span class="nav-text">16、如何确保N个线程可以访问N个资源同时又不导致死锁？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#17、Java集合类框架的基本接口有哪些？"><span class="nav-number">17.</span> <span class="nav-text">17、Java集合类框架的基本接口有哪些？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#18、什么是迭代器-Iterator-？"><span class="nav-number">18.</span> <span class="nav-text">18、什么是迭代器(Iterator)？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#19、Iterator和ListIterator的区别是什么？"><span class="nav-number">19.</span> <span class="nav-text">19、Iterator和ListIterator的区别是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#20、Java中的HashMap的工作原理是什么？"><span class="nav-number">20.</span> <span class="nav-text">20、Java中的HashMap的工作原理是什么？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#21、hashCode-和equals-方法的重要性体现在什么地方？"><span class="nav-number">21.</span> <span class="nav-text">21、hashCode()和equals()方法的重要性体现在什么地方？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#22、HashMap和Hashtable有什么区别？"><span class="nav-number">22.</span> <span class="nav-text">22、HashMap和Hashtable有什么区别？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#23、数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><span class="nav-number">23.</span> <span class="nav-text">23、数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#24、ArrayList和LinkedList有什么区别？"><span class="nav-number">24.</span> <span class="nav-text">24、ArrayList和LinkedList有什么区别？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？"><span class="nav-number">25.</span> <span class="nav-text">25、Java中垃圾回收有什么目的？什么时候进行垃圾回收？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"><span class="nav-number">26.</span> <span class="nav-text">26、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#27、Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space"><span class="nav-number">27.</span> <span class="nav-text">27、Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#28、什么是Servlet？"><span class="nav-number">28.</span> <span class="nav-text">28、什么是Servlet？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#29、doGet-方法和doPost-方法有什么区别？"><span class="nav-number">29.</span> <span class="nav-text">29、doGet()方法和doPost()方法有什么区别？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#30、HTTP响应的结构是怎么样的？"><span class="nav-number">30.</span> <span class="nav-text">30、HTTP响应的结构是怎么样的？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#31、什么是cookie？session和cookie有什么区别？"><span class="nav-number">31.</span> <span class="nav-text">31、什么是cookie？session和cookie有什么区别？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#32、sendRedirect-和forward-方法有什么区别？"><span class="nav-number">32.</span> <span class="nav-text">32、sendRedirect()和forward()方法有什么区别？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#33、什么是URL编码和URL解码？"><span class="nav-number">33.</span> <span class="nav-text">33、什么是URL编码和URL解码？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#34、面向对象软件开发的优点有哪些？"><span class="nav-number">34.</span> <span class="nav-text">34、面向对象软件开发的优点有哪些？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#35、封装的定义和好处有哪些？"><span class="nav-number">35.</span> <span class="nav-text">35、封装的定义和好处有哪些？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#36、多态的定义？"><span class="nav-number">36.</span> <span class="nav-text">36、多态的定义？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#37、继承的定义？"><span class="nav-number">37.</span> <span class="nav-text">37、继承的定义？</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#38、抽象的定义？抽象和封装的不同点？"><span class="nav-number">38.</span> <span class="nav-text">38、抽象的定义？抽象和封装的不同点？</span></a></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="/2019/10/18/Java%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/10/18/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Java容器"><meta property="og:url" content="http://yoursite.com/2019/01/11/Java容器/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz0ul0c6iej21o70j84em.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzm0dog0xj20oy0au0t1.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzm9mzml3j20ek07u0ss.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzmlvs5tqj208x0au0su.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1l0ygcvnj20i205j0sq.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1n6613s4j20kz0cy0t0.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1nxvqdxjj20lf0cb0t2.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz2o5346dnj20pr0ij0t3.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz2obcdnpej219g0k6myt.jpg"><meta property="og:updated_time" content="2019-01-11T13:22:38.282Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java容器"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fz0ul0c6iej21o70j84em.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/01/11/Java容器/"/>  <title>Java容器 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/01/11/Java容器/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java容器</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-01-11T21:22:26+08:00">                2019-01-11              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-01-11T21:22:38+08:00" content="2019-01-11">      2019-01-11    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz0ul0c6iej21o70j84em.jpg" alt=""><br><a id="more"></a></p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>Java 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzm0dog0xj20oy0au0t1.jpg" alt=""></p><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h3><ul><li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet查找的时间复杂度为O(1)，TreeSet则为O(logN)。</li><li>HashSet：基于哈希表的实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息。也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li><li>LinkedHashSet：具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</li></ul><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><ul><li>ArrayList：基于动态数组实现，支持随机访问。</li><li>Vector：和ArrayList类似，但它的线程安全的。</li><li>ListedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列</li></ul><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><ul><li>LinkedList：可以用它来实现双向队列。</li><li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzm9mzml3j20ek07u0ss.jpg" alt=""></p><ul><li>TreeMap：基于红黑树实现。</li><li>HashMap：基于哈希表实现。</li><li>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 COncurrentHashMap 引入了分段锁。</li><li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li></ul><h1 id="容器中的设计模式"><a href="#容器中的设计模式" class="headerlink" title="容器中的设计模式"></a>容器中的设计模式</h1><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzmlvs5tqj208x0au0su.jpg"></p><p>Collection 继承了 Iterable 接口，其中的 iterator() 方法能够产生一个 Iterator 对象，通过这个对象就可以迭代遍历 Collection 中的元素。</p><p>可以使用 foreach 方法来遍历实现了 Iterable 接口的聚合对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">for (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>　适配器就是一种适配中间件，它存在于不匹配的二者之间，用于连接二者，将不匹配变得匹配，简单点理解就是平常所见的转接头，转换器之类的存在。</p><p>java.util.Arrays#asList() 可以把数组类型转换为 List 类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SafeVarargs</span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span><br></pre></td></tr></table></figure></p><p>应该注意的是 asList() 的参数为泛型的变长参数，不能使用基本类型数组作为参数，只能使用相应的包装类型数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;1, 2, 3&#125;;</span><br><span class="line">List list = Arrays.asList(arr);</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"></span><br><span class="line">List list = Arrays.asList(1, 2, 3);</span><br></pre></td></tr></table></figure></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="1-概览"><a href="#1-概览" class="headerlink" title="1.概览"></a>1.概览</h3><p>实现了 RandomAccess 接口，因此支持随机访问。这是理所当然的，因为 ArrayList是基于数组实现的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p><strong>在多线程情况下是线程不安全的</strong><br>如果非要在多线程的环境下使用ArrayList，就需要保证它的线程安全性，通常有两种解决办法：第一，使用synchronized关键字；第二，可以用Collections类中的静态方法synchronizedList();对ArrayList进行调用即可。</p><p>数组的默认大小为 10。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br></pre></td></tr></table></figure></p><h3 id="2-扩容"><a href="#2-扩容" class="headerlink" title="2.扩容"></a>2.扩容</h3><p>添加元素时使用 ensureCapacityInternal() 方法保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量为 oldCapacity + （oldCapcity &gt;&gt; 1）,也就是旧容量的1.5倍。</p><p>扩容操作需要调用 Arrays.copyOf() 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h3><p>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看出 ArrayList 删除元素的代价是非常高的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4.序列化"></a>4.序列化</h3><p>ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。</p><p>保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure></p><p>ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">    throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    // Read in size, and any hidden stuff</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    // Read in capacity</span><br><span class="line">    s.readInt(); // ignored</span><br><span class="line"></span><br><span class="line">    if (size &gt; 0) &#123;</span><br><span class="line">        // be like clone(), allocate array based upon size not capacity</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        // Read in all elements in the proper order.</span><br><span class="line">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">    throws java.io.IOException&#123;</span><br><span class="line">    // Write out element count, and any hidden stuff</span><br><span class="line">    int expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    // Write out size as capacity for behavioural compatibility with clone()</span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    // Write out all elements in the proper order.</span><br><span class="line">    for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (modCount != expectedModCount) &#123;</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = new ArrayList();</span><br><span class="line">ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));</span><br><span class="line">oos.writeObject(list);</span><br></pre></td></tr></table></figure></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点：</strong></p><ul><li>ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快。</li><li>ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已。</li><li>根据下标遍历和访问元素，效率高。</li><li>可以自动扩容，默认为每次扩容为原来的1.5倍。</li></ul><p><strong>缺点：</strong></p><ul><li>插入和删除元素的效率不高。</li><li>根据元素下标查找元素需要遍历整个元素数组，效率不高。</li><li>线程不安全。</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><h3 id="1-同步"><a href="#1-同步" class="headerlink" title="1.同步"></a>1.同步</h3><p>它的实现与 ArrayList类似，但是使用了 synchronized 进行同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized boolean add(E e) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + 1);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public synchronized E get(int index) &#123;</span><br><span class="line">    if (index &gt;= elementCount)</span><br><span class="line">        throw new ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-与-ArrayList-的比较"><a href="#2-与-ArrayList-的比较" class="headerlink" title="2.与 ArrayList 的比较"></a>2.与 ArrayList 的比较</h3><ul><li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来操作。</li><li>Vector 每次扩容请求其大小的2倍空间，而 ArrayList 是1.5倍。</li></ul><h3 id="3-替代方案"><a href="#3-替代方案" class="headerlink" title="3.替代方案"></a>3.替代方案</h3><p>可以使用 Collections.synchronizedList()；得到一个线程安全的 ArrayList。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; synList = Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure></p><p>也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><h3 id="1-读写分离"><a href="#1-读写分离" class="headerlink" title="1.读写分离"></a>1.读写分离</h3><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p><p>写操作需要加锁，防止并发写入时导致写入数据丢失。</p><p>写操作结束之后需要把原始数组指向新的复制数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        int len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + 1);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        return true;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final void setArray(Object[] a) &#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private E get(Object[] a, int index) &#123;</span><br><span class="line">    return (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景，</p><p>但是CopyOnWriteArrayList 有其缺陷：</p><ul><li>内存占用： 在写操作时需要复制一个新的数组。使得内存占用为原来的两倍左右。</li><li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。<br>所以CopyOnWriteArrayList不适合内存敏感以及对实时性要求很高的场景。</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="1-概览-1"><a href="#1-概览-1" class="headerlink" title="1.概览"></a>1.概览</h3><p>基于双向链表实现，使用 Node 存储链表节点信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每个链表存储了 first 和 last 指针：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;E&gt; first;</span><br><span class="line">transient Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1l0ygcvnj20i205j0sq.jpg" alt=""></p><h3 id="2-与-ArrayList的比较"><a href="#2-与-ArrayList的比较" class="headerlink" title="2.与 ArrayList的比较"></a>2.与 ArrayList的比较</h3><ul><li>ArrayList 基于动态数组实现， LinkedList 基于双向链表实现；</li><li>ArrayList 支持随机访问，LinkedList 不支持 ；</li><li>LinkedList 在任意位置添加删除元素更快。</li></ul><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="1-存储结构"><a href="#1-存储结构" class="headerlink" title="1.存储结构"></a>1.存储结构</h3><p>内部包含一个 Entry 类型的数组 table。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Entry[] table;</span><br></pre></td></tr></table></figure></p><p>Entry 存储着键值对。它包含了四个字段，从next字段我们可以看出 Entry 是一个链表。即数组中的每一个位置被当成一个桶，一个桶存放一个链表。HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值相同的Entry。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1n6613s4j20kz0cy0t0.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    int hash;</span><br><span class="line"></span><br><span class="line">    Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final K getKey() &#123;</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final V getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final V setValue(V newValue) &#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final boolean equals(Object o) &#123;</span><br><span class="line">        if (!(o instanceof Map.Entry))</span><br><span class="line">            return false;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        if (k1 == k2 || (k1 != null &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            if (v1 == v2 || (v1 != null &amp;&amp; v1.equals(v2)))</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final int hashCode() &#123;</span><br><span class="line">        return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final String toString() &#123;</span><br><span class="line">        return getKey() + &quot;=&quot; + getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-拉链法的工作原理"><a href="#2-拉链法的工作原理" class="headerlink" title="2.拉链法的工作原理"></a>2.拉链法的工作原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;K1&quot;, &quot;V1&quot;);</span><br><span class="line">map.put(&quot;K2&quot;, &quot;V2&quot;);</span><br><span class="line">map.put(&quot;K3&quot;, &quot;V3&quot;);</span><br></pre></td></tr></table></figure><ul><li>新建一个 HashMap，默认大小为16；</li><li>插入 &lt;K1,V1&gt;键值对，先计算 K1 的hashCode 为115，使用除留余数法得到所在的桶下标 115%16=3；</li><li>插入 &lt;K2,v2&gt;键值对，先计算 K2 的hashCode 为118，使用除留余数法得到所在的桶下标 118%16=6；</li><li>插入 &lt;K3,V3&gt;键值对，先计算 K3 的hashCode 为118，使用除留余数法得到所在的桶下标 118%16=6；插在&lt;K2,V2&gt;前面。</li></ul><p>应该注意到链表的插入是以头插法方式进行的，例如上面的&lt;K3,V3&gt;不是插在&lt;K2,V2&gt;后面，而是插入在链表头部。查找需要分两步进行：</p><ul><li>计算键值对所在的桶；</li><li>在链表上顺序查找，时间复杂度显然和链表的长度成正比。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz1nxvqdxjj20lf0cb0t2.jpg" alt=""></p><h3 id="3-put操作"><a href="#3-put操作" class="headerlink" title="3.put操作"></a>3.put操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    if (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    // 键为 null 单独处理</span><br><span class="line">    if (key == null)</span><br><span class="line">        return putForNullKey(value);</span><br><span class="line">    int hash = hash(key);</span><br><span class="line">    // 确定桶下标</span><br><span class="line">    int i = indexFor(hash, table.length);</span><br><span class="line">    // 先找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value</span><br><span class="line">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(this);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    // 插入新键值对</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap 允许插入键为 null 的键值对。但是因为无法调用 null() 的hashCode() 方法。也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。HashMap使用第 0 个桶存放键为 null 的键值对。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private V putForNullKey(V value) &#123;</span><br><span class="line">    for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123;</span><br><span class="line">        if (e.key == null) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(this);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(0, null, value, 0);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</span><br><span class="line">        resize(2 * table.length);</span><br><span class="line">        hash = (null != key) ? hash(key) : 0;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void createEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    // 头插法，链表头部指向新的键值对</span><br><span class="line">    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line">Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">    value = v;</span><br><span class="line">    next = n;</span><br><span class="line">    key = k;</span><br><span class="line">    hash = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-确定桶下标"><a href="#4-确定桶下标" class="headerlink" title="4.确定桶下标"></a>4.确定桶下标</h3><p>很多操作都需要先对确定一个键值对所在的桶下标。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int hash = hash(key);</span><br><span class="line">int i = indexFor(hash,table.length);</span><br></pre></td></tr></table></figure></p><h4 id="4-1-计算-hash-值"><a href="#4-1-计算-hash-值" class="headerlink" title="4.1 计算 hash 值"></a>4.1 计算 hash 值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">final int hash(Object k) &#123;</span><br><span class="line">    int h = hashSeed;</span><br><span class="line">    if (0 != h &amp;&amp; k instanceof String) &#123;</span><br><span class="line">        return sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    // This function ensures that hashCodes that differ only by</span><br><span class="line">    // constant multiples at each bit position have a bounded</span><br><span class="line">    // number of collisions (approximately 8 at default load factor).</span><br><span class="line">    h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</span><br><span class="line">&#125;</span><br><span class="line">public final int hashCode() &#123;</span><br><span class="line">    return Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-取模"><a href="#4-2-取模" class="headerlink" title="4.2 取模"></a>4.2 取模</h4><p>确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123;</span><br><span class="line">    return h &amp; (length-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-扩容-基本原理"><a href="#5-扩容-基本原理" class="headerlink" title="5.扩容-基本原理"></a>5.扩容-基本原理</h3><p>设 HashMap 的table长度为 M，需要储存的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为N/M，因此平均查找次数的复杂度为 O（N/M）。</p><p>为了让查找的成本降低，应该尽可能的使得 N/M尽可能小，因此需要保证 M 尽可能大，也就是说table要尽可能大。HashMap采用动态扩容来根据当前的 N 值来调整M值，使得空间效率和时间效率都能得到保证。</p><p>和扩容相关的参数主要有：capacity、size、threshold 和 load_factor。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">capacity</td><td style="text-align:center">table 的容量大小，默认为16.需要主要的是capacity必须保证为2的n次方。</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">键值对数量</td></tr><tr><td style="text-align:center">threshold</td><td style="text-align:center">size的临界值，当size大于等于threshold就必须进行扩容操作</td></tr><tr><td style="text-align:center">loadFactor</td><td style="text-align:center">装载因子，table能够使用的比例，threshold = capacity * loadFactor。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 16;</span><br><span class="line"></span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line"></span><br><span class="line">transient Entry[] table;</span><br><span class="line"></span><br><span class="line">transient int size;</span><br><span class="line"></span><br><span class="line">int threshold;</span><br><span class="line"></span><br><span class="line">final float loadFactor;</span><br><span class="line"></span><br><span class="line">transient int modCount;</span><br></pre></td></tr></table></figure><p>从下面的添加元素代码中可以看出，当需要扩容时，令 capacity 为原来的两倍。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    if (size++ &gt;= threshold)</span><br><span class="line">        resize(2 * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void resize(int newCapacity) &#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    int oldCapacity = oldTable.length;</span><br><span class="line">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry[] newTable = new Entry[newCapacity];</span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (int)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void transfer(Entry[] newTable) &#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    int newCapacity = newTable.length;</span><br><span class="line">    for (int j = 0; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            src[j] = null;</span><br><span class="line">            do &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                int i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; while (e != null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-扩容-重新计算桶下标"><a href="#6-扩容-重新计算桶下标" class="headerlink" title="6.扩容-重新计算桶下标"></a>6.扩容-重新计算桶下标</h3><p>在进行扩容时，需要把键值对重新放到对应的桶上。HashMap 使用了一个特殊的机制，可以降低重新计算桶下标的操作。</p><p>假设原数组长度 capacity 为 16，扩容之后 new capacity 为 32：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">capacity     : 00010000</span><br><span class="line">new capacity : 00100000</span><br></pre></td></tr></table></figure></p><p>对于一个Key：</p><ul><li>它的哈希值如果在第 5 位上为 0，那么取模得到的结果和之前一样；</li><li>如果为 1，那么得到的结果为原来的结果 +16。</li></ul><h3 id="7-计算数组容量"><a href="#7-计算数组容量" class="headerlink" title="7.计算数组容量"></a>7.计算数组容量</h3><p>HashMap构造函数允许用户传入的容量不是2的n次方，因为它可以自动地将传入的容量转换为2的n次方。</p><h3 id="8-链表转红黑树"><a href="#8-链表转红黑树" class="headerlink" title="8.链表转红黑树"></a>8.链表转红黑树</h3><p>从 JDK1.8开始，一个桶存储的链表长度大于8时会将链表转换为红黑树。</p><h3 id="9-Fast-faill"><a href="#9-Fast-faill" class="headerlink" title="9.Fast-faill"></a>9.Fast-faill</h3><p>在使用迭代器的过程中如果HashMap被修改，那么<code>ConcurrentModificationException</code>将被抛出，也即Fast-faill策略。</p><p>当 HashMap的iterator()方法被调用时，会构造并返回一个新的 EntryIterator对象，并将 EntryIterator的expectedMadCount设置为HashMap的modCount(该变量记录了HashMap被修改的次数)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashIterator() &#123;</span><br><span class="line">  expectedModCount = modCount;</span><br><span class="line">  if (size &gt; 0) &#123; // advance to first entry</span><br><span class="line">  Entry[] t = table;</span><br><span class="line">  while (index &lt; t.length &amp;&amp; (next = t[index++]) == null)</span><br><span class="line">    ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在通过该 Iterator 的 next 方法访问下一个Entry时，他会先检查自己的 expectedModCount 与 HashMap 的modCount是否相等，如果不相等，说明 HashMap 被修改，直接抛出<code>ConcurrentModificationException</code>。该 Iterator的remove 方法也会做类似的检查。该异常的抛出意在提醒用户及早意识到线程安全的问题。</p><h3 id="10-与HashTable的比较"><a href="#10-与HashTable的比较" class="headerlink" title="10.与HashTable的比较"></a>10.与HashTable的比较</h3><ul><li>HashTable 使用 synchronized 来进行同步。</li><li>HashMap 可以插入键为 null 的Entry。</li><li>HashMap 的迭代器是 fail-fast 迭代器。</li><li>HashMap 不能保证随着时间的推移 Map中的元素次序是不变的。</li></ul><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="Java-1-7-的-ConcurrentHashMap"><a href="#Java-1-7-的-ConcurrentHashMap" class="headerlink" title="Java 1.7 的 ConcurrentHashMap"></a>Java 1.7 的 ConcurrentHashMap</h3><h4 id="1-存储结构-1"><a href="#1-存储结构-1" class="headerlink" title="1.存储结构"></a>1.存储结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final class HashEntry&lt;K,V&gt; &#123;</span><br><span class="line">    final int hash;</span><br><span class="line">    final K key;</span><br><span class="line">    volatile V value;</span><br><span class="line">    volatile HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 COncurrentHashMap 采用了分段锁(Segment)，每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高(并发度就是 Segment 的个数)。</p><p>Segment 继承自 ReentrantLock。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 2249069246763182397L;</span><br><span class="line"></span><br><span class="line">    static final int MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; 1 ? 64 : 1;</span><br><span class="line"></span><br><span class="line">    transient volatile HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    transient int count;</span><br><span class="line"></span><br><span class="line">    transient int modCount;</span><br><span class="line"></span><br><span class="line">    transient int threshold;</span><br><span class="line"></span><br><span class="line">    final float loadFactor;</span><br><span class="line">&#125;</span><br><span class="line">final Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure></p><p>默认的并发级别为 16 ，也就是说默认创建16个 Segment。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static final int DEFAULT_CONCURRENCY_LEVEL = 16;</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz2o5346dnj20pr0ij0t3.jpg" alt=""></p><h4 id="2-size-操作"><a href="#2-size-操作" class="headerlink" title="2.size 操作"></a>2.size 操作</h4><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The number of elements. Accessed only either within locks</span><br><span class="line"> * or among other volatile reads that maintain visibility.</span><br><span class="line"> */</span><br><span class="line">transient int count;</span><br></pre></td></tr></table></figure></p><p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p><p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p><p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p><p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。</p><h3 id="Java-1-8-的-ConcurrentHashMap"><a href="#Java-1-8-的-ConcurrentHashMap" class="headerlink" title="Java 1.8 的 ConcurrentHashMap"></a>Java 1.8 的 ConcurrentHashMap</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Java 8 为进一步提高并发性，摒弃了分段锁的方案，而是直接使用一个大的数组。同时为了提高哈希碰撞下的寻址性能，Java 8 在链表长度超过一定阈值（8）时，将链表转换为红黑树（寻址时间复杂度为O(log(N))）。数据结构如下图：<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fz2obcdnpej219g0k6myt.jpg" alt=""></p><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p>Java 8 的ConcurrentHashMap 同样是通过 Key的哈希值与数组长度取模确定该Key在数组中的索引。通过如下方法计算得到Key的最终哈希值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static final int spread(int h) &#123;</span><br><span class="line">  return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>对于put操作，如果Key对应的数组元素为null，则通过CAS操作将其设置为当前值。如果Key对应的数组元素不为null，则对该元素使用 synchronized 关键字申请锁，然后进行操作。如果该put操作使得当前链表长度超过一定阈值，则将该链表转换为树，从而提高寻址效率。</p><p>对于读操作，由于数组被volatile关键字修饰，因此不用担心数组的可见性问题。同时每个元素是一个Node实例，它的Key值和hash值由final修饰，不可变更，无须关心它们被修改后的可见性问题。而其Value及对下一个元素的引用由volatile修饰，可见性也有保障。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">  final int hash;</span><br><span class="line">  final K key;</span><br><span class="line">  volatile V val;</span><br><span class="line">  volatile Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于Key对应的数组元素的可见性，由Unsafe的getObjectVolatile方法保证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;</span><br><span class="line">  return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="size操作"><a href="#size操作" class="headerlink" title="size操作"></a>size操作</h4><p>put方法和remove方法都会通过addCount方法维护Map的size。size方法通过sumCount获取由addCount方法维护的Map的size。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>继承自HashMap，因此具有和HashMap一样的快速查找特性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; implements Map&lt;K,V&gt;</span><br></pre></td></tr></table></figure></p><p>内部维护了一个双向链表，用来维护插入顺序或者LRU顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The head (eldest) of the doubly linked list.</span><br><span class="line"> */</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The tail (youngest) of the doubly linked list.</span><br><span class="line"> */</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure></p><p>accessOrder 决定了顺序，默认为 false，此时维护的是插入顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final boolean accessOrder;</span><br></pre></td></tr></table></figure></p><p>LinkedHashMap 最重要的是一下用于维护顺序的函数，它们会在put，get等方法中调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="afterNodeAccess"><a href="#afterNodeAccess" class="headerlink" title="afterNodeAccess()"></a>afterNodeAccess()</h3><p>当一个节点被访问时，如果AccessOrder为true，则会将该节点移到链表尾部。也就是说指定为LRU顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; // move node to last</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = null;</span><br><span class="line">        if (b == null)</span><br><span class="line">            head = a;</span><br><span class="line">        else</span><br><span class="line">            b.after = a;</span><br><span class="line">        if (a != null)</span><br><span class="line">            a.before = b;</span><br><span class="line">        else</span><br><span class="line">            last = b;</span><br><span class="line">        if (last == null)</span><br><span class="line">            head = p;</span><br><span class="line">        else &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="afterNodeInsertion"><a href="#afterNodeInsertion" class="headerlink" title="afterNodeInsertion()"></a>afterNodeInsertion()</h3><p> 在put等操作之后执行，当removeEldestEntry()方法返回true时会移除最晚的节点，也就是链表首部节点first。</p><p> evict 只有在构建 Map的时候才为 false，在这里为true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeInsertion(boolean evict) &#123; // possibly remove eldest</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, null, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>removeEldestEntry() 默认为false，如果需要让它为true，需要继承LinkedHashMap并且覆盖这个方法的实现，这在实现LRU的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest) &#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="LRU缓存"><a href="#LRU缓存" class="headerlink" title="LRU缓存"></a>LRU缓存</h3><p>以下是使用LinkedHashMap实现的一个LRU缓存：</p><ul><li>设定最大缓存空间 Max_ENTRIES 为 3；</li><li>使用 LinkedHashMap 的构造函数将 accessOrder 设置为true，开启LRU顺序；</li><li>覆盖removeEldestEntry()方法实现，在节点多于 Max_ENTRIES 就会将最近最久未使用的数据移除。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class LRUCache&lt;K, V&gt; extends LinkedHashMap&lt;K, V&gt; &#123;</span><br><span class="line">    private static final int MAX_ENTRIES = 3;</span><br><span class="line"></span><br><span class="line">    protected boolean removeEldestEntry(Map.Entry eldest) &#123;</span><br><span class="line">        return size() &gt; MAX_ENTRIES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LRUCache() &#123;</span><br><span class="line">        super(MAX_ENTRIES, 0.75f, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LRUCache&lt;Integer, String&gt; cache = new LRUCache&lt;&gt;();</span><br><span class="line">    cache.put(1, &quot;a&quot;);</span><br><span class="line">    cache.put(2, &quot;b&quot;);</span><br><span class="line">    cache.put(3, &quot;c&quot;);</span><br><span class="line">    cache.get(1);</span><br><span class="line">    cache.put(4, &quot;d&quot;);</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br><span class="line">[3, 1, 4]</span><br></pre></td></tr></table></figure><h2 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h2><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>WeakHashMap的Entry继承自 WeakReference，被WeakReference关联的对象再下一次垃圾回收时会被回收。<br>WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由JVM对这部分缓存进行回收。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static class Entry&lt;K,V&gt; extends WeakReference&lt;Object&gt; implements Map.Entry&lt;K,V&gt;</span><br></pre></td></tr></table></figure></p><h3 id="ConcurrentCache"><a href="#ConcurrentCache" class="headerlink" title="ConcurrentCache"></a>ConcurrentCache</h3><p>Tomcat 中的ConcurrentCache使用了WeakHashMap来实现缓存功能。<br>ConcurrentCache采取的是分代缓存：</p><ul><li>经常使用的对象放入eden中，eden使用ConcurrentHashMap实现，不用担心会被回收；</li><li>不常用的对象放入longterm，longterm使用WeakHashMap实现，这些老对象会被垃圾收集器回收。</li><li>当调用get()方法时，会先从eden区获取，如果没有找到的话再去longterm获取，当longterm获取到就把对象放入eden中，从而保证经常被访问的节点不容易被回收。</li><li>当调用put()方法时，如果eden的大小超过了size，那么就将eden中的所有对象都放入longterm中，利用虚拟机回收掉一部分不经常使用的对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public final class ConcurrentCache&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private final int size;</span><br><span class="line"></span><br><span class="line">    private final Map&lt;K, V&gt; eden;</span><br><span class="line"></span><br><span class="line">    private final Map&lt;K, V&gt; longterm;</span><br><span class="line"></span><br><span class="line">    public ConcurrentCache(int size) &#123;</span><br><span class="line">        this.size = size;</span><br><span class="line">        this.eden = new ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line">        this.longterm = new WeakHashMap&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public V get(K k) &#123;</span><br><span class="line">        V v = this.eden.get(k);</span><br><span class="line">        if (v == null) &#123;</span><br><span class="line">            v = this.longterm.get(k);</span><br><span class="line">            if (v != null)</span><br><span class="line">                this.eden.put(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(K k, V v) &#123;</span><br><span class="line">        if (this.eden.size() &gt;= size) &#123;</span><br><span class="line">            this.longterm.putAll(this.eden);</span><br><span class="line">            this.eden.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        this.eden.put(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/01/08/Java基础/" rel="next" title="Java基础">                <i class="fa fa-chevron-left"></i> Java基础              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/01/17/Java并发/" rel="prev" title="Java并发">                Java并发 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#概览"><span class="nav-number">1.</span> <span class="nav-text">概览</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Collection"><span class="nav-number">1.1.</span> <span class="nav-text">Collection</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-Set"><span class="nav-number">1.1.1.</span> <span class="nav-text">1.Set</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-List"><span class="nav-number">1.1.2.</span> <span class="nav-text">2.List</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-Queue"><span class="nav-number">1.1.3.</span> <span class="nav-text">3.Queue</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Map"><span class="nav-number">1.2.</span> <span class="nav-text">Map</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#容器中的设计模式"><span class="nav-number">2.</span> <span class="nav-text">容器中的设计模式</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#迭代器模式"><span class="nav-number">2.1.</span> <span class="nav-text">迭代器模式</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#适配器模式"><span class="nav-number">2.2.</span> <span class="nav-text">适配器模式</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#源码分析"><span class="nav-number">3.</span> <span class="nav-text">源码分析</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#ArrayList"><span class="nav-number">3.1.</span> <span class="nav-text">ArrayList</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-概览"><span class="nav-number">3.1.1.</span> <span class="nav-text">1.概览</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-扩容"><span class="nav-number">3.1.2.</span> <span class="nav-text">2.扩容</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-删除元素"><span class="nav-number">3.1.3.</span> <span class="nav-text">3.删除元素</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-序列化"><span class="nav-number">3.1.4.</span> <span class="nav-text">4.序列化</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#优缺点"><span class="nav-number">3.2.</span> <span class="nav-text">优缺点</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Vector"><span class="nav-number">3.3.</span> <span class="nav-text">Vector</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-同步"><span class="nav-number">3.3.1.</span> <span class="nav-text">1.同步</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-与-ArrayList-的比较"><span class="nav-number">3.3.2.</span> <span class="nav-text">2.与 ArrayList 的比较</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-替代方案"><span class="nav-number">3.3.3.</span> <span class="nav-text">3.替代方案</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CopyOnWriteArrayList"><span class="nav-number">3.4.</span> <span class="nav-text">CopyOnWriteArrayList</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-读写分离"><span class="nav-number">3.4.1.</span> <span class="nav-text">1.读写分离</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#适用场景"><span class="nav-number">3.4.2.</span> <span class="nav-text">适用场景</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#LinkedList"><span class="nav-number">3.5.</span> <span class="nav-text">LinkedList</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-概览-1"><span class="nav-number">3.5.1.</span> <span class="nav-text">1.概览</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-与-ArrayList的比较"><span class="nav-number">3.5.2.</span> <span class="nav-text">2.与 ArrayList的比较</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#HashMap"><span class="nav-number">3.6.</span> <span class="nav-text">HashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-存储结构"><span class="nav-number">3.6.1.</span> <span class="nav-text">1.存储结构</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-拉链法的工作原理"><span class="nav-number">3.6.2.</span> <span class="nav-text">2.拉链法的工作原理</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-put操作"><span class="nav-number">3.6.3.</span> <span class="nav-text">3.put操作</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-确定桶下标"><span class="nav-number">3.6.4.</span> <span class="nav-text">4.确定桶下标</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#4-1-计算-hash-值"><span class="nav-number">3.6.4.1.</span> <span class="nav-text">4.1 计算 hash 值</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#4-2-取模"><span class="nav-number">3.6.4.2.</span> <span class="nav-text">4.2 取模</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-扩容-基本原理"><span class="nav-number">3.6.5.</span> <span class="nav-text">5.扩容-基本原理</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-扩容-重新计算桶下标"><span class="nav-number">3.6.6.</span> <span class="nav-text">6.扩容-重新计算桶下标</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-计算数组容量"><span class="nav-number">3.6.7.</span> <span class="nav-text">7.计算数组容量</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#8-链表转红黑树"><span class="nav-number">3.6.8.</span> <span class="nav-text">8.链表转红黑树</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#9-Fast-faill"><span class="nav-number">3.6.9.</span> <span class="nav-text">9.Fast-faill</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#10-与HashTable的比较"><span class="nav-number">3.6.10.</span> <span class="nav-text">10.与HashTable的比较</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ConcurrentHashMap"><span class="nav-number">3.7.</span> <span class="nav-text">ConcurrentHashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Java-1-7-的-ConcurrentHashMap"><span class="nav-number">3.7.1.</span> <span class="nav-text">Java 1.7 的 ConcurrentHashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#1-存储结构-1"><span class="nav-number">3.7.1.1.</span> <span class="nav-text">1.存储结构</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#2-size-操作"><span class="nav-number">3.7.1.2.</span> <span class="nav-text">2.size 操作</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Java-1-8-的-ConcurrentHashMap"><span class="nav-number">3.7.2.</span> <span class="nav-text">Java 1.8 的 ConcurrentHashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#数据结构"><span class="nav-number">3.7.2.1.</span> <span class="nav-text">数据结构</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#寻址方式"><span class="nav-number">3.7.2.2.</span> <span class="nav-text">寻址方式</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#同步方法"><span class="nav-number">3.7.2.3.</span> <span class="nav-text">同步方法</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#size操作"><span class="nav-number">3.7.2.4.</span> <span class="nav-text">size操作</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#LinkedHashMap"><span class="nav-number">3.8.</span> <span class="nav-text">LinkedHashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#存储结构"><span class="nav-number">3.8.1.</span> <span class="nav-text">存储结构</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#afterNodeAccess"><span class="nav-number">3.8.2.</span> <span class="nav-text">afterNodeAccess()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#afterNodeInsertion"><span class="nav-number">3.8.3.</span> <span class="nav-text">afterNodeInsertion()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#LRU缓存"><span class="nav-number">3.8.4.</span> <span class="nav-text">LRU缓存</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#WeakHashMap"><span class="nav-number">3.9.</span> <span class="nav-text">WeakHashMap</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#存储结构-1"><span class="nav-number">3.9.1.</span> <span class="nav-text">存储结构</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#ConcurrentCache"><span class="nav-number">3.9.2.</span> <span class="nav-text">ConcurrentCache</span></a></li></ol></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2019/10/18/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/10/18/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Java基础"><meta property="og:url" content="http://yoursite.com/2019/01/08/Java基础/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzihtblr1j21hc0ig4k6.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fymq1uuwo1j20dy0600su.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzfynkqagj23ky1zj12j.jpg"><meta property="og:updated_time" content="2019-01-08T15:23:38.731Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java基础"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzihtblr1j21hc0ig4k6.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/01/08/Java基础/"/>  <title>Java基础 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/01/08/Java基础/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java基础</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-01-08T21:47:23+08:00">                2019-01-08              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-01-08T23:23:38+08:00" content="2019-01-08">      2019-01-08    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzihtblr1j21hc0ig4k6.jpg" alt=""><br><a id="more"></a></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>八个基本类型：</p><ul><li>boolean</li><li>byte</li><li>char</li><li>short</li><li>int</li><li>float</li><li>long</li><li>double</li></ul><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = 2; //装箱</span><br><span class="line">int y = x;     //拆箱</span><br></pre></td></tr></table></figure></p><p>##缓存池<br>new Integer(123) 与 Integer.valueOf(123)的区别在于：</p><ul><li>new Integer(123)每次都会新建一个对象；</li><li>Integer.valueOf(123)会使用缓存池中的对象，多次调用会取同一个对象的引用；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer x = new Integer(123);</span><br><span class="line">Integer y = new Integer(123);</span><br><span class="line">System.out.println(x == y);   //false</span><br><span class="line">Integer z = Integer.valueOf(123);</span><br><span class="line">Integer k = Integer.valueOf(123);</span><br><span class="line">System.out.print(z == k);     //true</span><br></pre></td></tr></table></figure></li></ul><p>valueOf()方法的实现比较简单，就是先判断值是否在缓存池中，如果再的话就直接返回缓存池的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) &#123;</span><br><span class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器会在自动装箱过程调用valueOf()方法，因此多个Integer实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer m = 123;</span><br><span class="line">Integer n = 123;</span><br><span class="line">System.out.println(m == n); // true</span><br></pre></td></tr></table></figure></p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>String 被声明为final，因此它是不可继承。</p><h2 id="不可变的好处"><a href="#不可变的好处" class="headerlink" title="不可变的好处"></a>不可变的好处</h2><h3 id="1、可以缓存hash值"><a href="#1、可以缓存hash值" class="headerlink" title="1、可以缓存hash值"></a>1、可以缓存hash值</h3><p>因为String的hash值经常被使用，例如String用做HashMap的key。不可变的特性可以使得hash值也不可变，因此只需要进行一次计算。</p><h3 id="2、String-Pool-的需要"><a href="#2、String-Pool-的需要" class="headerlink" title="2、String Pool 的需要"></a>2、String Pool 的需要</h3><p>如果一个String对象已经被创建过了，那么就会从String Pool中取得引用。只有String 是不可变的，才可能使用String Pool。<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fymq1uuwo1j20dy0600su.jpg" alt=""></p><h3 id="3、安全性"><a href="#3、安全性" class="headerlink" title="3、安全性"></a>3、安全性</h3><p>String 经常作为参数，String不可变性可以保证参数不可变。</p><h3 id="4、线程安全"><a href="#4、线程安全" class="headerlink" title="4、线程安全"></a>4、线程安全</h3><p>String不可变天生具备线程安全，可以在多个线程中安全地使用。</p><h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><h3 id="1、可变性"><a href="#1、可变性" class="headerlink" title="1、可变性"></a>1、可变性</h3><ul><li>String不可变</li><li>StringBuffer 和 StringBuilder可变</li></ul><h3 id="2、线程安全"><a href="#2、线程安全" class="headerlink" title="2、线程安全"></a>2、线程安全</h3><ul><li>String不可变，因此线程是安全的</li><li>StringBuilder不是线程安全的</li><li>StringBUffer是线程安全的，内部使用synchronized进行同步</li></ul><h2 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h2><p>字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用String的intern()方法在运行过程中将字符串添加到String Pool中。</p><p>当一个字符串调用intern()方法时，如果String Pool中已经存在一个字符串和该字符串值想等（使用equals()方法进行确定），那么就会返回String Pool中字符串的引用。否则，就会在String Pool中添加一个新的字符串，并返回这个新字符串的引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1 = new String(&quot;aaa&quot;);</span><br><span class="line">String s2 = new String(&quot;aaa&quot;);</span><br><span class="line">System.out.println(s1 == s2);           // false</span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">String s4 = s1.intern();</span><br><span class="line">System.out.println(s3 == s4);           // true</span><br></pre></td></tr></table></figure></p><p>如果是采用”bbb”这种字面量的形式创建字符串，会自动将字符串放入String Pool中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s5 = &quot;bbb&quot;;</span><br><span class="line">String s6 = &quot;bbb&quot;;</span><br><span class="line">System.out.println(s5 == s6);  // true</span><br></pre></td></tr></table></figure></p><h2 id="new-String-“abc”"><a href="#new-String-“abc”" class="headerlink" title="new String(“abc”)"></a>new String(“abc”)</h2><p>使用这种方式一共会创建两个字符串对象（前提是String Pool中还没有”abc”字符串对象）。</p><ul><li>“abc”属于字符串字面量，因此编译时期会在String Pool中创建一个字符串对象，指向这个”abc”字符串面量；</li><li>而使用new的方式会在堆中创建一个字符串对象。</li></ul><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>Java的参数是以值传递的形式传入方法中，而不是引用传递。</p><p>以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。因此在方法中使指针引用其它对象，那么这两个指针此时指向的是完全不同的对象，在一方改变其所指向对象的内容时对另一方没有影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Dog &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Dog(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String getObjectAddress() &#123;</span><br><span class="line">        return super.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class PassByValueExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog dog = new Dog(&quot;A&quot;);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); // Dog@4554617c</span><br><span class="line">        func(dog);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); // Dog@4554617c</span><br><span class="line">        System.out.println(dog.getName());          // A</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void func(Dog dog) &#123;</span><br><span class="line">        System.out.println(dog.getObjectAddress()); // Dog@4554617c</span><br><span class="line">        dog = new Dog(&quot;B&quot;);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); // Dog@74a14482</span><br><span class="line">        System.out.println(dog.getName());          // B</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在方法中改变对象的字段值会改变原对象该字段值，因为改变的是用一个地址指向的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class PassByValueExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog dog = new Dog(&quot;A&quot;);</span><br><span class="line">        func(dog);</span><br><span class="line">        System.out.println(dog.getName());          // B</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void func(Dog dog) &#123;</span><br><span class="line">        dog.setName(&quot;B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>float 与 double<br>Java不能隐式执行向下转型，因为这会使得精度降低。<br>1.1字面量属于double类型，不能直接将1.1直接赋值给float变量，因为这是向下转型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float f = 1.1;   X</span><br><span class="line">float f = 1.1f;  √</span><br></pre></td></tr></table></figure></p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>因为字面量 1 是 int 类型，它比short类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">short s1 = 1;   √</span><br><span class="line">s1 = s1 + 1;    X</span><br></pre></td></tr></table></figure></p><p>但是使用+=或者++运算符可以执行隐式类型转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 += 1;     √</span><br><span class="line">s1++;        √</span><br></pre></td></tr></table></figure></p><p>上面的语句相当于将 s1 + 1 的结果进行了向下转型;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 = (short)(s1 + 1);</span><br></pre></td></tr></table></figure></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>从 Java 7 开始，可以在 switch条件判断语句中使用 String 对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;a&quot;;</span><br><span class="line">switch(s) &#123;</span><br><span class="line">    case &quot;a&quot;:</span><br><span class="line">        System.out.println(&quot;aaa&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case &quot;b&quot;:</span><br><span class="line">        System.out.println(&quot;bbb&quot;);</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>switch 不支持 long， 因为switch设计初衷是对少数几个值判断，如果过于复杂，还是用if合适。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>Java 中有三个访问权限修饰符：private、protected以及public，如果不加访问修饰符，表示包级可见。<br>可以堆类或类的成员（字段以及方法）加上访问修饰符。</p><ul><li>类可见表示其他类可以用这个类创建实例对象。</li><li>成员可见表示其他类可以用这个类的实例对象访问到该成员。</li></ul><p>protected 用处修饰成员，表示在继承体系中成员对子类可见，但是这个访问修饰符对类没有意义。</p><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><h3 id="1、抽象类"><a href="#1、抽象类" class="headerlink" title="1、抽象类"></a>1、抽象类</h3><p>抽象类和抽象方法都使用abstract关键字进行声明。抽象类一般会包含抽象方法，抽象方法一般定位于抽象类中。<br>抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractClassExample &#123;</span><br><span class="line">    public abstract void func1();</span><br><span class="line">    </span><br><span class="line">     public void func2() &#123;</span><br><span class="line">        System.out.println(&quot;func2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、接口"><a href="#2、接口" class="headerlink" title="2、接口"></a>2、接口</h3><p>接口时抽象类的延伸，在Java 8 之前，它可以看成是一个完全抽象的类。也就是说它不能有任何的方法实现。</p><p>从Java 8 开始，接口也可以拥有默认的方法实现。这是因为不支持默认方法的接口的维护成本太高了。在之前，想要添加新的方法，就要修改所以实现该接口的类。</p><p>接口的成员（字段+方法）默认都是public的，并且不允许定于private或者protected。<br>接口的字段默认都是static和final的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface InterfaceExample &#123;</span><br><span class="line"></span><br><span class="line">    void func1();</span><br><span class="line"></span><br><span class="line">    default void func2()&#123;</span><br><span class="line">        System.out.println(&quot;func2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int x = 123;</span><br><span class="line">    public int z = 0;       // Modifier &apos;public&apos; is redundant for interface fields</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、比较"><a href="#3、比较" class="headerlink" title="3、比较"></a>3、比较</h3><ul><li>一个类可以实现多个接口，但不能继承多个抽象类</li><li>接口字段只能static 和 final 类型的。而抽象类的字段没有这种限制。</li><li>接口的成员只能是public的，而抽象类的成员可以有多种访问权限。</li></ul><h3 id="4、使用选择"><a href="#4、使用选择" class="headerlink" title="4、使用选择"></a>4、使用选择</h3><p>使用接口：</p><ul><li>需要让不相关的类都实现一个方法。例如不相关的类都可以实现Compareable接口中的compareTo()方法；</li><li>需要使用多重继承。</li></ul><p>使用抽象类：</p><ul><li>需要在几个相关的类中共享代码。</li><li>需要能控制继承来的成员的访问权限，而不是都为public。</li><li>需要继承非静态和非常量字段。（不太懂）</li></ul><p>很多情况下，接口优先于抽象类。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li>访问父类的构造函数：可以使用super()函数访问父类的构造函数，从而委托父类完成一些初始化的工作。</li><li>访问父类的成员：如果子类重写了父类的某个方法，可以通过使用super关键字来引用父类的方法实现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class SuperExample &#123;</span><br><span class="line"></span><br><span class="line">    protected int x;</span><br><span class="line">    protected int y;</span><br><span class="line"></span><br><span class="line">    public SuperExample(int x, int y) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void func() &#123;</span><br><span class="line">        System.out.println(&quot;SuperExample.func()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SuperExtendExample extends SuperExample &#123;</span><br><span class="line"></span><br><span class="line">    private int z;</span><br><span class="line"></span><br><span class="line">    public SuperExtendExample(int x, int y, int z) &#123;</span><br><span class="line">        super(x, y);</span><br><span class="line">        this.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void func() &#123;</span><br><span class="line">        super.func();</span><br><span class="line">        System.out.println(&quot;SuperExtendExample.func()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><p>1、重写（Override）<br>存在于继承体系中，指子类实现了一个与父类在声明上完全相同的一个方法。<br>重写有以下限制：</p><ul><li>子类方法的访问权限必须大于等于父类方法；</li><li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li></ul><p>使用 @Override注解，可以让编译器检查是否满足上面的限制条件</p><p>2、重载（Overload）<br>存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型，个数，顺序至少有一个不同。<br>应该注意的是，返回值不同，其他都相同不算是重载。</p><h1 id="Object-通用方法"><a href="#Object-通用方法" class="headerlink" title="Object 通用方法"></a>Object 通用方法</h1><h2 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public native int hashCode()</span><br><span class="line"></span><br><span class="line">public boolean equals(Object obj)</span><br><span class="line"></span><br><span class="line">protected native Object clone() throws CloneNotSupportedException</span><br><span class="line"></span><br><span class="line">public String toString()</span><br><span class="line"></span><br><span class="line">public final native Class&lt;?&gt; getClass()</span><br><span class="line"></span><br><span class="line">protected void finalize() throws Throwable &#123;&#125;</span><br><span class="line"></span><br><span class="line">public final native void notify()</span><br><span class="line"></span><br><span class="line">public final native void notifyAll()</span><br><span class="line"></span><br><span class="line">public final native void wait(long timeout) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait(long timeout, int nanos) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait() throws InterruptedException</span><br></pre></td></tr></table></figure><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p>1.等价关系</p><ul><li><p>自反性</p><figure class="highlight plain"><figcaption><span> </span><a href="//true```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对称性</span><br><span class="line">```x.equals(y) == y.equals(x);   //true</span><br></pre></td></tr></table></figure></li><li><p>传递性</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(x.euqals(y) &amp;&amp; y.euqals(z))</span><br><span class="line">  x.equals(z);                   //true</span><br></pre></td></tr></table></figure><ul><li><p>一致性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多次调用equals()方法结果不变</span><br><span class="line">x.equals(y) == x.equals(y);      //true</span><br></pre></td></tr></table></figure></li><li><p>与 null的比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对任何不是null的对象 x 调用 x.equals(null)结果都为 false</span><br><span class="line">x.equals(null);                  //false</span><br></pre></td></tr></table></figure></li></ul><p>2.等价与相等</p><ul><li>对于基本类型，==判断两个值是否相等，基本类型没有equals()方法。</li><li>对于引用类型，==判断两个变量是否引用同一个对象，而equals()判断引用的对象是否等价。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer x = new Integer(1);</span><br><span class="line">Integer y = new Integer(1);</span><br><span class="line">System.out.println(x.equals(y));     //true</span><br><span class="line">System.out.println(x == y)           //false</span><br></pre></td></tr></table></figure></li></ul><p>3.实现</p><ul><li>检查是否为同一个对象的引用，如果是直接返回true;</li><li>检查是否是同一个类型的，如果不是，直接返回false;</li><li>将Object对象进行转型;</li><li>判断每个关键域是否相等。</li></ul><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h2><p>hashCode() 返回散列值，而equals是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。</p><p>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。</p><p>下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象，但是因为 EqualExample 没有实现 hasCode() 方法，因此这两个对象的散列值是不同的，最终导致集合添加了两个等价的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EqualExample e1 = new EqualExample(1, 1, 1);</span><br><span class="line">EqualExample e2 = new EqualExample(1, 1, 1);</span><br><span class="line">System.out.println(e1.equals(e2)); // true</span><br><span class="line">HashSet&lt;EqualExample&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">set.add(e1);</span><br><span class="line">set.add(e2);</span><br><span class="line">System.out.println(set.size());   // 2</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>默认返回 ToStringExample@4545465c这种形式，其中@后面的数值为散列码的无符号十六进制表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ToStringExample example = new ToStringExample(123);</span><br><span class="line">System.out.println(example.toString());</span><br><span class="line"></span><br><span class="line">//    ToStringExample@4554617c</span><br></pre></td></tr></table></figure></p><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>1.cloneable<br>clone()是Object的protected方法，它不是public，一个类不显式去重写clone()，其他类就不能直接调用该类实例的clone()方法。</p><p>2.浅拷贝<br>拷贝对象和原始对象的引用类型引用同一个对象。</p><p>3.深拷贝<br>拷贝对象和原始对象的引用类型引用不同对象。</p><p>4.clone()的替代方案<br>使用clone()方法拷贝一个对象即复杂又有风险，会抛出异常，并且需要类型转换。<br>可以拷贝构造函数或者拷贝工厂来拷贝一个对象。</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="1、数据"><a href="#1、数据" class="headerlink" title="1、数据"></a>1、数据</h3><p>声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p><ul><li>对于基本类型，final使数值不变</li><li>对于引用类型，final使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final int x = 1;</span><br><span class="line">// x = 2;  // cannot assign value to final variable &apos;x&apos;(错误方法)</span><br><span class="line">final A y = new A();</span><br><span class="line">y.a = 1;</span><br></pre></td></tr></table></figure><h3 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h3><p>声明方法不能被子类重写。<br>private 方法隐式地被指定为final，如果在子类中定义的方法和基类中的一个private方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义一个新的方法。</p><h3 id="3、类"><a href="#3、类" class="headerlink" title="3、类"></a>3、类</h3><p>声明类不允许被继承。</p><p>static<br>1、静态变量</p><ul><li>静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，也可以直接通过类名来访问它，静态变量在内存中只存在一份。</li><li>实例变量：每创建一个实例就会产生一个实例变量，它与实例同生共死。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line"></span><br><span class="line">    private int x;         // 实例变量</span><br><span class="line">    private static int y;  // 静态变量</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // int x = A.x;  // Non-static field &apos;x&apos; cannot be referenced from a static context</span><br><span class="line">        A a = new A();</span><br><span class="line">        int x = a.x;</span><br><span class="line">        int y = A.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.静态方法<br>静态方法在类加载的时候就存在了，它不依赖于任何实例，所有静态方法必须有实现，也就是说它不能是抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public abstract class A &#123;</span><br><span class="line">    public static void func1()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    // public abstract static void func2();  // Illegal combination of modifiers: &apos;abstract&apos; and &apos;static&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只能访问所属类的静态字段和静态方法，方法中不能有this和super关键字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line"></span><br><span class="line">    private static int x;</span><br><span class="line">    private int y;</span><br><span class="line"></span><br><span class="line">    public static void func1()&#123;</span><br><span class="line">        int a = x;</span><br><span class="line">        // int b = y;  // Non-static field &apos;y&apos; cannot be referenced from a static context</span><br><span class="line">        // int b = this.y;     // &apos;A.this&apos; cannot be referenced from a static context</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.静态语句块<br>静态语句块在类初始化时运行一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.静态内部类<br>非静态内部类依赖于外部类的实例，而静态内部类不需要。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line"></span><br><span class="line">    class InnerClass &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class StaticInnerClass &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // InnerClass innerClass = new InnerClass(); // &apos;OuterClass.this&apos; cannot be referenced from a static context</span><br><span class="line">        OuterClass outerClass = new OuterClass();</span><br><span class="line">        InnerClass innerClass = outerClass.new InnerClass();</span><br><span class="line">        StaticInnerClass staticInnerClass = new StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>静态内部类不能访问外部类的非静态的变量和方法。</strong></p><p>5.初始化顺序<br>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于他们在代码中的顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String staticField = &quot;静态变量&quot;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.out.println(&quot;静态语句块&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String field = &quot;实例变量&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    System.out.println(&quot;普通语句块&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后才是构造函数的初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public InitialOrderTest() &#123;</span><br><span class="line">    System.out.println(&quot;构造函数&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在继承情况下，初始化的顺序为：<br>1.父类（静态变量、静态语句块）<br>2.子类（静态变量、静态语句块）<br>3.父类（实例变量、普通语句块）<br>4.父类（构造函数）<br>5.子类（实例变量、普通语句块）<br>6.子类（构造函数）</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>每个类都有一个Class对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的.class文件，该文件内容保存着Class对象。</p><p>类加载相当于Class对象的加载，类在第一次使用时才动态加载到JVM中。也可以使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>这种方法来控制类的加载，该方法会返回一个Class对象。</p><p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的.class不存在也可以加载进来。</p><p>Class和java.lang.reflect一起对反射提供了支持，java.lang.reflect类库主要包含了以下三个类：</p><ul><li>Field：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段。</li><li>Method：可以使用invoke() 方法调用与Method对象关联的方法；</li><li>Constructor：可以用 Constructor 创建新的对象；</li></ul><p><strong>反射的优点：</strong></p><ul><li><p>可扩展性：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</p></li><li><p>类浏览器和可视化开发环境：一个类浏览器需要可以枚举类的成员。可视化开发环境可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</p></li><li><p>调试器和测试工具：调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动调用类里定义的可被发现的API定义，以确保一组测试中有较高的代码覆盖率。</p></li></ul><p><strong>反射的缺点：</strong><br>尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。</p><ul><li><p>性能开销：反射涉及动态类型的解析，所以JVM无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或性能要求很高的程序中使用反射。</p></li><li><p>安全限制：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。</p></li><li><p>内部暴露：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</p></li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。其中 Error 用来表示JVM 无法处理的错误，Excption分为两种：</p><ul><li>受检异常：需要用 try…catch…语句捕获并进行处理，并且可以从异常中恢复。</li><li>非受检异常：是程序运行时错误，例如除0会引发 Arithmetic Excption，此时程序奔溃并且无法恢复。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fyzfynkqagj23ky1zj12j.jpg" alt=""></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p><strong>提高代码复用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Box&lt;T&gt; &#123;</span><br><span class="line">    // T stands for &quot;Type&quot;</span><br><span class="line">    private T t;</span><br><span class="line">    public void set(T t) &#123; this.t = t; &#125;</span><br><span class="line">    public T get() &#123; return t; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>泛型信息只存在于代码编译阶段，只能用于在编译期间的静态类型检查,在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。</p><h2 id="给予上限"><a href="#给予上限" class="headerlink" title="给予上限"></a>给予上限</h2><p>我们现在可以下结论了，在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <t> 则会被转译成普通的 Object 类型，如果指定了上限如 <t extends="" string=""> 则类型参数就被替换成类型上限。</t></t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Node&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">    private T data;</span><br><span class="line">    private Node&lt;T&gt; next;</span><br><span class="line">    public Node(T data, Node&lt;T&gt; next) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    public T getData() &#123; return data; &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时候会变成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">    private Comparable data;</span><br><span class="line">    private Node next;</span><br><span class="line">    public Node(Comparable data, Node next) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    public Comparable getData() &#123; return data; &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。<br>Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。</p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/12/26/Linux/" rel="next" title="Linux">                <i class="fa fa-chevron-left"></i> Linux              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/01/11/Java容器/" rel="prev" title="Java容器">                Java容器 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#数据类型"><span class="nav-number">1.</span> <span class="nav-text">数据类型</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#包装类型"><span class="nav-number">1.1.</span> <span class="nav-text">包装类型</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#String"><span class="nav-number">2.</span> <span class="nav-text">String</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概览"><span class="nav-number">2.1.</span> <span class="nav-text">概览</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#不可变的好处"><span class="nav-number">2.2.</span> <span class="nav-text">不可变的好处</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、可以缓存hash值"><span class="nav-number">2.2.1.</span> <span class="nav-text">1、可以缓存hash值</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、String-Pool-的需要"><span class="nav-number">2.2.2.</span> <span class="nav-text">2、String Pool 的需要</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、安全性"><span class="nav-number">2.2.3.</span> <span class="nav-text">3、安全性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4、线程安全"><span class="nav-number">2.2.4.</span> <span class="nav-text">4、线程安全</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#String、StringBuffer、StringBuilder"><span class="nav-number">2.3.</span> <span class="nav-text">String、StringBuffer、StringBuilder</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、可变性"><span class="nav-number">2.3.1.</span> <span class="nav-text">1、可变性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、线程安全"><span class="nav-number">2.3.2.</span> <span class="nav-text">2、线程安全</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#String-Pool"><span class="nav-number">2.4.</span> <span class="nav-text">String Pool</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#new-String-“abc”"><span class="nav-number">2.5.</span> <span class="nav-text">new String(“abc”)</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#运算"><span class="nav-number">3.</span> <span class="nav-text">运算</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#参数传递"><span class="nav-number">3.1.</span> <span class="nav-text">参数传递</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#隐式类型转换"><span class="nav-number">3.2.</span> <span class="nav-text">隐式类型转换</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#switch"><span class="nav-number">3.3.</span> <span class="nav-text">switch</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#继承"><span class="nav-number">4.</span> <span class="nav-text">继承</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#访问权限"><span class="nav-number">4.1.</span> <span class="nav-text">访问权限</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#抽象类与接口"><span class="nav-number">4.2.</span> <span class="nav-text">抽象类与接口</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、抽象类"><span class="nav-number">4.2.1.</span> <span class="nav-text">1、抽象类</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、接口"><span class="nav-number">4.2.2.</span> <span class="nav-text">2、接口</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、比较"><span class="nav-number">4.2.3.</span> <span class="nav-text">3、比较</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4、使用选择"><span class="nav-number">4.2.4.</span> <span class="nav-text">4、使用选择</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#super"><span class="nav-number">4.3.</span> <span class="nav-text">super</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#重写与重载"><span class="nav-number">4.4.</span> <span class="nav-text">重写与重载</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Object-通用方法"><span class="nav-number">5.</span> <span class="nav-text">Object 通用方法</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概览-1"><span class="nav-number">5.1.</span> <span class="nav-text">概览</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#equals"><span class="nav-number">5.2.</span> <span class="nav-text">equals()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#hashCode"><span class="nav-number">5.3.</span> <span class="nav-text">hashCode()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#toString-NaN"><span class="nav-number">5.4.</span> <span class="nav-text">toString()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#clone"><span class="nav-number">5.5.</span> <span class="nav-text">clone()</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#关键字"><span class="nav-number">6.</span> <span class="nav-text">关键字</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#final"><span class="nav-number">6.1.</span> <span class="nav-text">final</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、数据"><span class="nav-number">6.1.1.</span> <span class="nav-text">1、数据</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、方法"><span class="nav-number">6.1.2.</span> <span class="nav-text">2、方法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3、类"><span class="nav-number">6.1.3.</span> <span class="nav-text">3、类</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#反射"><span class="nav-number">7.</span> <span class="nav-text">反射</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#异常"><span class="nav-number">8.</span> <span class="nav-text">异常</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#泛型"><span class="nav-number">9.</span> <span class="nav-text">泛型</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#类型擦除"><span class="nav-number">9.1.</span> <span class="nav-text">类型擦除</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#给予上限"><span class="nav-number">9.2.</span> <span class="nav-text">给予上限</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#注解"><span class="nav-number">10.</span> <span class="nav-text">注解</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#概念"><span class="nav-number">10.1.</span> <span class="nav-text">概念</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java IO</title>
      <link href="/2019/10/18/Java%20IO/"/>
      <url>/2019/10/18/Java%20IO/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="Java IO"><meta property="og:url" content="http://yoursite.com/2019/01/23/Java IO/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgnxe1d5ej230a0pw4hm.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgm5guz8pj20mo08t0tu.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgn4rqszzj20bs07n0t0.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgnli45qzj20f10b70t9.jpg"><meta property="og:updated_time" content="2019-01-24T09:07:54.154Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Java IO"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgnxe1d5ej230a0pw4hm.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/01/23/Java IO/"/>  <title>Java IO | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/01/23/Java IO/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">Java IO</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-01-23T17:49:56+08:00">                2019-01-23              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-01-24T17:07:54+08:00" content="2019-01-24">      2019-01-24    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/后端篇/" itemprop="url" rel="index">                    <span itemprop="name">后端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgnxe1d5ej230a0pw4hm.jpg" alt=""></p><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>Java 的I/O大概可以分为以下几类：</p><ul><li>磁盘操作：File</li><li>字节操作：InputStream 和 OutputStream</li><li>字符操作：Reader 和 Writer</li><li>对象操作：Serializable</li><li>网络操作：Socket</li><li>新的输入/输出：NIO</li></ul><h1 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h1><p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。</p><p>递归地列出一个目录下所有文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void listAllFiles(File dir) &#123;</span><br><span class="line">    if (dir == null || !dir.exists()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (dir.isFile()) &#123;</span><br><span class="line">        System.out.println(dir.getName());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (File file : dir.listFiles()) &#123;</span><br><span class="line">        listAllFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从 Java7 开始，可以使用 Paths 和 Files 代替 File。</p><h1 id="字节操作"><a href="#字节操作" class="headerlink" title="字节操作"></a>字节操作</h1><h2 id="实现文件的复制"><a href="#实现文件的复制" class="headerlink" title="实现文件的复制"></a>实现文件的复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void copyFile(String src, String dist) throws IOException &#123;</span><br><span class="line">    FileInputStream in = new FileInputStream(src);</span><br><span class="line">    FileOutputStream out = new FileOutputStream(dist);</span><br><span class="line"></span><br><span class="line">    byte[] buffer = new byte[20 * 1024];</span><br><span class="line">    int cnt;</span><br><span class="line"></span><br><span class="line">    // read() 最多读取 buffer.length 个字节</span><br><span class="line">    // 返回的是实际读取的个数</span><br><span class="line">    // 返回 -1 的时候表示读到 eof，即文件尾</span><br><span class="line">    while ((cnt = in.read(buffer, 0, buffer.length)) != -1) &#123;</span><br><span class="line">        out.write(buffer, 0, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>Java I/O 使用了装饰者模式来实现。以 InputStream 为例，</p><ul><li>InputStream 是抽象组件；</li><li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li><li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgm5guz8pj20mo08t0tu.jpg" alt=""></p><p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = new FileInputStream(filePath);</span><br><span class="line">BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);</span><br></pre></td></tr></table></figure><p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。</p><h1 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h1><h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p><p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p><ul><li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li><li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li><li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li></ul><p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。</p><p>Java 的内存编码使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p><h2 id="String-的编码方式"><a href="#String-的编码方式" class="headerlink" title="String 的编码方式"></a>String 的编码方式</h2><p>String 可以看成一个字符序列，可以指定一个编码方式将它编码为字节序列，也可以指定一个编码方式将一个字节序列解码为 String。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;中文&quot;;</span><br><span class="line">byte[] bytes = str1.getBytes(&quot;UTF-8&quot;);</span><br><span class="line">String str2 = new String(bytes, &quot;UTF-8&quot;);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure></p><p>在调用无参数 getBytes() 方法时，默认的编码方式不是 UTF-16be。双字节编码的好处是可以使用一个 char 存储中文和英文，而将 String 转为 bytes[] 字节数组就不再需要这个好处，因此也就不再需要双字节编码。getBytes() 的默认编码方式与平台有关，一般为 UTF-8。</p><blockquote><p>byte[] bytes = str1.getBytes();’</p></blockquote><h2 id="Reader-与-Writer"><a href="#Reader-与-Writer" class="headerlink" title="Reader 与 Writer"></a>Reader 与 Writer</h2><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符。但是在程序中操作的通常是字符形式的数据，因此需要提供对字符进行操作的方法。</p><ul><li>InputStreamReader 实现从字节流解码成字符流；</li><li>OutputStreamWriter 实现字符流编码成为字节流。</li></ul><h2 id="实现逐行输出文本文件的内容"><a href="#实现逐行输出文本文件的内容" class="headerlink" title="实现逐行输出文本文件的内容"></a>实现逐行输出文本文件的内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void readFileContent(String filePath) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    FileReader fileReader = new FileReader(filePath);</span><br><span class="line">    BufferedReader bufferedReader = new BufferedReader(fileReader);</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    while ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span><br><span class="line">    // 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法</span><br><span class="line">    // 因此只要一个 close() 调用即可</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p><ul><li>序列化：ObjectOutputStream.writeObject()</li><li>反序列化：ObjectInputStream.readObject()</li></ul><p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p><h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    A a1 = new A(123, &quot;abc&quot;);</span><br><span class="line">    String objectFile = &quot;file/a1&quot;;</span><br><span class="line"></span><br><span class="line">    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(objectFile));</span><br><span class="line">    objectOutputStream.writeObject(a1);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">    ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(objectFile));</span><br><span class="line">    A a2 = (A) objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line">    System.out.println(a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static class A implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private int x;</span><br><span class="line">    private String y;</span><br><span class="line"></span><br><span class="line">    A(int x, String y) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;x = &quot; + x + &quot;  &quot; + &quot;y = &quot; + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h2><p>transient 关键字可以使一些属性不会被序列化。</p><p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p><blockquote><p>private transient Object[] elementData;</p></blockquote><h1 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h1><p>Java 中的网络支持：</p><ul><li>InetAddress：用于表示网络上的硬件资源，即 IP 地址；</li><li>URL：统一资源定位符；</li><li>Sockets：使用 TCP 协议实现网络通信；</li><li>Datagram：使用 UDP 协议实现网络通信。</li></ul><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p>没有公有的构造函数，只能通过静态方法来创建实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InetAddress.getByName(String host);</span><br><span class="line">InetAddress.getByAddress(byte[] address);</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>可以直接从 URL 中读取字节流数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    URL url = new URL(&quot;http://www.baidu.com&quot;);</span><br><span class="line"></span><br><span class="line">    /* 字节流 */</span><br><span class="line">    InputStream is = url.openStream();</span><br><span class="line"></span><br><span class="line">    /* 字符流 */</span><br><span class="line">    InputStreamReader isr = new InputStreamReader(is, &quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">    /* 提供缓存功能 */</span><br><span class="line">    BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    while ((line = br.readLine()) != null) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Sockets"><a href="#Sockets" class="headerlink" title="Sockets"></a>Sockets</h2><ul><li>ServerSocket：服务器端类</li><li>Socket：客户端类</li><li>服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。</li></ul><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgn4rqszzj20bs07n0t0.jpg" alt=""></p><h2 id="Datagram"><a href="#Datagram" class="headerlink" title="Datagram"></a>Datagram</h2><ul><li>DatagramSocket：通信类</li><li>DatagramPacket：数据包类</li></ul><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p><h2 id="流与块"><a href="#流与块" class="headerlink" title="流与块"></a>流与块</h2><p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p><p>面向流的 I/O 一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p><p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p>I/O 包和 NIO 已经很好地集成了，java.io.<em> 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，java.io.</em> 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p><h2 id="通道与缓冲区"><a href="#通道与缓冲区" class="headerlink" title="通道与缓冲区"></a>通道与缓冲区</h2><h3 id="1、通道"><a href="#1、通道" class="headerlink" title="1、通道"></a>1、通道</h3><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p><p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p><p>通道包括以下类型：</p><ul><li>FileChannel：从文件中读写数据；</li><li>DatagramChannel：通过 UDP 读写网络中数据；</li><li>SocketChannel：通过 TCP 读写网络中数据；</li><li>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li></ul><h3 id="2、缓冲区"><a href="#2、缓冲区" class="headerlink" title="2、缓冲区"></a>2、缓冲区</h3><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p><p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p><p>缓冲区包括以下类型：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><h2 id="缓冲区状态变量"><a href="#缓冲区状态变量" class="headerlink" title="缓冲区状态变量"></a>缓冲区状态变量</h2><ul><li>capacity：最大容量；</li><li>position：当前已经读写的字节数；</li><li>limit：还可以读写的字节数。</li></ul><h2 id="文件-NIO-实例"><a href="#文件-NIO-实例" class="headerlink" title="文件 NIO 实例"></a>文件 NIO 实例</h2><p>以下展示了使用 NIO 快速复制文件的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public static void fastCopy(String src, String dist) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    /* 获得源文件的输入字节流 */</span><br><span class="line">    FileInputStream fin = new FileInputStream(src);</span><br><span class="line"></span><br><span class="line">    /* 获取输入字节流的文件通道 */</span><br><span class="line">    FileChannel fcin = fin.getChannel();</span><br><span class="line"></span><br><span class="line">    /* 获取目标文件的输出字节流 */</span><br><span class="line">    FileOutputStream fout = new FileOutputStream(dist);</span><br><span class="line"></span><br><span class="line">    /* 获取输出字节流的文件通道 */</span><br><span class="line">    FileChannel fcout = fout.getChannel();</span><br><span class="line"></span><br><span class="line">    /* 为缓冲区分配 1024 个字节 */</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocateDirect(1024);</span><br><span class="line"></span><br><span class="line">    while (true) &#123;</span><br><span class="line"></span><br><span class="line">        /* 从输入通道中读取数据到缓冲区中 */</span><br><span class="line">        int r = fcin.read(buffer);</span><br><span class="line"></span><br><span class="line">        /* read() 返回 -1 表示 EOF */</span><br><span class="line">        if (r == -1) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 切换读写 */</span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        /* 把缓冲区的内容写入输出文件中 */</span><br><span class="line">        fcout.write(buffer);</span><br><span class="line"></span><br><span class="line">        /* 清空缓冲区 */</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p><p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p><p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p><p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件，对于 IO 密集型的应用具有很好地性能。</p><p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p><p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fzgnli45qzj20f10b70t9.jpg" alt=""></p><h3 id="1-创建选择器"><a href="#1-创建选择器" class="headerlink" title="1.创建选择器"></a>1.创建选择器</h3><blockquote><p>Selector selector = Selector.open();</p></blockquote><h3 id="2-将通道注册到选择器上"><a href="#2-将通道注册到选择器上" class="headerlink" title="2.将通道注册到选择器上"></a>2.将通道注册到选择器上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">ssChannel.configureBlocking(false);</span><br><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。<br>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：</p><ul><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li></ul><p>它们在 SelectionKey 的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static final int OP_READ = 1 &lt;&lt; 0;</span><br><span class="line">public static final int OP_WRITE = 1 &lt;&lt; 2;</span><br><span class="line">public static final int OP_CONNECT = 1 &lt;&lt; 3;</span><br><span class="line">public static final int OP_ACCEPT = 1 &lt;&lt; 4;</span><br></pre></td></tr></table></figure><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如：</p><blockquote><p>int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</p></blockquote><h3 id="3-监听事件"><a href="#3-监听事件" class="headerlink" title="3.监听事件"></a>3.监听事件</h3><blockquote><p>int num = selector.select();</p></blockquote><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p><h3 id="4-获取到达的事件"><a href="#4-获取到达的事件" class="headerlink" title="4.获取到达的事件"></a>4.获取到达的事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line">while (keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line">    if (key.isAcceptable()) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125; else if (key.isReadable()) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-事件循环"><a href="#5-事件循环" class="headerlink" title="5.事件循环"></a>5.事件循环</h3><p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">    int num = selector.select();</span><br><span class="line">    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line">    while (keyIterator.hasNext()) &#123;</span><br><span class="line">        SelectionKey key = keyIterator.next();</span><br><span class="line">        if (key.isAcceptable()) &#123;</span><br><span class="line">            // ...</span><br><span class="line">        &#125; else if (key.isReadable()) &#123;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="套接字-NIO-实例"><a href="#套接字-NIO-实例" class="headerlink" title="套接字 NIO 实例"></a>套接字 NIO 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">public class NIOServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">        ssChannel.configureBlocking(false);</span><br><span class="line">        ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = ssChannel.socket();</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(&quot;127.0.0.1&quot;, 8888);</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line"></span><br><span class="line">            while (keyIterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                if (key.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                    ServerSocketChannel ssChannel1 = (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                    // 服务器会为每个新连接创建一个 SocketChannel</span><br><span class="line">                    SocketChannel sChannel = ssChannel1.accept();</span><br><span class="line">                    sChannel.configureBlocking(false);</span><br><span class="line"></span><br><span class="line">                    // 这个新连接主要用于从客户端读取数据</span><br><span class="line">                    sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                &#125; else if (key.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">                    SocketChannel sChannel = (SocketChannel) key.channel();</span><br><span class="line">                    System.out.println(readDataFromSocketChannel(sChannel));</span><br><span class="line">                    sChannel.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String readDataFromSocketChannel(SocketChannel sChannel) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(1024);</span><br><span class="line">        StringBuilder data = new StringBuilder();</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">            buffer.clear();</span><br><span class="line">            int n = sChannel.read(buffer);</span><br><span class="line">            if (n == -1) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            int limit = buffer.limit();</span><br><span class="line">            char[] dst = new char[limit];</span><br><span class="line">            for (int i = 0; i &lt; limit; i++) &#123;</span><br><span class="line">                dst[i] = (char) buffer.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            data.append(dst);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        return data.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class NIOClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket socket = new Socket(&quot;127.0.0.1&quot;, 8888);</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        String s = &quot;hello world&quot;;</span><br><span class="line">        out.write(s.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/01/22/Java虚拟机/" rel="next" title="Java 虚拟机">                <i class="fa fa-chevron-left"></i> Java 虚拟机              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/02/02/Spring 框架分析/" rel="prev" title="Spring 框架分析">                Spring 框架分析 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#概览"><span class="nav-number">1.</span> <span class="nav-text">概览</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#磁盘操作"><span class="nav-number">2.</span> <span class="nav-text">磁盘操作</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#字节操作"><span class="nav-number">3.</span> <span class="nav-text">字节操作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#实现文件的复制"><span class="nav-number">3.1.</span> <span class="nav-text">实现文件的复制</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#装饰者模式"><span class="nav-number">3.2.</span> <span class="nav-text">装饰者模式</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#字符操作"><span class="nav-number">4.</span> <span class="nav-text">字符操作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#编码与解码"><span class="nav-number">4.1.</span> <span class="nav-text">编码与解码</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#String-的编码方式"><span class="nav-number">4.2.</span> <span class="nav-text">String 的编码方式</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Reader-与-Writer"><span class="nav-number">4.3.</span> <span class="nav-text">Reader 与 Writer</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#实现逐行输出文本文件的内容"><span class="nav-number">4.4.</span> <span class="nav-text">实现逐行输出文本文件的内容</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#对象操作"><span class="nav-number">5.</span> <span class="nav-text">对象操作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#序列化"><span class="nav-number">5.1.</span> <span class="nav-text">序列化</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Serializable"><span class="nav-number">5.2.</span> <span class="nav-text">Serializable</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#transient"><span class="nav-number">5.3.</span> <span class="nav-text">transient</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#网络操作"><span class="nav-number">6.</span> <span class="nav-text">网络操作</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#InetAddress"><span class="nav-number">6.1.</span> <span class="nav-text">InetAddress</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#URL"><span class="nav-number">6.2.</span> <span class="nav-text">URL</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Sockets"><span class="nav-number">6.3.</span> <span class="nav-text">Sockets</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Datagram"><span class="nav-number">6.4.</span> <span class="nav-text">Datagram</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#NIO"><span class="nav-number">7.</span> <span class="nav-text">NIO</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#流与块"><span class="nav-number">7.1.</span> <span class="nav-text">流与块</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#通道与缓冲区"><span class="nav-number">7.2.</span> <span class="nav-text">通道与缓冲区</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1、通道"><span class="nav-number">7.2.1.</span> <span class="nav-text">1、通道</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2、缓冲区"><span class="nav-number">7.2.2.</span> <span class="nav-text">2、缓冲区</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#缓冲区状态变量"><span class="nav-number">7.3.</span> <span class="nav-text">缓冲区状态变量</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#文件-NIO-实例"><span class="nav-number">7.4.</span> <span class="nav-text">文件 NIO 实例</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#选择器"><span class="nav-number">7.5.</span> <span class="nav-text">选择器</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-创建选择器"><span class="nav-number">7.5.1.</span> <span class="nav-text">1.创建选择器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-将通道注册到选择器上"><span class="nav-number">7.5.2.</span> <span class="nav-text">2.将通道注册到选择器上</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-监听事件"><span class="nav-number">7.5.3.</span> <span class="nav-text">3.监听事件</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-获取到达的事件"><span class="nav-number">7.5.4.</span> <span class="nav-text">4.获取到达的事件</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-事件循环"><span class="nav-number">7.5.5.</span> <span class="nav-text">5.事件循环</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#套接字-NIO-实例"><span class="nav-number">7.6.</span> <span class="nav-text">套接字 NIO 实例</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JQUERY的基本使用方法</title>
      <link href="/2019/10/18/JQUERY%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/18/JQUERY%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="JQUERY,JAVASCRIPT,WEB," /><meta name="keywords" content="JQUERY,JAVASCRIPT,WEB"><meta property="og:type" content="article"><meta property="og:title" content="JQUERY的基本使用方法"><meta property="og:url" content="http://yoursite.com/2018/09/19/JQUERY的基本使用方法/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fvevu7c9e6j20dw08iaa4.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fvfa9q0haaj20mv0lhq4k.jpg"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fvfa9zt6tij20mu0jmjt7.jpg"><meta property="og:updated_time" content="2018-09-19T11:00:00.000Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="JQUERY的基本使用方法"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1fvevu7c9e6j20dw08iaa4.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2018/09/19/JQUERY的基本使用方法/"/>  <title>JQUERY的基本使用方法 | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2018/09/19/JQUERY的基本使用方法/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">JQUERY的基本使用方法</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-09-19T23:53:27+08:00">                2018-09-19              </time>              </span>                                                            </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/前端篇/" itemprop="url" rel="index">                    <span itemprop="name">前端篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fvevu7c9e6j20dw08iaa4.jpg" alt=""></p><a id="more"></a><p>#准备工作</p><ul><li>在官网下载JQUERY库</li><li>将库在你需要的网页上引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li></ul><p>#Jquery的基本语法</p><ul><li><p>所有Jquery代码都需在如下代码里运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">--- jQuery functions go here ----</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>大致语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基础语法是：$(selector).action()</span><br><span class="line"></span><br><span class="line">美元符号定义 jQuery</span><br><span class="line">选择符（selector）“查询”和“查找” HTML 元素</span><br><span class="line">jQuery 的 action() 执行对元素的操作</span><br></pre></td></tr></table></figure></li></ul><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(this).hide() - 隐藏当前元素</span><br><span class="line">$(&quot;p&quot;).hide() - 隐藏所有段落</span><br><span class="line">$(&quot;.test&quot;).hide() - 隐藏所有 class=&quot;test&quot; 的所有元素</span><br><span class="line">$(&quot;#test&quot;).hide() - 隐藏所有 id=&quot;test&quot; 的元素</span><br></pre></td></tr></table></figure></p><p>#Jquery 选择器</p><ul><li><p>元素选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;) 选取 &lt;p&gt; 元素。</span><br><span class="line">$(&quot;p.intro&quot;) 选取所有 class=&quot;intro&quot; 的 &lt;p&gt; 元素。</span><br><span class="line">$(&quot;p#demo&quot;) 选取所有 id=&quot;demo&quot; 的 &lt;p&gt; 元素。</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;[href]&quot;) 选取所有带有 href 属性的元素。</span><br><span class="line">$(&quot;[href=&apos;#&apos;]&quot;) 选取所有带有 href 值等于 &quot;#&quot; 的元素。</span><br><span class="line">$(&quot;[href!=&apos;#&apos;]&quot;) 选取所有带有 href 值不等于 &quot;#&quot; 的元素。</span><br><span class="line">$(&quot;[href$=&apos;.jpg&apos;]&quot;) 选取所有 href 值以 &quot;.jpg&quot; 结尾的元素。</span><br></pre></td></tr></table></figure></li><li><p>CSS 选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure></li><li><p>jQuery 选择器<br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fvfa9q0haaj20mv0lhq4k.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1fvfa9zt6tij20mu0jmjt7.jpg" alt=""></p></li></ul>          </div>                            <footer class="post-footer">              <div class="post-tags">                      <a href="/tags/JQUERY/" rel="tag"># JQUERY</a>                      <a href="/tags/JAVASCRIPT/" rel="tag"># JAVASCRIPT</a>                      <a href="/tags/WEB/" rel="tag"># WEB</a>                  </div>                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2018/09/15/HEXO和GITHUB搭建个人博客/" rel="next" title="HEXO和GITHUB搭建个人博客">                <i class="fa fa-chevron-left"></i> HEXO和GITHUB搭建个人博客              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2018/11/29/Java常见面试题/" rel="prev" title="Java常见面试题">                Java常见面试题 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                  <section class="site-overview-wrap sidebar-panel sidebar-panel-active">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/2019/10/18/AOP/"/>
      <url>/2019/10/18/AOP/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>  <html class="theme-next pisces use-motion" lang="zh-Hans"><head>  <meta charset="UTF-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform" /><meta http-equiv="Cache-Control" content="no-siteapp" />      <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" /><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" /><link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">  <meta name="keywords" content="Abc, A" /><meta property="og:type" content="article"><meta property="og:title" content="AOP"><meta property="og:url" content="http://yoursite.com/2019/02/16/AOP/index.html"><meta property="og:site_name" content="Caiiiiii&#39;s blog"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1g058jc86b0j235j0sqkjl.jpg"><meta property="og:updated_time" content="2019-02-16T02:18:13.178Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="AOP"><meta name="twitter:image" content="http://ww1.sinaimg.cn/large/bfd348c6gy1g058jc86b0j235j0sqkjl.jpg"><script type="text/javascript" id="hexo.configurations">  var NexT = window.NexT || {};  var CONFIG = {    root: '/',    scheme: 'Pisces',    version: '5.1.4',    sidebar: {"position":"Left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},    fancybox: true,    tabs: true,    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},    duoshuo: {      userId: '0',      author: '博主'    },    algolia: {      applicationID: '',      apiKey: '',      indexName: '',      hits: {"per_page":10},      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}    }  };</script>  <link rel="canonical" href="http://yoursite.com/2019/02/16/AOP/"/>  <title>AOP | Caiiiiii's blog</title>  </head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">            <div class="container sidebar-position-Left page-post-detail">    <div class="headband"></div>    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">      <div class="header-inner"><div class="site-brand-wrapper">  <div class="site-meta custom-logo">        <div class="custom-logo-site-title">      <a href="/"  class="brand" rel="start">        <span class="logo-line-before"><i></i></span>        <span class="site-title">Caiiiiii's blog</span>        <span class="logo-line-after"><i></i></span>      </a>    </div>              <p class="site-subtitle">来局昆特牌吗？</p>        </div>  <div class="site-nav-toggle">    <button>      <span class="btn-bar"></span>      <span class="btn-bar"></span>      <span class="btn-bar"></span>    </button>  </div></div><nav class="site-nav">        <ul id="menu" class="menu">                      <li class="menu-item menu-item-home">          <a href="/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-home"></i> <br />                        首页          </a>        </li>                      <li class="menu-item menu-item-about">          <a href="/about/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-user"></i> <br />                        关于          </a>        </li>                      <li class="menu-item menu-item-tags">          <a href="/tags/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />                        标签          </a>        </li>                      <li class="menu-item menu-item-categories">          <a href="/categories/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-th"></i> <br />                        分类          </a>        </li>                      <li class="menu-item menu-item-archives">          <a href="/archives/" rel="section">                          <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />                        归档          </a>        </li>                </ul>    </nav> </div>    </header>    <main id="main" class="main">      <div class="main-inner">        <div class="content-wrap">          <div id="content" class="content">              <div id="posts" class="posts-expand">              <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">        <div class="post-block">    <link itemprop="mainEntityOfPage" href="http://yoursite.com/2019/02/16/AOP/">    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">      <meta itemprop="name" content="Caiiiiii">      <meta itemprop="description" content="">      <meta itemprop="image" content="/images/bz.gif">    </span>    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">      <meta itemprop="name" content="Caiiiiii's blog">    </span>          <header class="post-header">                          <h1 class="post-title" itemprop="name headline">AOP</h1>                <div class="post-meta">          <span class="post-time">                          <span class="post-meta-item-icon">                <i class="fa fa-calendar-o"></i>              </span>                              <span class="post-meta-item-text">发表于</span>                            <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-02-16T10:18:05+08:00">                2019-02-16              </time>              </span>                <span class="post-updated">    &nbsp; | &nbsp; 更新于    <time itemprop="dateUpdated" datetime="2019-02-16T10:18:13+08:00" content="2019-02-16">      2019-02-16    </time>  </span>                                              </span>                      <span class="post-category" >                          <span class="post-meta-divider">|</span>                          <span class="post-meta-item-icon">                <i class="fa fa-folder-o"></i>              </span>                              <span class="post-meta-item-text">分类于</span>                                            <span itemprop="about" itemscope itemtype="http://schema.org/Thing">                  <a href="/categories/Spring篇/" itemprop="url" rel="index">                    <span itemprop="name">Spring篇</span>                  </a>                </span>                                                          </span>                                                                                                    </div>      </header>                    <div class="post-body" itemprop="articleBody">                          <p><img src="http://ww1.sinaimg.cn/large/bfd348c6gy1g058jc86b0j235j0sqkjl.jpg" alt=""><br><a id="more"></a></p><h1 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h1><p>面向切面编程，就是在项目原有的功能基础上，通过AOP技术去添加新的功能，这些功能是建立在原有功能的基础上。或剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块减少系统重复代码，降低模块间的耦合度。</p><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>需要增强原有类的哪个方法，就需要对在代理类中包装哪个方法。个人理解，从功能上来说，原有类和代理类不一定要实现共同接口，但是为了赋予代理和和被代理类之间的逻辑关系，增加程序的可读性，可理解性，逻辑性，增加代理对象和被代理对象之间的关系，以更加符合面向对象编程是思维，而应该实现共同接口。</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>使用反射机制，方法和对象都是传入的变量，就可以经过传入的对象和方法而动态调用被代理对象的任何方法，jdk中提供了实现此动态代理的api，被代理类必须实现接口.</p><h2 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h2><p>返回对象是代理对象的子类，不需要代理对象实现接口。当调用原对象方法时，实际上调用的是代理子类的方法。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>JDK的动态代理只能针对实现了接口的类生成代理。而cglib的动态代理是针对类实现代理，这两种代理我们可以灵活使用。</p><h1 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h1><h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p> 代理模式就是本该我做的事，我不做，我交给代理人去完成。就比如，我生产了一些产品，我自己不卖，我委托代理商帮我卖，让代理商和顾客打交道，我自己负责主要产品的生产就可以了。</p><p> 代理模式的使用，需要有本类，和代理类，本类和代理类共同实现统一的接口。然后在main中调用就可以了。本类中的业务逻辑一般是不会变动的，在我们需要的时候可以不断的添加代理对象，或者修改代理类来实现业务的变更。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>修改代码的时候。不用随便去修改别人已经写好的代码，如果需要修改的话，可以通过代理的方式来扩展该方法。 隐藏某个类的时候，可以为其提供代理类 当我们要扩展某个类功能的时候，可以使用代理类 当一个类需要对不同的调用者提供不同的调用权限的时候，可以使用代理类来实现。 减少本类代码量的时候。 需要提升处理速度的时候。就比如我们在访问某个大型系统的时候，一次生成实例会耗费大量的时间，我们可以采用代理模式，当用来需要的时候才生成实例，这样就能提高访问的速度。</p>          </div>                            <footer class="post-footer">                                      <div class="post-nav">          <div class="post-nav-next post-nav-item">                          <a href="/2019/02/02/Spring 框架分析/" rel="next" title="Spring 框架分析">                <i class="fa fa-chevron-left"></i> Spring 框架分析              </a>                      </div>          <span class="post-nav-divider"></span>          <div class="post-nav-prev post-nav-item">                          <a href="/2019/03/08/SQL语句/" rel="prev" title="SQL语句">                SQL语句 <i class="fa fa-chevron-right"></i>              </a>                      </div>        </div>                      </footer>  </div>        </article>    <div class="post-spread">          </div>  </div>          </div>                              </div>                      <div class="sidebar-toggle">    <div class="sidebar-toggle-line-wrap">      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>    </div>  </div>  <aside id="sidebar" class="sidebar">        <div class="sidebar-inner">                    <ul class="sidebar-nav motion-element">          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">            文章目录          </li>          <li class="sidebar-nav-overview" data-target="site-overview-wrap">            站点概览          </li>        </ul>            <section class="site-overview-wrap sidebar-panel">        <div class="site-overview">          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">                          <img class="site-author-image" itemprop="image"                src="/images/bz.gif"                alt="Caiiiiii" />                          <p class="site-author-name" itemprop="name">Caiiiiii</p>              <p class="site-description motion-element" itemprop="description"></p>          </div>          <nav class="site-state motion-element">                          <div class="site-state-item site-state-posts">                              <a href="/archives/">                                <span class="site-state-item-count">18</span>                  <span class="site-state-item-name">日志</span>                </a>              </div>                                                                  <div class="site-state-item site-state-categories">                <a href="/categories/index.html">                  <span class="site-state-item-count">7</span>                  <span class="site-state-item-name">分类</span>                </a>              </div>                                                                  <div class="site-state-item site-state-tags">                <a href="/tags/index.html">                  <span class="site-state-item-count">8</span>                  <span class="site-state-item-name">标签</span>                </a>              </div>                      </nav>                                <div class="links-of-author motion-element">                                  <span class="links-of-author-item">                    <a href="https://github.com/Caiiiiii" target="_blank" title="GitHub">                                              <i class="fa fa-fw fa-github"></i>GitHub</a>                  </span>                                  <span class="links-of-author-item">                    <a href="mailto:995017591@qq.com" target="_blank" title="E-Mail">                                              <i class="fa fa-fw fa-envelope"></i>E-Mail</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://www.zhihu.com/people/cai-yuan-qin/activities" target="_blank" title="知乎">                                              <i class="fa fa-fw fa-globe"></i>知乎</a>                  </span>                                  <span class="links-of-author-item">                    <a href="https://steamcommunity.com/id/995017591" target="_blank" title="Steam">                                              <i class="fa fa-fw fa-globe"></i>Steam</a>                  </span>                            </div>                                                                    </div>      </section>            <!--noindex-->        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">          <div class="post-toc">                                                                <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#什么是AOP"><span class="nav-number">1.</span> <span class="nav-text">什么是AOP</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#静态代理"><span class="nav-number">2.</span> <span class="nav-text">静态代理</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#动态代理"><span class="nav-number">3.</span> <span class="nav-text">动态代理</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#JDK动态代理"><span class="nav-number">3.1.</span> <span class="nav-text">JDK动态代理</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Cglib代理"><span class="nav-number">3.2.</span> <span class="nav-text">Cglib代理</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#区别"><span class="nav-number">3.3.</span> <span class="nav-text">区别</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#代理模式（Proxy）"><span class="nav-number">4.</span> <span class="nav-text">代理模式（Proxy）</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#什么是代理模式"><span class="nav-number">4.1.</span> <span class="nav-text">什么是代理模式</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#使用场景"><span class="nav-number">4.2.</span> <span class="nav-text">使用场景</span></a></li></ol></li></ol></div>                      </div>        </section>      <!--/noindex-->                </div>  </aside>              </div>    </main>    <footer id="footer" class="footer">      <div class="footer-inner">        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>  <span class="with-love">    <i class="fa fa-user"></i>  </span>  <span class="author" itemprop="copyrightHolder">Caiiiiii</span>  </div>                      </div>    </footer>          <div class="back-to-top">        <i class="fa fa-arrow-up"></i>              </div>          </div>  <script type="text/javascript">  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {    window.Promise = null;  }</script>          <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>          <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>          <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>          <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>          <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>      <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>      <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>    <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>                        </body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test_my_site</title>
      <link href="/2019/10/18/test-my-site/"/>
      <url>/2019/10/18/test-my-site/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

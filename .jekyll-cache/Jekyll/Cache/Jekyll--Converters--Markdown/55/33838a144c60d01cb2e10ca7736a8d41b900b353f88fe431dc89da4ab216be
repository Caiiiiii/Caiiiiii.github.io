I"V<h1 id="元字符">元字符</h1>
<h3 id="匹配字符">匹配字符</h3>
<ul>
  <li>.  ：匹配除换行符意外的任意字符</li>
  <li>\w ：匹配字母或数字或下划线或汉字</li>
  <li>\s : 匹配任意的空白符</li>
  <li>\d ：匹配数字</li>
</ul>

<h3 id="匹配位置">匹配位置</h3>
<ul>
  <li>\b ：匹配单词的开始或结束</li>
  <li>^  : 匹配字符串的开始</li>
  <li>$  : 匹配字符串的结束</li>
  <li>\G : 上一个匹配结尾（本次匹配开始）</li>
  <li>\A : 字符串开头（类似 ^,但不受处理多行选项的影响）</li>
  <li>\Z : 字符串结尾或行尾（不受处理多行选项的影响）</li>
  <li>\z : 字符串结尾（类似$，但不受处理多行选项的影响）</li>
</ul>

<h3 id="重复">重复</h3>
<ul>
  <li>* : 重复零次或者更多次</li>
  <li>+ ：重复一次或者更多次</li>
  <li>?  : 重复零次或者一次</li>
  <li>{n} : 重复n次</li>
  <li>{n,} : 重复n次或更多次</li>
  <li>{n,m} ：重复n到m次</li>
</ul>

<h1 id="字符转义">字符转义</h1>

<p>如果想匹配元字符本身或者正则中的一些特殊字符，使用 \ 转义。例如 匹配 * 这个字符则使用 \* ,匹配 \ 这个字符，使用 \\ 。</p>

<table>
  <tbody>
    <tr>
      <td>需要转义的字符 ： $ , ( , ) , * , + , . , [ , ] , ? , \ , ^ , { , } ,</td>
    </tr>
  </tbody>
</table>

<h1 id="字符类">字符类</h1>
<p>当需要匹配明确的字符或字符集合的时候，就用到字符类。</p>
<h3 id="特殊字符">特殊字符</h3>
<ul>
  <li>\0hh : 8进制值hh所表示的字符</li>
  <li>\xhh : 16进制值hh锁表示的字符</li>
  <li>\uhhhh : 16进制值hhhh所表示的Unicode字符</li>
  <li>\t : tab</li>
  <li>\n : 换行符</li>
  <li>\r : 回车符</li>
  <li>\f  : 换页符</li>
  <li>\e : Escape</li>
  <li>\CN : ASCII控制字符。比如\cC 代表 Ctrl+C</li>
  <li>\p{name} : Unicode 中命名为name的字符类，例如 \p{IsGreek}</li>
</ul>

<h3 id="陈列">陈列</h3>
<ul>
  <li>[aeiou] ： 匹配一个元音字符</li>
  <li>[.?!] ： 匹配给定的一个标点</li>
</ul>

<h3 id="范围">范围</h3>
<ul>
  <li>[0-9] : 匹配0~9的数字，同 \d</li>
  <li>[a-z] : 匹配所有小写字母</li>
  <li>[a-zA-Z] : 匹配所有字母</li>
  <li>[a-z0-9A-Z_] : 等同于 \w</li>
</ul>

<h1 id="反义">反义</h1>
<h3 id="反义元字符">反义元字符</h3>
<ul>
  <li>\W ：匹配任意不是字母、数字、下划线、汉字的字符</li>
  <li>\S ：匹配任意不是空白符的字符</li>
  <li>\D : 匹配任意非数字的字符</li>
  <li>\B : 匹配不是单词开头或结束的位置</li>
</ul>

<h3 id="反义字符类">反义字符类</h3>
<ul>
  <li>[^x] : 匹配除了x以外的任意字符</li>
  <li>[^aeiou] : 匹配除了aeiou这几个字母以外的任意字符</li>
</ul>

<h3 id="分支条件">分支条件</h3>
<p>又叫逻辑运算符，在此 X 和 Y 表示两个表达式</p>
<ul>
  <li>XY ： X紧跟Y</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>X</td>
          <td>Y ： 表示X或Y，从左到右，满足第一个条件就不会继续匹配了</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h1 id="分组">分组</h1>
<p>在这里我把表达式统一以\w 为例 ：</p>
<ul>
  <li>(\w) : 被一个括号包围起来是一个整体，表示一个分组</li>
  <li>(\w)(\w) : 自动命名分组，第一个小括号是分组1，第二个小括号是分组2</li>
  <li>(?’Word’\w+)) : 表示定义了一个叫做Word的分组</li>
  <li>(?\w+)) : 表示定义了一个叫做Word的分组</li>
  <li>(?:\w+) : 匹配exp，不捕获匹配的文本，也不给此分组分配组号</li>
</ul>

<h1 id="反向引用">反向引用</h1>
<p>后面的表达式可以引用前面的某个分组，用 \1 表示，就好像分组1的值赋值给了 \1 这个变量，这个变量可以在后面任意位置引用</p>

<ul>
  <li>\1 表示分组1匹配的文本</li>
  <li>\k 表示分组 Word 匹配的文本</li>
</ul>

<p>匹配重复两个英文，例如匹配 Hello Hello 、 lei123 lei123:</p>
<ul>
  <li>(\w+)\s+\1</li>
  <li>(?\w+)s+\k</li>
</ul>
:ET